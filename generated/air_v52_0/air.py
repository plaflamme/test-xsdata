from dataclasses import dataclass, field
from decimal import Decimal
from enum import Enum
from typing import List, Optional
from xsdata.models.datatype import XmlDate, XmlDateTime, XmlDuration, XmlTime
from generated.air_v52_0.air_req_rsp import (
    AirExchangeEligibilityReq,
    AirExchangeEligibilityRsp,
    AirExchangeMultiQuoteReq,
    AirExchangeMultiQuoteRsp,
    AirExchangeQuoteReq,
    AirExchangeQuoteRsp,
    AirExchangeReq,
    AirExchangeRsp,
    AirExchangeTicketingReq,
    AirExchangeTicketingRsp,
    AirFareDisplayReq,
    AirFareDisplayRsp,
    AirFareRulesReq,
    AirFareRulesRsp,
    AirMerchandisingDetailsReq,
    AirMerchandisingDetailsRsp,
    AirMerchandisingOfferAvailabilityReq,
    AirMerchandisingOfferAvailabilityRsp,
    AirPrePayReq,
    AirPrePayRsp,
    AirPriceReq,
    AirPriceRsp,
    AirRefundQuoteReq,
    AirRefundQuoteRsp,
    AirRefundReq,
    AirRefundRsp,
    AirRepriceReq,
    AirRepriceRsp,
    AirRetrieveDocumentReq,
    AirRetrieveDocumentRsp,
    AirTicketingReq,
    AirTicketingRsp,
    AirUpsellSearchReq,
    AirUpsellSearchRsp,
    AirVoidDocumentReq,
    AirVoidDocumentRsp,
    AvailabilitySearchReq,
    AvailabilitySearchRsp,
    EmdissuanceReq,
    EmdissuanceRsp,
    EmdretrieveReq,
    EmdretrieveRsp,
    FlightDetailsReq,
    FlightDetailsRsp,
    FlightInformationReq,
    FlightInformationRsp,
    FlightTimeTableReq,
    FlightTimeTableRsp,
    LowFareSearchReq,
    LowFareSearchRsp,
    ScheduleSearchReq,
    ScheduleSearchRsp,
    SeatMapReq,
    SeatMapRsp,
)
from generated.common_v33_0.common_req_rsp import ErrorInfo as V33ErrorInfo
from generated.common_v52_0.common import (
    AccountCode,
    AgencyInfo,
    AirExchangeInfo,
    AirSeatAssignment,
    Airport,
    BaseReservation,
    BookingTraveler,
    BookingTravelerRef,
    CabinClass,
    Carrier,
    Commission,
    ConnectionPoint,
    CreditCardAuth,
    DiscountCard,
    Distance,
    Email,
    Endorsement,
    FormOfPayment,
    FormOfPaymentRef,
    HostToken,
    IndustryStandardSsr,
    LoyaltyCard,
    LoyaltyProgram,
    Mcoinformation,
    MetaData,
    Name,
    OverridePcc,
    Payment,
    Penalty as CommonPenalty,
    PhoneNumber,
    PointOfSale,
    PriceMatchError,
    Provider,
    ProviderReservationInfoRef,
    RefundRemark,
    Remark,
    ResponseMessage,
    Restriction as CommonRestriction,
    Ssr,
    Segment,
    ServiceData,
    ServiceInfo,
    ServiceRuleType,
    SupplierLocator,
    ThirdPartyInformation,
    VoidDocumentInfoDocumentType,
    VoidResultInfoDocumentType,
    TypeAdjustmentTarget,
    TypeAdjustmentType,
    TypeAssociatedRemarkWithSegmentRef,
    TypeDistance,
    TypeElementStatus,
    TypeErrorInfo,
    TypeFeeInfo,
    TypeFlexibleTimeSpec,
    TypeFormOfRefund,
    TypeItineraryCode,
    TypeLocation,
    TypePassengerType,
    TypePriceClassOfService,
    TypePricingType,
    TypePurchaseWindow,
    TypeReqSeat,
    TypeResultMessage,
    TypeSearchLocation,
    TypeSegmentRef as CommonTypeSegmentRef,
    TypeStructuredAddress,
    TypeTaxInfo,
    TypeTicketStatus,
    TypeTimeSpec,
)
from generated.common_v52_0.common_req_rsp import ErrorInfo as V52ErrorInfo
from generated.gds_queue_v52_0.gdsqueue import (
    GdsEnterQueueReq,
    GdsEnterQueueRsp,
    GdsExitQueueReq,
    GdsExitQueueRsp,
    GdsNextOnQueueReq,
    GdsNextOnQueueRsp,
    GdsQueueAgentListReq,
    GdsQueueAgentListRsp,
    GdsQueueCountReq,
    GdsQueueCountRsp,
    GdsQueueListReq,
    GdsQueueListRsp,
    GdsQueuePlaceReq,
    GdsQueuePlaceRsp,
    GdsQueueRemoveReq,
    GdsQueueRemoveRsp,
)
from generated.hotel_v52_0.hotel_req_rsp import (
    HotelDetailsReq,
    HotelDetailsRsp,
    HotelKeywordReq,
    HotelKeywordRsp,
    HotelMediaLinksReq,
    HotelMediaLinksRsp,
    HotelRetrieveReq,
    HotelRetrieveRsp,
    HotelRulesReq,
    HotelRulesRsp,
    HotelSearchAvailabilityReq,
    HotelSearchAvailabilityRsp,
    HotelSuperShopperReq,
    HotelSuperShopperRsp,
    HotelUpsellDetailsReq,
    HotelUpsellDetailsRsp,
)
from generated.rail_v52_0.rail_req_rsp import (
    RailAvailabilitySearchReq,
    RailAvailabilitySearchRsp,
    RailExchangeQuoteReq,
    RailExchangeQuoteRsp,
    RailExchangeReq,
    RailExchangeRsp,
    RailRefundQuoteReq,
    RailRefundQuoteRsp,
    RailRefundReq,
    RailRefundRsp,
    RailSeatMapReq,
    RailSeatMapRsp,
)
from generated.session_context_v1.session_context_v1 import SessionContext
from generated.shared_booking_v52_0.shared_booking_req_rsp import (
    BookingAirExchangeQuoteReq,
    BookingAirExchangeQuoteRsp,
    BookingAirExchangeReq,
    BookingAirExchangeRsp,
    BookingAirPnrElementReq,
    BookingAirPnrElementRsp,
    BookingAirSegmentReq,
    BookingAirSegmentRsp,
    BookingDisplayReq,
    BookingDisplayRsp,
    BookingEndReq,
    BookingEndRsp,
    BookingHotelPnrElementReq,
    BookingHotelPnrElementRsp,
    BookingHotelSegmentReq,
    BookingHotelSegmentRsp,
    BookingPnrElementReq,
    BookingPnrElementRsp,
    BookingPricingReq,
    BookingPricingRsp,
    BookingRetrieveDocumentReq,
    BookingRetrieveDocumentRsp,
    BookingSeatAssignmentReq,
    BookingSeatAssignmentRsp,
    BookingStartReq,
    BookingStartRsp,
    BookingTerminalReq,
    BookingTerminalRsp,
    BookingTravelerReq,
    BookingTravelerRsp,
)
from generated.shared_uprofile_v20_0.uprofile_admin_req_rsp import (
    ProfileCreateFieldReq,
    ProfileCreateFieldRsp,
    ProfileCreateTagsReq,
    ProfileCreateTagsRsp,
    ProfileDeleteTagReq,
    ProfileDeleteTagRsp,
    ProfileModifyFieldReq,
    ProfileModifyFieldRsp,
    ProfileModifyTagsReq,
    ProfileModifyTagsRsp,
    ProfileRetrieveHistoryReq,
    ProfileRetrieveHistoryRsp,
    ProfileRetrieveParentReq,
    ProfileRetrieveParentRsp,
    ProfileSearchFieldReq,
    ProfileSearchFieldRsp,
    ProfileSearchTagsReq,
    ProfileSearchTagsRsp,
    SingleProfileMigrationReq,
    SingleProfileMigrationRsp,
    UimetaDataCreateReq,
    UimetaDataCreateRsp,
    UimetaDataDeleteReq,
    UimetaDataDeleteRsp,
    UimetaDataModifyReq,
    UimetaDataModifyRsp,
    UimetaDataRetrieveReq,
    UimetaDataRetrieveRsp,
)
from generated.shared_uprofile_v20_0.uprofile_core_req_rsp import (
    ProfileCreateReq,
    ProfileCreateRsp,
    ProfileDeleteReq,
    ProfileDeleteRsp,
    ProfileModifyReq,
    ProfileModifyRsp,
    ProfileRetrieveReq,
    ProfileRetrieveRsp,
)
from generated.shared_uprofile_v20_0.uprofile_search_req_rsp import (
    ProfileChildSearchReq,
    ProfileChildSearchRsp,
    ProfileSearchReq,
    ProfileSearchRsp,
)
from generated.shared_uprofile_v20_0.uprofile_shared import ProfileSummaryErrorInfo
from generated.system_v32_0.system import (
    ExternalCacheAccessReq,
    ExternalCacheAccessRsp,
    PingReq,
    PingRsp,
    SystemInfoReq,
    SystemInfoRsp,
    TimeReq,
    TimeRsp,
)
from generated.terminal_v33_0.terminal import (
    CreateTerminalSessionReq,
    CreateTerminalSessionRsp,
    EndTerminalSessionReq,
    EndTerminalSessionRsp,
    TerminalReq,
    TerminalRsp,
)
from generated.universal_v52_0.universal_record import (
    SupportedVersions,
    UniversalModifyErrorInfo,
)
from generated.universal_v52_0.universal_record_req_rsp import (
    AckScheduleChangeReq,
    AckScheduleChangeRsp,
    AirCancelReq,
    AirCancelRsp,
    AirCreateReservationReq,
    AirCreateReservationRsp,
    AirMerchandisingFulfillmentReq,
    AirMerchandisingFulfillmentRsp,
    HotelCancelReq,
    HotelCancelRsp,
    HotelCreateReservationReq,
    HotelCreateReservationRsp,
    PassiveCancelReq,
    PassiveCancelRsp,
    PassiveCreateReservationReq,
    PassiveCreateReservationRsp,
    ProviderReservationDisplayDetailsReq,
    ProviderReservationDisplayDetailsRsp,
    ProviderReservationDivideReq,
    ProviderReservationDivideRsp,
    RailCreateReservationReq,
    RailCreateReservationRsp,
    SavedTripCreateReq,
    SavedTripCreateRsp,
    SavedTripDeleteReq,
    SavedTripDeleteRsp,
    SavedTripModifyReq,
    SavedTripModifyRsp,
    SavedTripRetrieveReq,
    SavedTripRetrieveRsp,
    SavedTripSearchReq,
    SavedTripSearchRsp,
    UniversalRecordCancelReq,
    UniversalRecordCancelRsp,
    UniversalRecordErrorInfo,
    UniversalRecordHistorySearchReq,
    UniversalRecordHistorySearchRsp,
    UniversalRecordImportReq,
    UniversalRecordImportRsp,
    UniversalRecordModifyReq,
    UniversalRecordModifyRsp,
    UniversalRecordRetrieveReq,
    UniversalRecordRetrieveRsp,
    UniversalRecordSearchReq,
    UniversalRecordSearchRsp,
    VehicleCancelReq,
    VehicleCancelRsp,
    VehicleCreateReservationReq,
    VehicleCreateReservationRsp,
)
from generated.uprofile_v37_0.uprofile_req_rsp import (
    ProfileCreateHierarchyLevelReq,
    ProfileCreateHierarchyLevelRsp,
    ProfileDeleteHierarchyLevelReq,
    ProfileDeleteHierarchyLevelRsp,
    ProfileModifyBridgeBranchesReq,
    ProfileModifyBridgeBranchesRsp,
    ProfileModifyHierarchyLevelReq,
    ProfileModifyHierarchyLevelRsp,
    ProfileModifyTemplateReq,
    ProfileModifyTemplateRsp,
    ProfileRetrieveActionReq,
    ProfileRetrieveActionRsp,
    ProfileRetrieveBridgeBranchesReq,
    ProfileRetrieveBridgeBranchesRsp,
    ProfileRetrieveHierarchyReq,
    ProfileRetrieveHierarchyRsp,
    ProfileRetrieveTemplateReq,
    ProfileRetrieveTemplateRsp,
    ProfileSearchActionReq,
    ProfileSearchActionRsp,
)
from generated.util_v52_0.util import (
    AgencyServiceFeeCreateReq,
    AgencyServiceFeeCreateRsp,
    BrandedFareAdminReq,
    BrandedFareAdminRsp,
    BrandedFareSearchReq,
    BrandedFareSearchRsp,
    CalculateTaxReq,
    CalculateTaxRsp,
    ContentProviderRetrieveReq,
    ContentProviderRetrieveRsp,
    CreateAgencyFeeMcoReq,
    CreateAgencyFeeMcoRsp,
    CreditCardAuthReq,
    CreditCardAuthRsp,
    CurrencyConversionReq,
    CurrencyConversionRsp,
    FindEmployeesOnFlightReq,
    FindEmployeesOnFlightRsp,
    McoSearchReq,
    McoSearchRsp,
    McoVoidReq,
    McoVoidRsp,
    MctCountReq,
    MctCountRsp,
    MctLookupReq,
    MctLookupRsp,
    MirReportRetrieveReq,
    MirReportRetrieveRsp,
    ReferenceDataRetrieveReq,
    ReferenceDataRetrieveRsp,
    ReferenceDataSearchReq,
    ReferenceDataSearchRsp,
    ReferenceDataUpdateReq,
    ReferenceDataUpdateRsp,
    UpsellAdminReq,
    UpsellAdminRsp,
    UpsellSearchReq,
    UpsellSearchRsp,
)
from generated.vehicle_v52_0.vehicle_req_rsp import (
    VehicleKeywordReq,
    VehicleKeywordRsp,
    VehicleLocationDetailReq,
    VehicleLocationDetailRsp,
    VehicleLocationReq,
    VehicleLocationRsp,
    VehicleMediaLinksReq,
    VehicleMediaLinksRsp,
    VehicleRetrieveReq,
    VehicleRetrieveRsp,
    VehicleRulesReq,
    VehicleRulesRsp,
    VehicleSearchAvailabilityReq,
    VehicleSearchAvailabilityRsp,
    VehicleUpsellSearchAvailabilityReq,
    VehicleUpsellSearchAvailabilityRsp,
)


@dataclass
class Advtype:
    """
    :ivar adv_rsvn_only_if_tk: Reservation only if ticketed. True is
        advanced reservations only if tickets. False is no advanced
        reservations
    :ivar adv_rsvn_any_tm: Reservation anytime. True if advanced
        reservatiosn anytime. False if advanced reservations for a
        limited time.
    :ivar adv_rsvn_hrs: Reservation hours. True if advanced reservation
        time in hours. False if advanced reservation time not in hours.
    :ivar adv_rsvn_days: Reservation days. True if advanced reservation
        time in days. False if advanced reservation time not in days.
    :ivar adv_rsvn_months: Reservation months. True if advanced
        reservation time in months. False if advanced reservation time
        not in months.
    :ivar adv_rsvn_earliest_tm: Earliest reservation time. True if
        advanced reservations time is earliest permitted. False is
        advanced reservation time not earliest permitted time.
    :ivar adv_rsvn_latest_tm: Latest reservation time. True if advanced
        reservations time is latest permitted. False is advanced
        reservation time not latest permitted time.
    :ivar adv_rsvn_waived: Reservation Waived. True if advanced
        reservation waived. False if advanced reservation not waived.
    :ivar adv_rsvn_data_exists: Reservation data exists. True if
        advanced reservation data exists. False if advanced reservation
        data does not exist.
    :ivar adv_rsvn_end_item: Reservation end item. True if advanced
        reservation end item and more values. False if it does not
        exist.
    :ivar adv_tk_earliest_tm: Earliest ticketing time. True if earliest
        permitted. False if not earliest permitted.
    :ivar adv_tk_latest_tm: Latest ticketing time. True if time is
        latest permitted. False if time is not latest permitted.
    :ivar adv_tk_rsvn_hrs: Ticketing reservation hours. True if in
        hours. False if not in hours.
    :ivar adv_tk_rsvn_days: Ticketing reservation days. True if in days.
        False if not in days.
    :ivar adv_tk_rsvn_months: Ticketing reservation months. True if in
        months. False if not in months.
    :ivar adv_tk_start_hrs: Latest ticketing departure. True if time is
        latest permitted. False if time is not latest permitted.
    :ivar adv_tk_start_days: Ticketing departure days. True if in days.
        False if not in days.
    :ivar adv_tk_start_months: Ticketing reservation months. True if in
        months. False if not in months.
    :ivar adv_tk_waived: Ticketing waived. True if waived. False if not
        waived.
    :ivar adv_tk_any_tm: Ticketing anytime. True if anytime. False if
        limited time.
    :ivar adv_tk_end_item: Ticketing end item. True if advanced
        ticketing item and more values. False if end item does not
        exist.
    :ivar adv_rsvn_tm: Advanced reservation time.
    :ivar adv_tk_rsvn_tm: Advanced ticketing reservation time.
    :ivar adv_tk_start_tm: Advanced ticketing departure time.
    :ivar earliest_rsvn_dt_present: Earliest reservation date. True if
        date is present. False if date is not present.
    :ivar earliest_tk_dt_present: Earliest ticketing date. True if date
        is present. False if date is not present.
    :ivar latest_rsvn_dt_present: Latest reservation date. True if date
        is present. False if date is not present.
    :ivar latest_tk_dt_present: Latest ticketing date.  True if date is
        present. False if date is not present.
    :ivar earliest_rsvn_dt: Earliest reservation date.
    :ivar earliest_tk_dt: Earliest ticketing date.
    :ivar latest_rsvn_dt: Latest reservation date.
    :ivar latest_tk_dt: Latest ticketing date.
    """
    class Meta:
        name = "ADVType"
        target_namespace = "http://www.travelport.com/schema/air_v52_0"

    adv_rsvn_only_if_tk: Optional[bool] = field(
        default=None,
        metadata={
            "name": "AdvRsvnOnlyIfTk",
            "type": "Attribute",
        }
    )
    adv_rsvn_any_tm: Optional[bool] = field(
        default=None,
        metadata={
            "name": "AdvRsvnAnyTm",
            "type": "Attribute",
        }
    )
    adv_rsvn_hrs: Optional[bool] = field(
        default=None,
        metadata={
            "name": "AdvRsvnHrs",
            "type": "Attribute",
        }
    )
    adv_rsvn_days: Optional[bool] = field(
        default=None,
        metadata={
            "name": "AdvRsvnDays",
            "type": "Attribute",
        }
    )
    adv_rsvn_months: Optional[bool] = field(
        default=None,
        metadata={
            "name": "AdvRsvnMonths",
            "type": "Attribute",
        }
    )
    adv_rsvn_earliest_tm: Optional[bool] = field(
        default=None,
        metadata={
            "name": "AdvRsvnEarliestTm",
            "type": "Attribute",
        }
    )
    adv_rsvn_latest_tm: Optional[bool] = field(
        default=None,
        metadata={
            "name": "AdvRsvnLatestTm",
            "type": "Attribute",
        }
    )
    adv_rsvn_waived: Optional[bool] = field(
        default=None,
        metadata={
            "name": "AdvRsvnWaived",
            "type": "Attribute",
        }
    )
    adv_rsvn_data_exists: Optional[bool] = field(
        default=None,
        metadata={
            "name": "AdvRsvnDataExists",
            "type": "Attribute",
        }
    )
    adv_rsvn_end_item: Optional[bool] = field(
        default=None,
        metadata={
            "name": "AdvRsvnEndItem",
            "type": "Attribute",
        }
    )
    adv_tk_earliest_tm: Optional[bool] = field(
        default=None,
        metadata={
            "name": "AdvTkEarliestTm",
            "type": "Attribute",
        }
    )
    adv_tk_latest_tm: Optional[bool] = field(
        default=None,
        metadata={
            "name": "AdvTkLatestTm",
            "type": "Attribute",
        }
    )
    adv_tk_rsvn_hrs: Optional[bool] = field(
        default=None,
        metadata={
            "name": "AdvTkRsvnHrs",
            "type": "Attribute",
        }
    )
    adv_tk_rsvn_days: Optional[bool] = field(
        default=None,
        metadata={
            "name": "AdvTkRsvnDays",
            "type": "Attribute",
        }
    )
    adv_tk_rsvn_months: Optional[bool] = field(
        default=None,
        metadata={
            "name": "AdvTkRsvnMonths",
            "type": "Attribute",
        }
    )
    adv_tk_start_hrs: Optional[bool] = field(
        default=None,
        metadata={
            "name": "AdvTkStartHrs",
            "type": "Attribute",
        }
    )
    adv_tk_start_days: Optional[bool] = field(
        default=None,
        metadata={
            "name": "AdvTkStartDays",
            "type": "Attribute",
        }
    )
    adv_tk_start_months: Optional[bool] = field(
        default=None,
        metadata={
            "name": "AdvTkStartMonths",
            "type": "Attribute",
        }
    )
    adv_tk_waived: Optional[bool] = field(
        default=None,
        metadata={
            "name": "AdvTkWaived",
            "type": "Attribute",
        }
    )
    adv_tk_any_tm: Optional[bool] = field(
        default=None,
        metadata={
            "name": "AdvTkAnyTm",
            "type": "Attribute",
        }
    )
    adv_tk_end_item: Optional[bool] = field(
        default=None,
        metadata={
            "name": "AdvTkEndItem",
            "type": "Attribute",
        }
    )
    adv_rsvn_tm: Optional[int] = field(
        default=None,
        metadata={
            "name": "AdvRsvnTm",
            "type": "Attribute",
        }
    )
    adv_tk_rsvn_tm: Optional[int] = field(
        default=None,
        metadata={
            "name": "AdvTkRsvnTm",
            "type": "Attribute",
        }
    )
    adv_tk_start_tm: Optional[int] = field(
        default=None,
        metadata={
            "name": "AdvTkStartTm",
            "type": "Attribute",
        }
    )
    earliest_rsvn_dt_present: Optional[bool] = field(
        default=None,
        metadata={
            "name": "EarliestRsvnDtPresent",
            "type": "Attribute",
        }
    )
    earliest_tk_dt_present: Optional[bool] = field(
        default=None,
        metadata={
            "name": "EarliestTkDtPresent",
            "type": "Attribute",
        }
    )
    latest_rsvn_dt_present: Optional[bool] = field(
        default=None,
        metadata={
            "name": "LatestRsvnDtPresent",
            "type": "Attribute",
        }
    )
    latest_tk_dt_present: Optional[bool] = field(
        default=None,
        metadata={
            "name": "LatestTkDtPresent",
            "type": "Attribute",
        }
    )
    earliest_rsvn_dt: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "EarliestRsvnDt",
            "type": "Attribute",
        }
    )
    earliest_tk_dt: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "EarliestTkDt",
            "type": "Attribute",
        }
    )
    latest_rsvn_dt: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "LatestRsvnDt",
            "type": "Attribute",
        }
    )
    latest_tk_dt: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "LatestTkDt",
            "type": "Attribute",
        }
    )


@dataclass
class ActionDetails:
    """Information related to the storing of the fare: Agent, Date and Action for Provider: 1P

    :ivar pseudo_city_code: PCC in the host of the agent who stored the
        fare for Provider: 1P
    :ivar agent_sine: The sign in of the user who stored the fare for
        Provider: 1P
    :ivar event_date: Date at which the fare was stored for Provider: 1P
    :ivar event_time: Time at which the fare was stored for Provider: 1P
    :ivar text: The type of action the agent performed for Provider: 1P
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    pseudo_city_code: Optional[str] = field(
        default=None,
        metadata={
            "name": "PseudoCityCode",
            "type": "Attribute",
            "min_length": 2,
            "max_length": 10,
        }
    )
    agent_sine: Optional[str] = field(
        default=None,
        metadata={
            "name": "AgentSine",
            "type": "Attribute",
        }
    )
    event_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "EventDate",
            "type": "Attribute",
        }
    )
    event_time: Optional[XmlTime] = field(
        default=None,
        metadata={
            "name": "EventTime",
            "type": "Attribute",
        }
    )
    text: Optional[str] = field(
        default=None,
        metadata={
            "name": "Text",
            "type": "Attribute",
        }
    )


@dataclass
class AdditionalInfo:
    """
    :ivar category: The category code is the code the AdditionalInfo
        text came from, e.g. S5 or S7.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    category: Optional[str] = field(
        default=None,
        metadata={
            "name": "Category",
            "type": "Attribute",
            "required": True,
        }
    )


@dataclass
class AddlBookingCodeInformation:
    """
    Returns additional booking codes for the selected fare.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    value: str = field(
        default="",
        metadata={
            "required": True,
            "min_length": 1,
            "white_space": "collapse",
        }
    )


@dataclass
class Adjustment:
    """An indentifier which indentifies adjustment made on original pricing.

    It can a flat amount or percentage of original price. The value of
    Amount/Percent can be negetive. Negative value implies a discount.

    :ivar amount: Implies a flat amount to be adjusted. Negetive value
        implies a discount.
    :ivar percent: Implies an adjustment to be made on original price.
        Negetive value implies a discount.
    :ivar adjusted_total_price: The adjusted price after applying
        adjustment on Total price
    :ivar approximate_adjusted_total_price: The Converted adjusted total
        price in Default Currency for this entity.
    :ivar booking_traveler_ref: Reference to a booking traveler for
        which adjustment is applied.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    amount: Optional[str] = field(
        default=None,
        metadata={
            "name": "Amount",
            "type": "Element",
        }
    )
    percent: Optional[float] = field(
        default=None,
        metadata={
            "name": "Percent",
            "type": "Element",
        }
    )
    adjusted_total_price: Optional[str] = field(
        default=None,
        metadata={
            "name": "AdjustedTotalPrice",
            "type": "Attribute",
            "required": True,
        }
    )
    approximate_adjusted_total_price: Optional[str] = field(
        default=None,
        metadata={
            "name": "ApproximateAdjustedTotalPrice",
            "type": "Attribute",
        }
    )
    booking_traveler_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "BookingTravelerRef",
            "type": "Attribute",
        }
    )


@dataclass
class AirFareDisplayRuleKey:
    """The Tariff Fare Rule requested using a Key.

    The key is typically a provider specific string which is required to
    make either a following Air Fare Tariff request for Mileage/Routing
    information or Air Fare Tariff Rule Request.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    value: str = field(
        default="",
        metadata={
            "required": True,
            "min_length": 1,
            "white_space": "collapse",
        }
    )
    provider_code: Optional[str] = field(
        default=None,
        metadata={
            "name": "ProviderCode",
            "type": "Attribute",
            "min_length": 2,
            "max_length": 5,
        }
    )


@dataclass
class AirItinerarySolutionRef:
    """
    Reference to a complete AirItinerarySolution from a shared list.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    key: Optional[str] = field(
        default=None,
        metadata={
            "name": "Key",
            "type": "Attribute",
            "required": True,
        }
    )


class AirLegModifiersOrderBy(Enum):
    JOURNEY_TIME = "JourneyTime"
    DEPARTURE_TIME = "DepartureTime"
    ARRIVAL_TIME = "ArrivalTime"


@dataclass
class AirPricingInfoRef:
    """
    Reference to a AirPricing from a shared list.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    key: Optional[str] = field(
        default=None,
        metadata={
            "name": "Key",
            "type": "Attribute",
            "required": True,
        }
    )


class AirPricingSolutionItinerary(Enum):
    NEW = "New"
    ORIGINAL = "Original"


class AirRefundBundleRefundType(Enum):
    AUTO = "Auto"
    MANUAL = "Manual"


@dataclass
class AirRefundModifiers:
    """
    Provides controls and switches for the Refund process.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    refund_date: Optional[str] = field(
        default=None,
        metadata={
            "name": "RefundDate",
            "type": "Attribute",
        }
    )
    account_code: Optional[str] = field(
        default=None,
        metadata={
            "name": "AccountCode",
            "type": "Attribute",
        }
    )
    ticket_designator: Optional[str] = field(
        default=None,
        metadata={
            "name": "TicketDesignator",
            "type": "Attribute",
            "min_length": 0,
            "max_length": 20,
        }
    )


@dataclass
class AirReservationLocatorCode:
    """
    Identifies the AirReservation LocatorCode within the Universal Record.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    value: str = field(
        default="",
        metadata={
            "required": True,
            "min_length": 5,
            "max_length": 8,
        }
    )


@dataclass
class AirSearchAsynchModifiers:
    """
    Controls and switches for the Air Search request for Asynch Request.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    initial_asynch_result: Optional["AirSearchAsynchModifiers.InitialAsynchResult"] = field(
        default=None,
        metadata={
            "name": "InitialAsynchResult",
            "type": "Element",
        }
    )

    @dataclass
    class InitialAsynchResult:
        """
        :ivar max_wait: Max wait time in seconds.
        """
        max_wait: Optional[int] = field(
            default=None,
            metadata={
                "name": "MaxWait",
                "type": "Attribute",
            }
        )


class AirSearchModifiersOrderBy(Enum):
    JOURNEY_TIME = "JourneyTime"
    DEPARTURE_TIME = "DepartureTime"
    ARRIVAL_TIME = "ArrivalTime"


@dataclass
class AirSegmentRef:
    """
    Reference to a complete AirSegment from a shared list.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    key: Optional[str] = field(
        default=None,
        metadata={
            "name": "Key",
            "type": "Attribute",
            "required": True,
        }
    )


@dataclass
class AirSegmentTicketingModifiers:
    """Specifies modifiers that a particular segment should be priced with.

    If this is used, then there must be one for each AirSegment in the
    AirItinerary.

    :ivar air_segment_ref:
    :ivar brand_tier: Modifier to price by specific brand tier number.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    air_segment_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "AirSegmentRef",
            "type": "Attribute",
        }
    )
    brand_tier: Optional[str] = field(
        default=None,
        metadata={
            "name": "BrandTier",
            "type": "Attribute",
            "required": True,
            "min_length": 1,
            "max_length": 10,
        }
    )


class AirSolutionChangedInfoReasonCode(Enum):
    PRICE = "Price"
    SCHEDULE = "Schedule"
    BOTH = "Both"


@dataclass
class Alliance:
    """
    Alliance Code.

    :ivar code: The possible values are *A for Star Alliance,*O for One
        world,*S for Sky team etc.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    code: Optional[str] = field(
        default=None,
        metadata={
            "name": "Code",
            "type": "Attribute",
            "required": True,
        }
    )


@dataclass
class AlternateLocationDistanceRef:
    """
    Reference to a AlternateLocationDistance.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    key: Optional[str] = field(
        default=None,
        metadata={
            "name": "Key",
            "type": "Attribute",
            "required": True,
        }
    )


@dataclass
class BookingCode:
    """
    The Booking Code (Class of Service) for a segment.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    code: Optional[str] = field(
        default=None,
        metadata={
            "name": "Code",
            "type": "Attribute",
            "required": True,
            "min_length": 1,
            "max_length": 2,
        }
    )


@dataclass
class BookingCodeInfo:
    """Details Cabin class info and class of service information with availability
    counts.

    Only provided on search results and grouped by Cabin class

    :ivar cabin_class: Specifies Cabin class for a group of class of
        services. Cabin class is not identified if it is not present.
    :ivar booking_counts: Lists class of service and their counts for
        specific cabin class
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    cabin_class: Optional[str] = field(
        default=None,
        metadata={
            "name": "CabinClass",
            "type": "Attribute",
        }
    )
    booking_counts: Optional[str] = field(
        default=None,
        metadata={
            "name": "BookingCounts",
            "type": "Attribute",
        }
    )


@dataclass
class BookingInfo:
    """
    Links segments and fares together.

    :ivar booking_code:
    :ivar booking_count: Seat availability of the BookingCode
    :ivar cabin_class:
    :ivar fare_info_ref:
    :ivar segment_ref:
    :ivar coupon_ref: The coupon to which that booking is relative (if
        applicable)
    :ivar air_itinerary_solution_ref: Reference to an Air Itinerary
        Solution
    :ivar host_token_ref: HostToken Reference for this segment and fare
        combination.
    :ivar tax_info_ref: TaxInfo Reference for booking info and tax info
        combination.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    booking_code: Optional[str] = field(
        default=None,
        metadata={
            "name": "BookingCode",
            "type": "Attribute",
            "required": True,
        }
    )
    booking_count: Optional[str] = field(
        default=None,
        metadata={
            "name": "BookingCount",
            "type": "Attribute",
        }
    )
    cabin_class: Optional[str] = field(
        default=None,
        metadata={
            "name": "CabinClass",
            "type": "Attribute",
        }
    )
    fare_info_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "FareInfoRef",
            "type": "Attribute",
            "required": True,
        }
    )
    segment_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "SegmentRef",
            "type": "Attribute",
        }
    )
    coupon_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "CouponRef",
            "type": "Attribute",
        }
    )
    air_itinerary_solution_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "AirItinerarySolutionRef",
            "type": "Attribute",
        }
    )
    host_token_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "HostTokenRef",
            "type": "Attribute",
        }
    )
    tax_info_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "TaxInfoRef",
            "type": "Attribute",
        }
    )


@dataclass
class BookingRulesFareReference:
    """Fare Reference associated with the BookingRules.

    Containing a text container for vendor response text.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    value: str = field(
        default="",
        metadata={
            "required": True,
        }
    )
    class_of_service: Optional[str] = field(
        default=None,
        metadata={
            "name": "ClassOfService",
            "type": "Attribute",
            "min_length": 1,
            "max_length": 2,
        }
    )
    ticket_designator_code: Optional[str] = field(
        default=None,
        metadata={
            "name": "TicketDesignatorCode",
            "type": "Attribute",
            "min_length": 0,
            "max_length": 20,
        }
    )
    account_code: Optional[str] = field(
        default=None,
        metadata={
            "name": "AccountCode",
            "type": "Attribute",
        }
    )
    upgrage_allowed: Optional[bool] = field(
        default=None,
        metadata={
            "name": "UpgrageAllowed",
            "type": "Attribute",
        }
    )
    upgrade_class_of_service: Optional[str] = field(
        default=None,
        metadata={
            "name": "UpgradeClassOfService",
            "type": "Attribute",
            "min_length": 1,
            "max_length": 2,
        }
    )


@dataclass
class BrandId:
    """
    Brand ids for Merchandising details.
    """
    class Meta:
        name = "BrandID"
        namespace = "http://www.travelport.com/schema/air_v52_0"

    id: Optional[str] = field(
        default=None,
        metadata={
            "name": "Id",
            "type": "Attribute",
            "required": True,
        }
    )


@dataclass
class BrandInfo:
    """
    Commercially recognized product offered by an airline.

    :ivar key: Brand Key
    :ivar brand_id: The unique identifier of the brand
    :ivar air_pricing_info_ref: A reference to a AirPricing. Providers:
        ACH, 1G, 1V, 1P.
    :ivar fare_info_ref: A reference to a FareInfo. Providers: ACH, 1G,
        1V, 1P.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    key: Optional[str] = field(
        default=None,
        metadata={
            "name": "Key",
            "type": "Attribute",
        }
    )
    brand_id: Optional[str] = field(
        default=None,
        metadata={
            "name": "BrandID",
            "type": "Attribute",
            "required": True,
            "min_length": 1,
            "max_length": 19,
        }
    )
    air_pricing_info_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "AirPricingInfoRef",
            "type": "Attribute",
        }
    )
    fare_info_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "FareInfoRef",
            "type": "Attribute",
        }
    )


@dataclass
class BrandModifiers:
    """
    Used to specify the level of branding requested.

    :ivar fare_family_display: Used to request a fare family display.
    :ivar basic_details_only: Used to request basic details of the
        brand.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    fare_family_display: Optional["BrandModifiers.FareFamilyDisplay"] = field(
        default=None,
        metadata={
            "name": "FareFamilyDisplay",
            "type": "Element",
        }
    )
    basic_details_only: Optional["BrandModifiers.BasicDetailsOnly"] = field(
        default=None,
        metadata={
            "name": "BasicDetailsOnly",
            "type": "Element",
        }
    )

    @dataclass
    class FareFamilyDisplay:
        """
        :ivar modifier_type: "FareFamily" returns the lowest branded
            fares in a fare family. "MaintainBookingCode" attempts to
            return the lowest branded fare in a fare family display
            based on the permitted booking code. Any brand that does not
            have a fare for the permitted booking code will then have
            the lowest fare returned. "LowestFareInBrand" returns the
            lowest fare within each branded fare in a fare family
            display.
        """
        modifier_type: Optional[str] = field(
            default=None,
            metadata={
                "name": "ModifierType",
                "type": "Attribute",
                "required": True,
            }
        )

    @dataclass
    class BasicDetailsOnly:
        return_basic_details: Optional[bool] = field(
            default=None,
            metadata={
                "name": "ReturnBasicDetails",
                "type": "Attribute",
                "required": True,
            }
        )


@dataclass
class Co2Emission:
    """
    Carbon emission values.

    :ivar air_segment_ref: The segment reference
    :ivar value: The CO2 emission value for the air segment
    """
    class Meta:
        name = "CO2Emission"
        namespace = "http://www.travelport.com/schema/air_v52_0"

    air_segment_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "AirSegmentRef",
            "type": "Attribute",
        }
    )
    value: Optional[float] = field(
        default=None,
        metadata={
            "name": "Value",
            "type": "Attribute",
        }
    )


@dataclass
class CarrierCode:
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    value: str = field(
        default="",
        metadata={
            "required": True,
            "length": 2,
        }
    )


@dataclass
class CarrierList:
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    carrier_code: List[str] = field(
        default_factory=list,
        metadata={
            "name": "CarrierCode",
            "type": "Element",
            "min_occurs": 1,
            "max_occurs": 6,
            "length": 2,
        }
    )
    include_carrier: Optional[bool] = field(
        default=None,
        metadata={
            "name": "IncludeCarrier",
            "type": "Attribute",
            "required": True,
        }
    )


@dataclass
class CodeshareInfo:
    """
    Describes the codeshare disclosure (simple text string) or the specific
    operating flight information (as attributes).

    :ivar value:
    :ivar operating_carrier: The actual carrier that is operating the
        flight.
    :ivar operating_flight_number: The actual flight number of the
        carrier that is operating the flight.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    value: str = field(
        default="",
        metadata={
            "required": True,
        }
    )
    operating_carrier: Optional[str] = field(
        default=None,
        metadata={
            "name": "OperatingCarrier",
            "type": "Attribute",
            "length": 2,
        }
    )
    operating_flight_number: Optional[str] = field(
        default=None,
        metadata={
            "name": "OperatingFlightNumber",
            "type": "Attribute",
            "max_length": 5,
        }
    )


@dataclass
class CompanyName:
    """
    Supplier info that is specific to the Unique Id.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    supplier_code: Optional[str] = field(
        default=None,
        metadata={
            "name": "SupplierCode",
            "type": "Attribute",
            "required": True,
            "length": 2,
        }
    )


@dataclass
class ContractCode:
    """
    Some private fares (non-ATPCO) are secured to a contract code.

    :ivar code: The 1-64 character string which uniquely identifies a
        Contract.
    :ivar company_name: Providers supported : ACH
    :ivar provider_code:
    :ivar supplier_code:
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    code: Optional[str] = field(
        default=None,
        metadata={
            "name": "Code",
            "type": "Attribute",
            "required": True,
            "min_length": 1,
            "max_length": 64,
        }
    )
    company_name: Optional[str] = field(
        default=None,
        metadata={
            "name": "CompanyName",
            "type": "Attribute",
        }
    )
    provider_code: Optional[str] = field(
        default=None,
        metadata={
            "name": "ProviderCode",
            "type": "Attribute",
            "min_length": 2,
            "max_length": 5,
        }
    )
    supplier_code: Optional[str] = field(
        default=None,
        metadata={
            "name": "SupplierCode",
            "type": "Attribute",
            "min_length": 1,
            "max_length": 5,
        }
    )


@dataclass
class CreditSummary:
    """
    Credit summary associated with the account.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    currency_code: Optional[str] = field(
        default=None,
        metadata={
            "name": "CurrencyCode",
            "type": "Attribute",
            "length": 3,
        }
    )
    current_balance: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "CurrentBalance",
            "type": "Attribute",
            "required": True,
        }
    )
    initial_credit: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "InitialCredit",
            "type": "Attribute",
            "required": True,
        }
    )


@dataclass
class CustomerReceiptInfo:
    """Information about customer receipt via email.

    Supported providers are 1V/1G/1P

    :ivar booking_traveler_ref: Refererence of the Booking Traveler
        related to the email.
    :ivar email_ref: Reference to the email address used for receipt of
        EMD.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    booking_traveler_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "BookingTravelerRef",
            "type": "Attribute",
            "required": True,
        }
    )
    email_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "EmailRef",
            "type": "Attribute",
            "required": True,
        }
    )


@dataclass
class CustomerSearch:
    """
    Detailed customer information for searching pre pay profiles.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"


class DirectionInfoDirection(Enum):
    TO = "To"
    FROM = "From"


@dataclass
class Document:
    """
    APIS Document Details.

    :ivar sequence: Sequence number for the document.
    :ivar type_value: Type of the Document. Visa, Passport,
        DriverLicense etc.
    :ivar level: Applicability level of the Document. Required,
        Supported, API_Supported or Unknown.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    sequence: Optional[int] = field(
        default=None,
        metadata={
            "name": "Sequence",
            "type": "Attribute",
        }
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "Type",
            "type": "Attribute",
        }
    )
    level: Optional[str] = field(
        default=None,
        metadata={
            "name": "Level",
            "type": "Attribute",
        }
    )


@dataclass
class DocumentModifiers:
    """
    :ivar generate_itinerary_invoice: Generate itinerary/invoice
        documents along with ticket
    :ivar generate_accounting_interface: Generate interface message
        along with ticket
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    generate_itinerary_invoice: bool = field(
        default=False,
        metadata={
            "name": "GenerateItineraryInvoice",
            "type": "Attribute",
        }
    )
    generate_accounting_interface: bool = field(
        default=False,
        metadata={
            "name": "GenerateAccountingInterface",
            "type": "Attribute",
        }
    )


@dataclass
class DocumentOptions:
    """
    Allows an agency to set different document options for the itinerary.

    :ivar passenger_receipt_override:
    :ivar override_option: Allows an agency to override print options
        for documents during document generation.
    :ivar suppress_itinerary_remarks: True when itinerary remarks are
        suppressed.
    :ivar generate_itin_numbers: True when itinerary numbers are system
        generated.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    passenger_receipt_override: Optional[str] = field(
        default=None,
        metadata={
            "name": "PassengerReceiptOverride",
            "type": "Element",
            "min_length": 1,
            "white_space": "collapse",
        }
    )
    override_option: List[str] = field(
        default_factory=list,
        metadata={
            "name": "OverrideOption",
            "type": "Element",
            "max_occurs": 999,
            "max_length": 50,
        }
    )
    suppress_itinerary_remarks: Optional[bool] = field(
        default=None,
        metadata={
            "name": "SuppressItineraryRemarks",
            "type": "Attribute",
        }
    )
    generate_itin_numbers: Optional[bool] = field(
        default=None,
        metadata={
            "name": "GenerateItinNumbers",
            "type": "Attribute",
        }
    )


@dataclass
class DocumentRequired:
    """
    Additional Details, Documents , Project IDs.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    doc_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "DocType",
            "type": "Attribute",
        }
    )
    include_exclude_use_ind: Optional[bool] = field(
        default=None,
        metadata={
            "name": "IncludeExcludeUseInd",
            "type": "Attribute",
        }
    )
    doc_id: Optional[str] = field(
        default=None,
        metadata={
            "name": "DocId",
            "type": "Attribute",
        }
    )
    allowed_ids: Optional[str] = field(
        default=None,
        metadata={
            "name": "AllowedIds",
            "type": "Attribute",
        }
    )


@dataclass
class Emdendorsement:
    """Endorsement for EMD.

    Supported providers are 1V/1G/1P
    """
    class Meta:
        name = "EMDEndorsement"
        namespace = "http://www.travelport.com/schema/air_v52_0"

    value: str = field(
        default="",
        metadata={
            "min_length": 1,
            "max_length": 255,
        }
    )


@dataclass
class EmdtravelerInfo:
    """EMD traveler information.

    Supported providers are 1G/1V/1P

    :ivar name_info: Name information of the EMD traveler.
    :ivar traveler_type: Defines the type of traveler used for booking
        which could be a non-defining type (Companion, Web-fare, etc),
        or a standard type (Adult, Child, etc).
    :ivar age: Age of the traveler
    """
    class Meta:
        name = "EMDTravelerInfo"
        namespace = "http://www.travelport.com/schema/air_v52_0"

    name_info: Optional["EmdtravelerInfo.NameInfo"] = field(
        default=None,
        metadata={
            "name": "NameInfo",
            "type": "Element",
            "required": True,
        }
    )
    traveler_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "TravelerType",
            "type": "Attribute",
            "min_length": 3,
            "max_length": 5,
        }
    )
    age: Optional[int] = field(
        default=None,
        metadata={
            "name": "Age",
            "type": "Attribute",
        }
    )

    @dataclass
    class NameInfo:
        """
        :ivar prefix: Name prefix.
        :ivar first: First Name.
        :ivar middle: Midle name.
        :ivar last: Last Name.
        :ivar suffix: Name suffix.
        """
        prefix: Optional[str] = field(
            default=None,
            metadata={
                "name": "Prefix",
                "type": "Attribute",
                "min_length": 1,
                "max_length": 20,
            }
        )
        first: Optional[str] = field(
            default=None,
            metadata={
                "name": "First",
                "type": "Attribute",
                "required": True,
                "min_length": 1,
                "max_length": 256,
            }
        )
        middle: Optional[str] = field(
            default=None,
            metadata={
                "name": "Middle",
                "type": "Attribute",
                "min_length": 1,
                "max_length": 256,
            }
        )
        last: Optional[str] = field(
            default=None,
            metadata={
                "name": "Last",
                "type": "Attribute",
                "required": True,
                "min_length": 1,
                "max_length": 256,
            }
        )
        suffix: Optional[str] = field(
            default=None,
            metadata={
                "name": "Suffix",
                "type": "Attribute",
                "min_length": 1,
                "max_length": 256,
            }
        )


class EmdAvailabilityChargeIndicator(Enum):
    X = "X"
    E = "E"
    F = "F"
    G = "G"
    H = "H"


class EmdRefundReissueIndicator(Enum):
    REFUNDABLE = "Refundable"
    NON_REFUNDABLE = "NonRefundable"
    REUSE = "Reuse"


@dataclass
class Embargo:
    """Embargo details.

    Provider: 1G, 1V, 1P

    :ivar key:
    :ivar carrier:
    :ivar segment_ref:
    :ivar name: The commercial name of the optional service on which the
        embargo applies. Provider: 1G, 1V, 1P
    :ivar text: Brief description of the embargo. Provider: 1G, 1V, 1P
    :ivar secondary_type: The secondary type of the optional service on
        which the embargo applies.  Provider: 1G, 1V, 1P
    :ivar type_value: The type of optional service on which the embargo
        applies.  Provider: 1G, 1V, 1P
    :ivar url: Website of the operating carrier. Provider: 1G, 1V, 1P
    :ivar service_sub_code: The service sub code of the optional service
        on which the embargo applies.  Provider: 1G, 1V, 1P
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    key: Optional[str] = field(
        default=None,
        metadata={
            "name": "Key",
            "type": "Attribute",
        }
    )
    carrier: Optional[str] = field(
        default=None,
        metadata={
            "name": "Carrier",
            "type": "Attribute",
            "length": 2,
        }
    )
    segment_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "SegmentRef",
            "type": "Attribute",
        }
    )
    name: Optional[str] = field(
        default=None,
        metadata={
            "name": "Name",
            "type": "Attribute",
            "max_length": 30,
        }
    )
    text: Optional[str] = field(
        default=None,
        metadata={
            "name": "Text",
            "type": "Attribute",
        }
    )
    secondary_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "SecondaryType",
            "type": "Attribute",
        }
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "Type",
            "type": "Attribute",
            "min_length": 1,
            "max_length": 128,
        }
    )
    url: Optional[str] = field(
        default=None,
        metadata={
            "name": "Url",
            "type": "Attribute",
        }
    )
    service_sub_code: Optional[str] = field(
        default=None,
        metadata={
            "name": "ServiceSubCode",
            "type": "Attribute",
            "max_length": 3,
        }
    )


@dataclass
class ExchangedTicketInfo:
    """
    Contains Exchanged/Reissued Ticket Information.

    :ivar number: Original Ticket that was Exchange/Reissued
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    number: Optional[str] = field(
        default=None,
        metadata={
            "name": "Number",
            "type": "Attribute",
            "required": True,
            "length": 13,
        }
    )


@dataclass
class ExemptObfee:
    """
    Used to specify which OB fees are exempt; if none are listed, it means all
    should be exempt.
    """
    class Meta:
        name = "ExemptOBFee"
        namespace = "http://www.travelport.com/schema/air_v52_0"

    sub_code: List[str] = field(
        default_factory=list,
        metadata={
            "name": "SubCode",
            "type": "Element",
            "max_occurs": 8,
        }
    )


@dataclass
class ExemptTaxes:
    """
    Request tax exemption for specific tax category and/or all taxes of a specific
    country.

    :ivar country_code: Specify ISO country code for which tax exemption
        is requested.
    :ivar tax_category: Specify tax category for which tax exemption is
        requested.
    :ivar all_taxes: Request exemption of all taxes.
    :ivar tax_territory: exemption is achieved by sending in the
        TaxTerritory in the tax exempt price request.
    :ivar company_name: The federal government body name must be
        provided in this element. This field is required by AC
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    country_code: List[str] = field(
        default_factory=list,
        metadata={
            "name": "CountryCode",
            "type": "Element",
            "max_occurs": 999,
            "length": 2,
        }
    )
    tax_category: List[str] = field(
        default_factory=list,
        metadata={
            "name": "TaxCategory",
            "type": "Element",
            "max_occurs": 999,
        }
    )
    all_taxes: Optional[bool] = field(
        default=None,
        metadata={
            "name": "AllTaxes",
            "type": "Attribute",
        }
    )
    tax_territory: Optional[str] = field(
        default=None,
        metadata={
            "name": "TaxTerritory",
            "type": "Attribute",
            "length": 2,
        }
    )
    company_name: Optional[str] = field(
        default=None,
        metadata={
            "name": "CompanyName",
            "type": "Attribute",
            "min_length": 1,
            "max_length": 24,
        }
    )


@dataclass
class FareBasis:
    """
    Fare Basis Code.

    :ivar code: The fare basis code for this fare
    :ivar segment_ref: The segment to which this FareBasis Code is to
        connected
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    code: Optional[str] = field(
        default=None,
        metadata={
            "name": "Code",
            "type": "Attribute",
            "required": True,
        }
    )
    segment_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "SegmentRef",
            "type": "Attribute",
        }
    )


@dataclass
class FareCalc:
    """
    The complete fare calculation line.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    value: str = field(
        default="",
        metadata={
            "required": True,
        }
    )


@dataclass
class FareDetailsRef:
    """
    Reference of the Fare.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    key: Optional[str] = field(
        default=None,
        metadata={
            "name": "Key",
            "type": "Attribute",
            "required": True,
        }
    )


@dataclass
class FareInfoMessage:
    """
    A simple textual fare information message.Providers supported : 1G/1V/1P.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    value: str = field(
        default="",
        metadata={
            "required": True,
        }
    )
    key: Optional[str] = field(
        default=None,
        metadata={
            "name": "Key",
            "type": "Attribute",
            "required": True,
        }
    )


@dataclass
class FareInfoRef:
    """
    Reference to a complete FareInfo from a shared list.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    key: Optional[str] = field(
        default=None,
        metadata={
            "name": "Key",
            "type": "Attribute",
            "required": True,
        }
    )


@dataclass
class FareMileageInformation:
    """
    Contains Fare/Tariff Display Mileage Information.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    value: str = field(
        default="",
        metadata={
            "required": True,
        }
    )


@dataclass
class FareNoteRef:
    """A reference to a fare note from a shared list.

    Used to minimize xml results.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    key: Optional[str] = field(
        default=None,
        metadata={
            "name": "Key",
            "type": "Attribute",
            "required": True,
        }
    )


@dataclass
class FarePricing:
    """Container for Fare Pricing Information.

    One per PTC type.

    :ivar passenger_type:
    :ivar total_fare_amount:
    :ivar private_fare: NegotiatedFare attribute from earlier version of
        schema used to imply whether the fare is private fare or not.
        So, this attribute is renamed to PrivateFare as it best suited.
    :ivar negotiated_fare: Identifies the fare as a Negotiated Fare.
    :ivar auto_priceable: Identifies the fare as Autopriceable or not.
        False value means the fare filing is incomplete and the fare
        should not be used.
    :ivar total_net_fare_amount: Total Net fare amount.
    :ivar base_fare: Base fare amount.
    :ivar taxes:
    :ivar mmid: Contains the Reference id which is generated when the
        request was ReturnMM=”true”.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    passenger_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "PassengerType",
            "type": "Attribute",
            "min_length": 3,
            "max_length": 5,
        }
    )
    total_fare_amount: Optional[str] = field(
        default=None,
        metadata={
            "name": "TotalFareAmount",
            "type": "Attribute",
        }
    )
    private_fare: Optional[bool] = field(
        default=None,
        metadata={
            "name": "PrivateFare",
            "type": "Attribute",
        }
    )
    negotiated_fare: Optional[bool] = field(
        default=None,
        metadata={
            "name": "NegotiatedFare",
            "type": "Attribute",
        }
    )
    auto_priceable: Optional[bool] = field(
        default=None,
        metadata={
            "name": "AutoPriceable",
            "type": "Attribute",
        }
    )
    total_net_fare_amount: Optional[str] = field(
        default=None,
        metadata={
            "name": "TotalNetFareAmount",
            "type": "Attribute",
        }
    )
    base_fare: Optional[str] = field(
        default=None,
        metadata={
            "name": "BaseFare",
            "type": "Attribute",
        }
    )
    taxes: Optional[str] = field(
        default=None,
        metadata={
            "name": "Taxes",
            "type": "Attribute",
        }
    )
    mmid: Optional[str] = field(
        default=None,
        metadata={
            "name": "MMid",
            "type": "Attribute",
        }
    )


@dataclass
class FareRemarkRef:
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    key: Optional[str] = field(
        default=None,
        metadata={
            "name": "Key",
            "type": "Attribute",
            "required": True,
        }
    )


class FareRestrictionDateEndDateIndicator(Enum):
    COMMENCE = "Commence"
    COMPLETE = "Complete"


@dataclass
class FareRestrictionSaleDate:
    """
    Restrict when this fare can be sold.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    start_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "StartDate",
            "type": "Attribute",
        }
    )
    end_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "EndDate",
            "type": "Attribute",
        }
    )


@dataclass
class FareRestrictionSeasonal:
    """Fares Restricted based on the season requested.

    StartDate and EndDate are strings representing respective dates. If
    a year component is present then it signifies an exact date. If only
    day and month components are present then it signifies a seasonal
    date, which means applicable for that date in any year
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    comment: Optional[str] = field(
        default=None,
        metadata={
            "name": "Comment",
            "type": "Attribute",
        }
    )
    variation_by_travel_dates: Optional[str] = field(
        default=None,
        metadata={
            "name": "VariationByTravelDates",
            "type": "Attribute",
        }
    )
    seasonal_range1_ind: Optional[str] = field(
        default=None,
        metadata={
            "name": "SeasonalRange1Ind",
            "type": "Attribute",
        }
    )
    seasonal_range1_start_date: Optional[str] = field(
        default=None,
        metadata={
            "name": "SeasonalRange1StartDate",
            "type": "Attribute",
        }
    )
    seasonal_range1_end_date: Optional[str] = field(
        default=None,
        metadata={
            "name": "SeasonalRange1EndDate",
            "type": "Attribute",
        }
    )
    seasonal_range2_ind: Optional[str] = field(
        default=None,
        metadata={
            "name": "SeasonalRange2Ind",
            "type": "Attribute",
        }
    )
    seasonal_range2_start_date: Optional[str] = field(
        default=None,
        metadata={
            "name": "SeasonalRange2StartDate",
            "type": "Attribute",
        }
    )
    seasonal_range2_end_date: Optional[str] = field(
        default=None,
        metadata={
            "name": "SeasonalRange2EndDate",
            "type": "Attribute",
        }
    )


@dataclass
class FareRoutingInformation:
    """
    Contains Fare/Tariff Display Routing Information.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    value: str = field(
        default="",
        metadata={
            "required": True,
        }
    )


@dataclass
class FareRuleCategory:
    """
    Rule Categories to filter on.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    category: Optional[int] = field(
        default=None,
        metadata={
            "name": "Category",
            "type": "Attribute",
            "required": True,
            "min_inclusive": 1,
            "max_inclusive": 50,
        }
    )


@dataclass
class FareRuleFailureInfo:
    """
    Returns fare rule failure reason codes when fare basis code is forced.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    reason: List[str] = field(
        default_factory=list,
        metadata={
            "name": "Reason",
            "type": "Element",
            "min_occurs": 1,
            "max_occurs": 999,
        }
    )


@dataclass
class FareRuleKey:
    """The Fare Rule requested using a Key.

    The key is typically a provider specific string which is required to
    make a following Air Fare Rule Request. This Key is returned in Low
    Fare Shop or Air Price Response

    :ivar value:
    :ivar fare_info_ref: The Fare Component to which this Rule Key
        applies
    :ivar provider_code:
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    value: str = field(
        default="",
        metadata={
            "required": True,
            "min_length": 1,
            "white_space": "collapse",
        }
    )
    fare_info_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "FareInfoRef",
            "type": "Attribute",
            "required": True,
        }
    )
    provider_code: Optional[str] = field(
        default=None,
        metadata={
            "name": "ProviderCode",
            "type": "Attribute",
            "required": True,
            "min_length": 2,
            "max_length": 5,
        }
    )


@dataclass
class FareRuleLong:
    """
    Long Text Fare Rule.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    value: str = field(
        default="",
        metadata={
            "required": True,
        }
    )
    category: Optional[int] = field(
        default=None,
        metadata={
            "name": "Category",
            "type": "Attribute",
            "required": True,
        }
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "Type",
            "type": "Attribute",
        }
    )


@dataclass
class FareRuleLongRef:
    """
    A reference to an Long Text Rule in a Shared List.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    key: Optional[str] = field(
        default=None,
        metadata={
            "name": "Key",
            "type": "Attribute",
            "required": True,
        }
    )


@dataclass
class FareRuleNameValue:
    """
    Fare Rule Name Value Pair, used in Short Rules.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    name: Optional[str] = field(
        default=None,
        metadata={
            "name": "Name",
            "type": "Attribute",
            "required": True,
        }
    )
    value: Optional[str] = field(
        default=None,
        metadata={
            "name": "Value",
            "type": "Attribute",
            "required": True,
        }
    )


@dataclass
class FareRuleShortRef:
    """
    A reference to an Short Text Rule in a Shared List.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    key: Optional[str] = field(
        default=None,
        metadata={
            "name": "Key",
            "type": "Attribute",
            "required": True,
        }
    )


@dataclass
class FareRulesFilterCategory:
    """Fare Rules Filter if requested will return rules for requested category in
    the response.

    Applicable for providers 1G,1V,1P.

    :ivar category_code: Fare Rules Filter category can be requested.
        Currently only '˜MIN, MAX, ADV, CHG, OTH' is supported.
        Applicable for Providers 1G,1V,1P.
    :ivar fare_info_ref: This tells if Low Fare Finder was used.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    category_code: List[str] = field(
        default_factory=list,
        metadata={
            "name": "CategoryCode",
            "type": "Element",
            "min_occurs": 1,
            "max_occurs": 35,
        }
    )
    fare_info_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "FareInfoRef",
            "type": "Attribute",
        }
    )


@dataclass
class FareStatusFailureInfo:
    """
    Denotes the failure reason of a particular fare.

    :ivar code: The failure code of the fare.
    :ivar reason: The reason for the failure.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    code: Optional[str] = field(
        default=None,
        metadata={
            "name": "Code",
            "type": "Attribute",
            "required": True,
        }
    )
    reason: Optional[str] = field(
        default=None,
        metadata={
            "name": "Reason",
            "type": "Attribute",
        }
    )


@dataclass
class FareTicketDesignator:
    """
    Ticket Designator used to further qualify a Fare.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    value: Optional[str] = field(
        default=None,
        metadata={
            "name": "Value",
            "type": "Attribute",
            "min_length": 0,
            "max_length": 20,
        }
    )


@dataclass
class FareType:
    """
    Used to request fares based on the ATPCO type code.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    code: Optional[str] = field(
        default=None,
        metadata={
            "name": "Code",
            "type": "Attribute",
            "required": True,
            "min_length": 1,
            "max_length": 5,
        }
    )


@dataclass
class FeeApplication:
    """
    :ivar value:
    :ivar code: The code associated to the fee application. The  choices
        are: 1, 2, 3, 4, 5, K, F
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    value: str = field(
        default="",
        metadata={
            "required": True,
        }
    )
    code: Optional[str] = field(
        default=None,
        metadata={
            "name": "Code",
            "type": "Attribute",
            "length": 1,
        }
    )


class FlexExploreModifiersType(Enum):
    ANY_WHERE = "AnyWhere"
    AREA = "Area"
    ZONE = "Zone"
    COUNTRY = "Country"
    STATE = "State"
    DISTANCE_IN_MILES = "DistanceInMiles"
    DISTANCE_IN_KILOMETERS = "DistanceInKilometers"
    DESTINATION = "Destination"
    GROUP = "Group"


@dataclass
class FlightDetailsRef:
    """
    Reference to a complete FlightDetails from a shared list.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    key: Optional[str] = field(
        default=None,
        metadata={
            "name": "Key",
            "type": "Attribute",
            "required": True,
        }
    )


@dataclass
class FlightInfoCriteria:
    """
    :ivar key: An identifier to link the flightinfo responses to the
        criteria. The value passed here will be returned in the
        resulting flightinfo(s) from this command.
    :ivar carrier: The carrier that is marketing this segment
    :ivar flight_number: The flight number under which the marketing
        carrier is marketing this flight
    :ivar origin: The IATA location code for this origination of this
        entity.
    :ivar destination: The IATA location code for this destination of
        this entity.
    :ivar departure_date: The date at which this entity departs. This
        does not include time zone information since it can be derived
        from the origin location.
    :ivar class_of_service:
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    key: Optional[str] = field(
        default=None,
        metadata={
            "name": "Key",
            "type": "Attribute",
            "required": True,
        }
    )
    carrier: Optional[str] = field(
        default=None,
        metadata={
            "name": "Carrier",
            "type": "Attribute",
            "required": True,
            "length": 2,
        }
    )
    flight_number: Optional[str] = field(
        default=None,
        metadata={
            "name": "FlightNumber",
            "type": "Attribute",
            "required": True,
            "max_length": 5,
        }
    )
    origin: Optional[str] = field(
        default=None,
        metadata={
            "name": "Origin",
            "type": "Attribute",
            "length": 3,
            "white_space": "collapse",
        }
    )
    destination: Optional[str] = field(
        default=None,
        metadata={
            "name": "Destination",
            "type": "Attribute",
            "length": 3,
            "white_space": "collapse",
        }
    )
    departure_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "DepartureDate",
            "type": "Attribute",
            "required": True,
        }
    )
    class_of_service: Optional[str] = field(
        default=None,
        metadata={
            "name": "ClassOfService",
            "type": "Attribute",
            "min_length": 1,
            "max_length": 2,
        }
    )


@dataclass
class FlightType:
    """
    Modifier to request flight type options example non-stop only, non-stop and
    direct only, include single online connection etc.

    :ivar require_single_carrier:
    :ivar max_connections: The maximum number of connections within a
        segment group.
    :ivar max_stops: The maximum number of stops within a connection.
    :ivar non_stop_directs:
    :ivar stop_directs:
    :ivar single_online_con:
    :ivar double_online_con:
    :ivar triple_online_con:
    :ivar single_interline_con:
    :ivar double_interline_con:
    :ivar triple_interline_con:
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    require_single_carrier: bool = field(
        default=False,
        metadata={
            "name": "RequireSingleCarrier",
            "type": "Attribute",
        }
    )
    max_connections: int = field(
        default=-1,
        metadata={
            "name": "MaxConnections",
            "type": "Attribute",
            "min_inclusive": -1,
            "max_inclusive": 3,
        }
    )
    max_stops: int = field(
        default=-1,
        metadata={
            "name": "MaxStops",
            "type": "Attribute",
            "min_inclusive": -1,
            "max_inclusive": 3,
        }
    )
    non_stop_directs: Optional[bool] = field(
        default=None,
        metadata={
            "name": "NonStopDirects",
            "type": "Attribute",
        }
    )
    stop_directs: Optional[bool] = field(
        default=None,
        metadata={
            "name": "StopDirects",
            "type": "Attribute",
        }
    )
    single_online_con: Optional[bool] = field(
        default=None,
        metadata={
            "name": "SingleOnlineCon",
            "type": "Attribute",
        }
    )
    double_online_con: Optional[bool] = field(
        default=None,
        metadata={
            "name": "DoubleOnlineCon",
            "type": "Attribute",
        }
    )
    triple_online_con: Optional[bool] = field(
        default=None,
        metadata={
            "name": "TripleOnlineCon",
            "type": "Attribute",
        }
    )
    single_interline_con: Optional[bool] = field(
        default=None,
        metadata={
            "name": "SingleInterlineCon",
            "type": "Attribute",
        }
    )
    double_interline_con: Optional[bool] = field(
        default=None,
        metadata={
            "name": "DoubleInterlineCon",
            "type": "Attribute",
        }
    )
    triple_interline_con: Optional[bool] = field(
        default=None,
        metadata={
            "name": "TripleInterlineCon",
            "type": "Attribute",
        }
    )


@dataclass
class GroupedOption:
    """
    :ivar optional_service_ref: Reference to a optionalService which is
        paired with other optional services in the parent PairedOptions
        element.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    optional_service_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "OptionalServiceRef",
            "type": "Attribute",
            "required": True,
        }
    )


@dataclass
class HostReservation:
    """
    Defines a reservation that already exists in the host system (e.g an agent
    using Galileo Desktop already booked a reservation on Midwest in Sabre host
    system).

    :ivar carrier: The carrier code (e.g. YX, UA, ...) that is providing
        the merchandising
    :ivar carrier_locator_code: The locator code in the supplier system
        (also could be defined as locator in the carrier host system).
    :ivar provider_code: Contains the GDS or other provider code of the
        entity actually housing the reservation. This is optional when
        used on Merchandising Availability but required on
        MerchandisingFulfillment.
    :ivar provider_locator_code: Contains the locator of the reservation
        actually housed in the provider.
    :ivar universal_locator_code: The locator of the Universal Record,
        if one exists.
    :ivar eticket: An flag to indicate if ticket has been issued for the
        PNR.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    carrier: Optional[str] = field(
        default=None,
        metadata={
            "name": "Carrier",
            "type": "Attribute",
            "required": True,
            "length": 2,
        }
    )
    carrier_locator_code: Optional[str] = field(
        default=None,
        metadata={
            "name": "CarrierLocatorCode",
            "type": "Attribute",
            "required": True,
            "min_length": 5,
            "max_length": 8,
        }
    )
    provider_code: Optional[str] = field(
        default=None,
        metadata={
            "name": "ProviderCode",
            "type": "Attribute",
            "required": True,
            "min_length": 2,
            "max_length": 5,
        }
    )
    provider_locator_code: Optional[str] = field(
        default=None,
        metadata={
            "name": "ProviderLocatorCode",
            "type": "Attribute",
            "required": True,
            "max_length": 15,
        }
    )
    universal_locator_code: Optional[str] = field(
        default=None,
        metadata={
            "name": "UniversalLocatorCode",
            "type": "Attribute",
            "min_length": 5,
            "max_length": 8,
        }
    )
    eticket: bool = field(
        default=False,
        metadata={
            "name": "ETicket",
            "type": "Attribute",
        }
    )


@dataclass
class ImageLocation:
    """
    :ivar value:
    :ivar type_value: Type of Image Location. E.g., "Agent", "Consumer".
    :ivar image_width: The width of the image
    :ivar image_height: The height of the image
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    value: str = field(
        default="",
        metadata={
            "required": True,
        }
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "Type",
            "type": "Attribute",
            "required": True,
        }
    )
    image_width: Optional[int] = field(
        default=None,
        metadata={
            "name": "ImageWidth",
            "type": "Attribute",
            "required": True,
        }
    )
    image_height: Optional[int] = field(
        default=None,
        metadata={
            "name": "ImageHeight",
            "type": "Attribute",
            "required": True,
        }
    )


@dataclass
class InFlightServices:
    """Available InFlight Services.

    They are: 'Movie', 'Telephone', 'Telex', 'AudioProgramming', 'Television' ,'ResvBookingService' ,'DutyFreeSales' ,'Smoking' ,'NonSmoking' ,'ShortFeatureVideo' ,'NoDutyFree' ,'InSeatPowerSource' ,'InternetAccess' ,'Email' ,'Library' ,'LieFlatSeat' ,'Additional service(s) exists' ,'WiFi' ,'Lie-Flat seat first' ,'Lie-Flat seat business' ,'Lie-Flat seat premium economy' ,'Amenities subject to change' etc.. These follow the IATA standard. Please see the IATA standards for a more complete list.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    value: str = field(
        default="",
        metadata={
            "required": True,
        }
    )


@dataclass
class LanguageOption:
    """
    Enables itineraries and invoices to print in different languages.

    :ivar language: 2 Letter ISO Language code
    :ivar country: 2 Letter ISO Country code
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    language: Optional[str] = field(
        default=None,
        metadata={
            "name": "Language",
            "type": "Attribute",
            "required": True,
            "length": 2,
        }
    )
    country: Optional[str] = field(
        default=None,
        metadata={
            "name": "Country",
            "type": "Attribute",
            "required": True,
            "length": 2,
        }
    )


@dataclass
class LegDetail:
    """
    Information about the journey Leg, Shared by Leg and LegPrice Elements.

    :ivar key:
    :ivar origin_airport: Returns the origin airport code for the Leg
        Detail.
    :ivar destination_airport: Returns the destination airport code for
        the Leg Detail.
    :ivar carrier: Carrier for the Search Leg Detail.
    :ivar travel_date: The Departure date and time for this Leg Detail.
    :ivar flight_number: Flight Number for the Search Leg Detail.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    key: Optional[str] = field(
        default=None,
        metadata={
            "name": "Key",
            "type": "Attribute",
            "required": True,
        }
    )
    origin_airport: Optional[str] = field(
        default=None,
        metadata={
            "name": "OriginAirport",
            "type": "Attribute",
            "required": True,
            "length": 3,
            "white_space": "collapse",
        }
    )
    destination_airport: Optional[str] = field(
        default=None,
        metadata={
            "name": "DestinationAirport",
            "type": "Attribute",
            "required": True,
            "length": 3,
            "white_space": "collapse",
        }
    )
    carrier: Optional[str] = field(
        default=None,
        metadata={
            "name": "Carrier",
            "type": "Attribute",
            "required": True,
            "length": 2,
        }
    )
    travel_date: Optional[str] = field(
        default=None,
        metadata={
            "name": "TravelDate",
            "type": "Attribute",
        }
    )
    flight_number: Optional[str] = field(
        default=None,
        metadata={
            "name": "FlightNumber",
            "type": "Attribute",
            "max_length": 5,
        }
    )


@dataclass
class LegRef:
    """
    Reference to a Leg.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    key: Optional[str] = field(
        default=None,
        metadata={
            "name": "Key",
            "type": "Attribute",
            "required": True,
        }
    )


@dataclass
class LoyaltyCardDetails:
    """
    Passenger Loyalty card details.

    :ivar supplier_code: Carrier Code
    :ivar priority_code:
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    supplier_code: Optional[str] = field(
        default=None,
        metadata={
            "name": "SupplierCode",
            "type": "Attribute",
            "required": True,
            "length": 2,
        }
    )
    priority_code: Optional[str] = field(
        default=None,
        metadata={
            "name": "PriorityCode",
            "type": "Attribute",
            "required": True,
            "pattern": r"[a-zA-Z0-9]{1,1}",
        }
    )


@dataclass
class Maxtype:
    """
    :ivar hours_max: Maximum hours. True if unit of time is hours. False
        if unit of time is not hours.
    :ivar days_max: Maximum days. True if unit of time is days. False if
        unit of time is not days.
    :ivar months_max: Maximum months. True if unit of time is months.
        False if unit of time is not months.
    :ivar occur_ind_max: Maximum cccurance indicator. True if day of the
        week is used. False if day of the week is not used.
    :ivar same_day_max: Same day maximum. True if Stay is same day.
        False if Stay is not same day.
    :ivar start_ind_max: Start indicator. True if start indicator. False
        if not a start indicator.
    :ivar completion_ind: Completion indicator. True if Completion C
        Indicator. False if not Completion C Indicator.
    :ivar tm_dowmax: If a max unit of time is true then number
        corrolates to day of the week starting with 1 for Sunday.
    :ivar num_occur_max: Number of maximum occurances.
    """
    class Meta:
        name = "MAXType"
        target_namespace = "http://www.travelport.com/schema/air_v52_0"

    hours_max: Optional[bool] = field(
        default=None,
        metadata={
            "name": "HoursMax",
            "type": "Attribute",
        }
    )
    days_max: Optional[bool] = field(
        default=None,
        metadata={
            "name": "DaysMax",
            "type": "Attribute",
        }
    )
    months_max: Optional[bool] = field(
        default=None,
        metadata={
            "name": "MonthsMax",
            "type": "Attribute",
        }
    )
    occur_ind_max: Optional[bool] = field(
        default=None,
        metadata={
            "name": "OccurIndMax",
            "type": "Attribute",
        }
    )
    same_day_max: Optional[bool] = field(
        default=None,
        metadata={
            "name": "SameDayMax",
            "type": "Attribute",
        }
    )
    start_ind_max: Optional[bool] = field(
        default=None,
        metadata={
            "name": "StartIndMax",
            "type": "Attribute",
        }
    )
    completion_ind: Optional[bool] = field(
        default=None,
        metadata={
            "name": "CompletionInd",
            "type": "Attribute",
        }
    )
    tm_dowmax: Optional[int] = field(
        default=None,
        metadata={
            "name": "TmDOWMax",
            "type": "Attribute",
        }
    )
    num_occur_max: Optional[int] = field(
        default=None,
        metadata={
            "name": "NumOccurMax",
            "type": "Attribute",
        }
    )


@dataclass
class Mintype:
    """
    :ivar hours_min: Minimum hours. True if unit of time is hours.
        False if unit of time is not hours.
    :ivar days_min: Minimum days. True if unit of time is days. False if
        unit of time is not days.
    :ivar months_min: Minimum months. True if unit of time is months.
        False if unit of time is not months.
    :ivar occur_ind_min: Minimum occurance indicator. True if day of the
        week is used. False if day of the week is not used.
    :ivar same_day_min: Same day minimum. True if Stay is same day.
        False if Stay is not same day.
    :ivar tm_dowmin: If a min unit of time is true then number
        corrolates to day of the week starting with 1 for Sunday.
    :ivar fare_component: Fare component number of the most restrictive
        fare.
    :ivar num_occur_min: Number of min occurances. This field is used in
        conjunction with the Day of Week.
    """
    class Meta:
        name = "MINType"
        target_namespace = "http://www.travelport.com/schema/air_v52_0"

    hours_min: Optional[bool] = field(
        default=None,
        metadata={
            "name": "HoursMin",
            "type": "Attribute",
        }
    )
    days_min: Optional[bool] = field(
        default=None,
        metadata={
            "name": "DaysMin",
            "type": "Attribute",
        }
    )
    months_min: Optional[bool] = field(
        default=None,
        metadata={
            "name": "MonthsMin",
            "type": "Attribute",
        }
    )
    occur_ind_min: Optional[bool] = field(
        default=None,
        metadata={
            "name": "OccurIndMin",
            "type": "Attribute",
        }
    )
    same_day_min: Optional[bool] = field(
        default=None,
        metadata={
            "name": "SameDayMin",
            "type": "Attribute",
        }
    )
    tm_dowmin: Optional[int] = field(
        default=None,
        metadata={
            "name": "TmDOWMin",
            "type": "Attribute",
        }
    )
    fare_component: Optional[int] = field(
        default=None,
        metadata={
            "name": "FareComponent",
            "type": "Attribute",
        }
    )
    num_occur_min: Optional[int] = field(
        default=None,
        metadata={
            "name": "NumOccurMin",
            "type": "Attribute",
        }
    )


@dataclass
class MaxLayoverDurationType:
    """User can specify its attribute's value in Minutes.

    Maximum size of each attribute is 4.

    :ivar domestic: It will be applied for all Domestic-to-Domestic
        connections.
    :ivar gateway: It will be applied for all Domestic to International
        and International to Domestic connections.
    :ivar international: It will be applied for all International-to-
        International connections.
    """
    class Meta:
        target_namespace = "http://www.travelport.com/schema/air_v52_0"

    domestic: Optional[int] = field(
        default=None,
        metadata={
            "name": "Domestic",
            "type": "Attribute",
            "min_inclusive": 0,
            "max_inclusive": 9999,
        }
    )
    gateway: Optional[int] = field(
        default=None,
        metadata={
            "name": "Gateway",
            "type": "Attribute",
            "min_inclusive": 0,
            "max_inclusive": 9999,
        }
    )
    international: Optional[int] = field(
        default=None,
        metadata={
            "name": "International",
            "type": "Attribute",
            "min_inclusive": 0,
            "max_inclusive": 9999,
        }
    )


@dataclass
class MultiGdssearchIndicator:
    """
    Indicates whether public fares and/or private fares should be returned.

    :ivar type_value: Indicates whether only public fares or both public
        and private fares should be returned or a specific type of
        private fares. Examples of valid values are PublicFaresOnly,
        PrivateFaresOnly, AirlinePrivateFaresOnly,
        AgencyPrivateFaresOnly, PublicandPrivateFares, and NetFaresOnly.
    :ivar provider_code:
    :ivar default_provider: Use the value “true” if the provider is the
        default (primary) provider.  Use the value “false” if the
        provider is the alternate (secondary).  Use of this attribute
        requires specifically provisioned credentials.
    :ivar private_fare_code: The code of the corporate private fare.
        This is the same as an account code.  Use of this attribute
        requires specifically provisioned credentials.
    :ivar private_fare_code_only: :  Indicates whether or not the
        private fares returned should be restricted to only those
        specific to the PrivateFareCode in the previous attribute.  This
        has the same validation as the AccountCodeFaresOnly attribute.
        Use of this attribute requires specifically provisioned
        credentials.
    """
    class Meta:
        name = "MultiGDSSearchIndicator"
        namespace = "http://www.travelport.com/schema/air_v52_0"

    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "Type",
            "type": "Attribute",
        }
    )
    provider_code: Optional[str] = field(
        default=None,
        metadata={
            "name": "ProviderCode",
            "type": "Attribute",
            "min_length": 2,
            "max_length": 5,
        }
    )
    default_provider: Optional[bool] = field(
        default=None,
        metadata={
            "name": "DefaultProvider",
            "type": "Attribute",
        }
    )
    private_fare_code: Optional[str] = field(
        default=None,
        metadata={
            "name": "PrivateFareCode",
            "type": "Attribute",
        }
    )
    private_fare_code_only: Optional[bool] = field(
        default=None,
        metadata={
            "name": "PrivateFareCodeOnly",
            "type": "Attribute",
        }
    )


@dataclass
class Othtype:
    """
    :ivar cat0: Category 0 rules. True if category applies.  False if
        rules do not apply.
    :ivar cat1: Category 1 rules. True if category applies.  False if
        rules do not apply.
    :ivar cat2: Category 2 rules. True if category applies.  False if
        rules do not apply.
    :ivar cat3: Category 3 rules. True if category applies.  False if
        rules do not apply.
    :ivar cat4: Category 4 rules. True if category applies.  False if
        rules do not apply.
    :ivar cat5: Category 5 rules. True if category applies.  False if
        rules do not apply.
    :ivar cat6: Category 6 rules. True if category applies.  False if
        rules do not apply.
    :ivar cat7: Category 7 rules. True if category applies.  False if
        rules do not apply.
    :ivar cat8: Category 8 rules. True if category applies.  False if
        rules do not apply.
    :ivar cat9: Category 9 rules. True if category applies.  False if
        rules do not apply.
    :ivar cat10: Category 10 rules. True if category applies.  False if
        rules do not apply.
    :ivar cat11: Category 11 rules. True if category applies.  False if
        rules do not apply.
    :ivar cat12: Category 12 rules. True if category applies.  False if
        rules do not apply.
    :ivar cat13: Category 13 rules. True if category applies.  False if
        rules do not apply.
    :ivar cat14: Category 14 rules. True if category applies.  False if
        rules do not apply.
    :ivar cat15: Category 15 rules. True if category applies.  False if
        rules do not apply.
    :ivar cat16: Category 16 rules. True if category applies.  False if
        rules do not apply.
    :ivar cat17: Category 17 rules. True if category applies.  False if
        rules do not apply.
    :ivar cat18: Category 18 rules. True if category applies.  False if
        rules do not apply.
    :ivar cat19: Category 19 rules. True if category applies.  False if
        rules do not apply.
    :ivar cat20: Category 20 rules. True if category applies.  False if
        rules do not apply.
    :ivar cat21: Category 21 rules. True if category applies.  False if
        rules do not apply.
    :ivar cat22: Category 22 rules. True if category applies.  False if
        rules do not apply.
    :ivar cat23: Category 23 rules. True if category applies.  False if
        rules do not apply.
    :ivar cat24: Category 24 rules. True if category applies.  False if
        rules do not apply.
    :ivar cat25: Category 25 rules. True if category applies.  False if
        rules do not apply.
    :ivar cat26: Category 26 rules. True if category applies.  False if
        rules do not apply.
    :ivar cat27: Category 27 rules. True if category applies.  False if
        rules do not apply.
    :ivar cat28: Category 28 rules. True if category applies.  False if
        rules do not apply.
    :ivar cat29: Category 29 rules. True if category applies.  False if
        rules do not apply.
    :ivar cat30: Category 30 rules. True if category applies.  False if
        rules do not apply.
    :ivar cat31: Category 31 rules. True if category applies.  False if
        rules do not apply.
    :ivar restrictive_dt: Most restrictive ticketing date.
    :ivar surcharge_amt: Surcharge amount
    :ivar not_usacity: Not USA city.  True if Origin or final
        destination not a continental U.S. City. False if Origin or
        final destination a continental U.S. City.
    :ivar missing_rules: Missing rules.  True if rules are missing.
        False if rules are not missing.
    """
    class Meta:
        name = "OTHType"
        target_namespace = "http://www.travelport.com/schema/air_v52_0"

    cat0: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Cat0",
            "type": "Attribute",
        }
    )
    cat1: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Cat1",
            "type": "Attribute",
        }
    )
    cat2: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Cat2",
            "type": "Attribute",
        }
    )
    cat3: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Cat3",
            "type": "Attribute",
        }
    )
    cat4: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Cat4",
            "type": "Attribute",
        }
    )
    cat5: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Cat5",
            "type": "Attribute",
        }
    )
    cat6: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Cat6",
            "type": "Attribute",
        }
    )
    cat7: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Cat7",
            "type": "Attribute",
        }
    )
    cat8: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Cat8",
            "type": "Attribute",
        }
    )
    cat9: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Cat9",
            "type": "Attribute",
        }
    )
    cat10: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Cat10",
            "type": "Attribute",
        }
    )
    cat11: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Cat11",
            "type": "Attribute",
        }
    )
    cat12: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Cat12",
            "type": "Attribute",
        }
    )
    cat13: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Cat13",
            "type": "Attribute",
        }
    )
    cat14: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Cat14",
            "type": "Attribute",
        }
    )
    cat15: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Cat15",
            "type": "Attribute",
        }
    )
    cat16: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Cat16",
            "type": "Attribute",
        }
    )
    cat17: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Cat17",
            "type": "Attribute",
        }
    )
    cat18: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Cat18",
            "type": "Attribute",
        }
    )
    cat19: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Cat19",
            "type": "Attribute",
        }
    )
    cat20: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Cat20",
            "type": "Attribute",
        }
    )
    cat21: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Cat21",
            "type": "Attribute",
        }
    )
    cat22: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Cat22",
            "type": "Attribute",
        }
    )
    cat23: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Cat23",
            "type": "Attribute",
        }
    )
    cat24: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Cat24",
            "type": "Attribute",
        }
    )
    cat25: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Cat25",
            "type": "Attribute",
        }
    )
    cat26: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Cat26",
            "type": "Attribute",
        }
    )
    cat27: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Cat27",
            "type": "Attribute",
        }
    )
    cat28: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Cat28",
            "type": "Attribute",
        }
    )
    cat29: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Cat29",
            "type": "Attribute",
        }
    )
    cat30: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Cat30",
            "type": "Attribute",
        }
    )
    cat31: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Cat31",
            "type": "Attribute",
        }
    )
    restrictive_dt: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "RestrictiveDt",
            "type": "Attribute",
        }
    )
    surcharge_amt: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "SurchargeAmt",
            "type": "Attribute",
        }
    )
    not_usacity: Optional[bool] = field(
        default=None,
        metadata={
            "name": "NotUSACity",
            "type": "Attribute",
        }
    )
    missing_rules: Optional[bool] = field(
        default=None,
        metadata={
            "name": "MissingRules",
            "type": "Attribute",
        }
    )


@dataclass
class OfferAvailabilityModifiers:
    """
    :ivar service_type: To restrict offers to only this type.
    :ivar carrier: The carrier whose paid seat optional services is to
        be returned by uAPI.
    :ivar currency_type: Currency code override. Providers: ACH, 1G, 1V,
        1P
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    service_type: List[str] = field(
        default_factory=list,
        metadata={
            "name": "ServiceType",
            "type": "Element",
            "max_occurs": 999,
            "min_length": 1,
            "max_length": 128,
        }
    )
    carrier: List[str] = field(
        default_factory=list,
        metadata={
            "name": "Carrier",
            "type": "Element",
            "max_occurs": 999,
            "length": 2,
        }
    )
    currency_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "CurrencyType",
            "type": "Attribute",
            "length": 3,
        }
    )


@dataclass
class OptionalServiceModifier:
    """
    Optional service modifiers.

    :ivar type_value: Optional service type
    :ivar secondary_type: Secondary optional service type
    :ivar supplier_code: Optional service supplier code
    :ivar service_sub_code: As published by ATPCO
    :ivar travel_date: The departure date of the air segment the
        optional service is valid for.
    :ivar description: This allows MDS to return specific image and text
        corresponding to the ancillary name (S5 ancillary name).
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "Type",
            "type": "Attribute",
            "required": True,
            "min_length": 1,
            "max_length": 128,
        }
    )
    secondary_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "SecondaryType",
            "type": "Attribute",
            "min_length": 1,
            "max_length": 128,
        }
    )
    supplier_code: Optional[str] = field(
        default=None,
        metadata={
            "name": "SupplierCode",
            "type": "Attribute",
            "required": True,
            "min_length": 1,
            "max_length": 5,
        }
    )
    service_sub_code: Optional[str] = field(
        default=None,
        metadata={
            "name": "ServiceSubCode",
            "type": "Attribute",
            "required": True,
        }
    )
    travel_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "TravelDate",
            "type": "Attribute",
            "required": True,
        }
    )
    description: Optional[str] = field(
        default=None,
        metadata={
            "name": "Description",
            "type": "Attribute",
            "required": True,
        }
    )


@dataclass
class OptionalServiceRef:
    """
    Reference to optional service.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    value: str = field(
        default="",
        metadata={
            "required": True,
        }
    )


@dataclass
class OverrideCode:
    """
    Code corresponding to the type of OverridableException the user wishes to
    override.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    value: str = field(
        default="",
        metadata={
            "length": 4,
        }
    )


@dataclass
class PassengerDetailsRef:
    """
    Reference of the Passenger.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    key: Optional[str] = field(
        default=None,
        metadata={
            "name": "Key",
            "type": "Attribute",
            "required": True,
        }
    )


@dataclass
class PassengerReceiptOverride:
    """
    It is required when a passenger receipt is required immediately ,GDS overrides
    the default value.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    value: str = field(
        default="",
        metadata={
            "required": True,
            "min_length": 1,
            "white_space": "collapse",
        }
    )


@dataclass
class PassengerSeatPrice:
    """
    Only used when a passenger has a different price than the default.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    booking_traveler_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "BookingTravelerRef",
            "type": "Attribute",
            "required": True,
        }
    )
    amount: Optional[str] = field(
        default=None,
        metadata={
            "name": "Amount",
            "type": "Attribute",
            "required": True,
        }
    )


@dataclass
class PassengerTicketNumber:
    """
    Information related to Ticket Number.

    :ivar ticket_number: The identifying number for a Ticket for a
        passenger.
    :ivar booking_traveler_ref: Reference to a passenger associated with
        a ticket.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    ticket_number: Optional[str] = field(
        default=None,
        metadata={
            "name": "TicketNumber",
            "type": "Attribute",
            "min_length": 1,
            "max_length": 13,
        }
    )
    booking_traveler_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "BookingTravelerRef",
            "type": "Attribute",
        }
    )


@dataclass
class PaymentRef:
    """
    Reference to one of the air reservation payments.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    key: Optional[str] = field(
        default=None,
        metadata={
            "name": "Key",
            "type": "Attribute",
            "required": True,
        }
    )


@dataclass
class PenFeeType:
    """
    :ivar dep_required: Deposit required. True if require. False if not
        required.
    :ivar dep_non_ref: Deposit non-refundable.  True is  non-refundanbe.
        False is refundable.
    :ivar tk_non_ref: Ticket non-refundable. True if non-refundanbe.
        False if refundable.
    :ivar air_vfee: Carrier fee. True if carrier fee is assessed should
        passenger for complete all conditions for travel at fare. False
        if it does not exist.
    :ivar cancellation: Cancellation. True if subject to penalty. False
        if no penalty.
    :ivar fail_confirm_space: Failure to confirm space. True if subject
        to penalty if seats are not confirmed. False if subject to
        penalty if seats are confirmed.
    :ivar itin_chg: Subject to penalty if Itinerary is changed requiring
        reissue of ticket. True if subject to penalty. False if no
        penalty if reissue required.
    :ivar replace_tk: Replace ticket. True if subject to penalty, if
        replacement of lost ticket / exchange order. False if no
        penalty, if replacement of lost ticket or exchange order.
    :ivar applicable: Applicable. True if amount specified is
        applicable. Flase if amount specified is not applicable.
    :ivar applicable_to: Applicable to penalty or deposit. True if
        amount specified applies to penalty. False if amount specified
        applies to deposit.
    :ivar amt: Amount of penalty.  If XXX.XX then it is an amount.  If
        it is XX then is is a percenatge.  Eg 100.00 or 000100.
    :ivar type_value: Type of penalty.  If it is D then dollar.  If it
        is P then percentage.
    :ivar currency: Currency code of penalty (e.g. USD).
    """
    class Meta:
        target_namespace = "http://www.travelport.com/schema/air_v52_0"

    dep_required: Optional[bool] = field(
        default=None,
        metadata={
            "name": "DepRequired",
            "type": "Attribute",
        }
    )
    dep_non_ref: Optional[bool] = field(
        default=None,
        metadata={
            "name": "DepNonRef",
            "type": "Attribute",
        }
    )
    tk_non_ref: Optional[bool] = field(
        default=None,
        metadata={
            "name": "TkNonRef",
            "type": "Attribute",
        }
    )
    air_vfee: Optional[bool] = field(
        default=None,
        metadata={
            "name": "AirVFee",
            "type": "Attribute",
        }
    )
    cancellation: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Cancellation",
            "type": "Attribute",
        }
    )
    fail_confirm_space: Optional[bool] = field(
        default=None,
        metadata={
            "name": "FailConfirmSpace",
            "type": "Attribute",
        }
    )
    itin_chg: Optional[bool] = field(
        default=None,
        metadata={
            "name": "ItinChg",
            "type": "Attribute",
        }
    )
    replace_tk: Optional[bool] = field(
        default=None,
        metadata={
            "name": "ReplaceTk",
            "type": "Attribute",
        }
    )
    applicable: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Applicable",
            "type": "Attribute",
        }
    )
    applicable_to: Optional[bool] = field(
        default=None,
        metadata={
            "name": "ApplicableTo",
            "type": "Attribute",
        }
    )
    amt: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Amt",
            "type": "Attribute",
        }
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "Type",
            "type": "Attribute",
        }
    )
    currency: Optional[str] = field(
        default=None,
        metadata={
            "name": "Currency",
            "type": "Attribute",
        }
    )


@dataclass
class Penalty:
    """
    :ivar amount: Penalty Amount
    :ivar penalty_type: This is the PPC (Price Processing Code)code.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    amount: Optional[str] = field(
        default=None,
        metadata={
            "name": "Amount",
            "type": "Attribute",
        }
    )
    penalty_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "PenaltyType",
            "type": "Attribute",
        }
    )


@dataclass
class PenaltyInformation:
    """
    :ivar value:
    :ivar carrier: Fare-owning carrier
    :ivar fare_basis: Unique identifier that provides the association to
        the fare amount and fare rules.
    :ivar fare_component: A portion of a journey or itinerary between
        two consecutive fare break points.
    :ivar priceable_unit: Identifies FareComponents that are priced
        together
    :ivar board_point: Origin for the FareComponent
    :ivar off_point: Destination for the FareComponent
    :ivar minimum_change_fee: Estimated minimum change fee associated
        with the fare component.  Can be overridden by
        ChangeFeeApplicationCodes for other fare components.
    :ivar maximum_change_fee: Estimated maximum change fee associated
        with the fare component.  Can be overridden by
        ChangeFeeApplicationCodes for other fare components.
    :ivar filed_currency: Currency of the filed change fee
    :ivar conversion_rate: Conversion rate from filed change fee
        currency to reissue location currency
    :ivar refundable: Answers whether the FareComponent is refundable
    :ivar change_fee_application_code: Unique code associated with the
        PenaltyInformation text which defines how fees will be
        applied/calculated. E.g. J2 translates to "From among all fare
        components, changed and unchanged...."
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    value: str = field(
        default="",
        metadata={
            "required": True,
        }
    )
    carrier: Optional[str] = field(
        default=None,
        metadata={
            "name": "Carrier",
            "type": "Attribute",
            "length": 2,
        }
    )
    fare_basis: Optional[str] = field(
        default=None,
        metadata={
            "name": "FareBasis",
            "type": "Attribute",
        }
    )
    fare_component: Optional[int] = field(
        default=None,
        metadata={
            "name": "FareComponent",
            "type": "Attribute",
        }
    )
    priceable_unit: Optional[int] = field(
        default=None,
        metadata={
            "name": "PriceableUnit",
            "type": "Attribute",
        }
    )
    board_point: Optional[str] = field(
        default=None,
        metadata={
            "name": "BoardPoint",
            "type": "Attribute",
            "length": 3,
            "white_space": "collapse",
        }
    )
    off_point: Optional[str] = field(
        default=None,
        metadata={
            "name": "OffPoint",
            "type": "Attribute",
            "length": 3,
            "white_space": "collapse",
        }
    )
    minimum_change_fee: Optional[str] = field(
        default=None,
        metadata={
            "name": "MinimumChangeFee",
            "type": "Attribute",
        }
    )
    maximum_change_fee: Optional[str] = field(
        default=None,
        metadata={
            "name": "MaximumChangeFee",
            "type": "Attribute",
        }
    )
    filed_currency: Optional[str] = field(
        default=None,
        metadata={
            "name": "FiledCurrency",
            "type": "Attribute",
            "length": 3,
        }
    )
    conversion_rate: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "ConversionRate",
            "type": "Attribute",
        }
    )
    refundable: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Refundable",
            "type": "Attribute",
        }
    )
    change_fee_application_code: Optional[str] = field(
        default=None,
        metadata={
            "name": "ChangeFeeApplicationCode",
            "type": "Attribute",
            "length": 2,
        }
    )


@dataclass
class PersonName:
    """
    Customer name field.

    :ivar first: Person First Name.
    :ivar last: Person Last Name.
    :ivar prefix: Person Name prefix.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    first: Optional[str] = field(
        default=None,
        metadata={
            "name": "First",
            "type": "Attribute",
            "min_length": 1,
            "max_length": 64,
        }
    )
    last: Optional[str] = field(
        default=None,
        metadata={
            "name": "Last",
            "type": "Attribute",
            "required": True,
            "min_length": 1,
            "max_length": 64,
        }
    )
    prefix: Optional[str] = field(
        default=None,
        metadata={
            "name": "Prefix",
            "type": "Attribute",
            "min_length": 1,
            "max_length": 16,
        }
    )


@dataclass
class PersonNameSearch:
    """
    Customer name field.

    :ivar last: Person Last Name to be searched for Flight Pass content.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    last: Optional[str] = field(
        default=None,
        metadata={
            "name": "Last",
            "type": "Attribute",
            "required": True,
            "min_length": 1,
            "max_length": 64,
        }
    )


@dataclass
class PolicyCodesList:
    """
    :ivar policy_code: A code that indicates why an item was determined
        to be ‘out of policy’.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    policy_code: List[int] = field(
        default_factory=list,
        metadata={
            "name": "PolicyCode",
            "type": "Element",
            "min_occurs": 1,
            "max_occurs": 10,
            "min_inclusive": 1,
            "max_inclusive": 9999,
        }
    )


@dataclass
class PriceChangeType:
    """
    Indicates a price change is found in Fare Control Manager.

    :ivar value:
    :ivar amount: Contains the currency and amount information. Assume
        the amount is added unless a hyphen is present to indicate
        subtraction.
    :ivar carrier: Contains carrier code information
    :ivar segment_ref: Contains segment reference information
    """
    class Meta:
        target_namespace = "http://www.travelport.com/schema/air_v52_0"

    value: str = field(
        default="",
        metadata={
            "required": True,
        }
    )
    amount: Optional[str] = field(
        default=None,
        metadata={
            "name": "Amount",
            "type": "Attribute",
            "required": True,
        }
    )
    carrier: Optional[str] = field(
        default=None,
        metadata={
            "name": "Carrier",
            "type": "Attribute",
        }
    )
    segment_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "SegmentRef",
            "type": "Attribute",
        }
    )


@dataclass
class PriceRange:
    """
    :ivar default_currency: Indicates if the currency code of StartPrice
        / EndPrice is the default currency code
    :ivar start_price: Price range start value
    :ivar end_price: Price range end value
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    default_currency: Optional[bool] = field(
        default=None,
        metadata={
            "name": "DefaultCurrency",
            "type": "Attribute",
        }
    )
    start_price: Optional[str] = field(
        default=None,
        metadata={
            "name": "StartPrice",
            "type": "Attribute",
        }
    )
    end_price: Optional[str] = field(
        default=None,
        metadata={
            "name": "EndPrice",
            "type": "Attribute",
        }
    )


@dataclass
class PrintBlankFormItinerary:
    """
    Produce a customized itinerary/Invoice document in blank form format.

    :ivar include_description: If it is true then document will be
        printed including descriptions.
    :ivar include_header: If it is true then document will be printed
        including it's header.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    include_description: Optional[bool] = field(
        default=None,
        metadata={
            "name": "IncludeDescription",
            "type": "Attribute",
            "required": True,
        }
    )
    include_header: Optional[bool] = field(
        default=None,
        metadata={
            "name": "IncludeHeader",
            "type": "Attribute",
            "required": True,
        }
    )


@dataclass
class PromoCode:
    """
    A container to specify Promotional code with Provider code and Supplier code.

    :ivar code: To be used to specify Promotional Code.
    :ivar provider_code: To be used to specify Provider Code.
    :ivar supplier_code: To be used to specify Supplier Code.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    code: Optional[str] = field(
        default=None,
        metadata={
            "name": "Code",
            "type": "Attribute",
            "required": True,
            "min_length": 1,
            "max_length": 64,
        }
    )
    provider_code: Optional[str] = field(
        default=None,
        metadata={
            "name": "ProviderCode",
            "type": "Attribute",
            "required": True,
            "min_length": 2,
            "max_length": 5,
        }
    )
    supplier_code: Optional[str] = field(
        default=None,
        metadata={
            "name": "SupplierCode",
            "type": "Attribute",
            "required": True,
            "min_length": 1,
            "max_length": 5,
        }
    )


@dataclass
class RailCoachDetails:
    """
    :ivar rail_coach_number: Rail coach number for the returned coach
        details.
    :ivar available_rail_seats: Number of available seats present in
        this rail coach.
    :ivar rail_seat_map_availability: Indicates if seats are available
        in this rail coach which can be mapped.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    rail_coach_number: Optional[str] = field(
        default=None,
        metadata={
            "name": "RailCoachNumber",
            "type": "Attribute",
        }
    )
    available_rail_seats: Optional[str] = field(
        default=None,
        metadata={
            "name": "AvailableRailSeats",
            "type": "Attribute",
        }
    )
    rail_seat_map_availability: Optional[bool] = field(
        default=None,
        metadata={
            "name": "RailSeatMapAvailability",
            "type": "Attribute",
        }
    )


class RepricingModifiersFlightType(Enum):
    DIRECT = "Direct"
    NON_STOP = "NonStop"
    SINGLE_CONNECTION = "SingleConnection"
    NO_RESTRICTIONS = "NoRestrictions"


@dataclass
class Restriction:
    """
    Fare Reference associated with the BookingRules.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    days_of_week_restriction: List["Restriction.DaysOfWeekRestriction"] = field(
        default_factory=list,
        metadata={
            "name": "DaysOfWeekRestriction",
            "type": "Element",
            "max_occurs": 3,
        }
    )
    restriction_passenger_types: List["Restriction.RestrictionPassengerTypes"] = field(
        default_factory=list,
        metadata={
            "name": "RestrictionPassengerTypes",
            "type": "Element",
            "max_occurs": 999,
        }
    )

    @dataclass
    class DaysOfWeekRestriction:
        mon: Optional[bool] = field(
            default=None,
            metadata={
                "name": "Mon",
                "type": "Attribute",
            }
        )
        tue: Optional[bool] = field(
            default=None,
            metadata={
                "name": "Tue",
                "type": "Attribute",
            }
        )
        wed: Optional[bool] = field(
            default=None,
            metadata={
                "name": "Wed",
                "type": "Attribute",
            }
        )
        thu: Optional[bool] = field(
            default=None,
            metadata={
                "name": "Thu",
                "type": "Attribute",
            }
        )
        fri: Optional[bool] = field(
            default=None,
            metadata={
                "name": "Fri",
                "type": "Attribute",
            }
        )
        sat: Optional[bool] = field(
            default=None,
            metadata={
                "name": "Sat",
                "type": "Attribute",
            }
        )
        sun: Optional[bool] = field(
            default=None,
            metadata={
                "name": "Sun",
                "type": "Attribute",
            }
        )
        restriction_exists_ind: Optional[bool] = field(
            default=None,
            metadata={
                "name": "RestrictionExistsInd",
                "type": "Attribute",
            }
        )
        application: Optional[str] = field(
            default=None,
            metadata={
                "name": "Application",
                "type": "Attribute",
            }
        )
        include_exclude_use_ind: Optional[bool] = field(
            default=None,
            metadata={
                "name": "IncludeExcludeUseInd",
                "type": "Attribute",
            }
        )

    @dataclass
    class RestrictionPassengerTypes:
        max_nbr_travelers: Optional[str] = field(
            default=None,
            metadata={
                "name": "MaxNbrTravelers",
                "type": "Attribute",
            }
        )
        total_nbr_ptc: Optional[str] = field(
            default=None,
            metadata={
                "name": "TotalNbrPTC",
                "type": "Attribute",
            }
        )


@dataclass
class RuleCharges:
    """
    Container for rules related to charges such as deposits, surcharges,
    penalities, etc..

    :ivar penalty_type:
    :ivar departure_status:
    :ivar amount:
    :ivar percent:
    :ivar more_rules_present: If true, specifies that advance purchase
        information will be present in fare rules.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    penalty_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "PenaltyType",
            "type": "Attribute",
        }
    )
    departure_status: Optional[str] = field(
        default=None,
        metadata={
            "name": "DepartureStatus",
            "type": "Attribute",
        }
    )
    amount: Optional[str] = field(
        default=None,
        metadata={
            "name": "Amount",
            "type": "Attribute",
        }
    )
    percent: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Percent",
            "type": "Attribute",
        }
    )
    more_rules_present: Optional[bool] = field(
        default=None,
        metadata={
            "name": "MoreRulesPresent",
            "type": "Attribute",
        }
    )


@dataclass
class Rules:
    """
    :ivar rules_text: Rules text
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    rules_text: Optional[str] = field(
        default=None,
        metadata={
            "name": "RulesText",
            "type": "Element",
        }
    )


@dataclass
class SeatInformation:
    """Additional information about seats.

    Providers: 1G, 1V, 1P,ACH

    :ivar power: Detail about any electrical power the seat might have.
        For example: No Power Providers: 1G, 1V, 1P
    :ivar video: Detail about any video components the seat might have.
        For example: No Video Providers: 1G, 1V, 1P
    :ivar type_value: Detail about the type of seat. For example: Exit
        Row, Standard, etc. Providers: 1G, 1V, 1P
    :ivar description: Detailed description of the seat. Providers: 1G,
        1V, 1P
    :ivar rating: Definition of the seat rating. Providers: 1G, 1V, 1P
    :ivar key:
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    power: Optional[str] = field(
        default=None,
        metadata={
            "name": "Power",
            "type": "Element",
            "required": True,
        }
    )
    video: Optional[str] = field(
        default=None,
        metadata={
            "name": "Video",
            "type": "Element",
            "required": True,
        }
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "Type",
            "type": "Element",
            "required": True,
        }
    )
    description: Optional[str] = field(
        default=None,
        metadata={
            "name": "Description",
            "type": "Element",
            "required": True,
        }
    )
    rating: Optional["SeatInformation.Rating"] = field(
        default=None,
        metadata={
            "name": "Rating",
            "type": "Element",
            "required": True,
        }
    )
    key: Optional[str] = field(
        default=None,
        metadata={
            "name": "Key",
            "type": "Attribute",
            "required": True,
        }
    )

    @dataclass
    class Rating:
        """
        :ivar value:
        :ivar number: Numerical rating of the seat from 1 to 5 with 1
            being bad and 5 being good. Providers: 1G, 1V, 1P
        """
        value: str = field(
            default="",
            metadata={
                "required": True,
            }
        )
        number: Optional[int] = field(
            default=None,
            metadata={
                "name": "Number",
                "type": "Attribute",
                "required": True,
            }
        )


@dataclass
class SegmentIndex:
    """
    Identifies the segment that is part of this group.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    value: Optional[int] = field(
        default=None,
        metadata={
            "required": True,
        }
    )


@dataclass
class ServiceSubGroup:
    """The Service Sub Group of the Ancillary Service.

    Providers: 1G, 1V, 1P, ACH

    :ivar code: The Service Sub Group Code of the Ancillary Service.
        Providers: 1G, 1V, 1P, ACH
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    code: Optional[str] = field(
        default=None,
        metadata={
            "name": "Code",
            "type": "Attribute",
        }
    )


@dataclass
class SpecificSeatAssignment:
    """
    Request object used to specify a specific seat.

    :ivar booking_traveler_ref: The passenger that this seat assignment
        is for
    :ivar segment_ref: The segment that we will assign this seat on
    :ivar flight_detail_ref: The Flight Detail ref of the AirSegment
        used when requesting seats on Change of Guage flights
    :ivar seat_id: The actual seat ID that is being requested. Special
        Characters are not supported in this field.
    :ivar rail_coach_number: Coach number for which rail
        seatmap/coachmap is returned.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    booking_traveler_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "BookingTravelerRef",
            "type": "Attribute",
            "required": True,
        }
    )
    segment_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "SegmentRef",
            "type": "Attribute",
            "required": True,
        }
    )
    flight_detail_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "FlightDetailRef",
            "type": "Attribute",
        }
    )
    seat_id: Optional[str] = field(
        default=None,
        metadata={
            "name": "SeatId",
            "type": "Attribute",
            "required": True,
        }
    )
    rail_coach_number: Optional[str] = field(
        default=None,
        metadata={
            "name": "RailCoachNumber",
            "type": "Attribute",
            "max_length": 4,
        }
    )


@dataclass
class SplitTicketingSearch:
    """SplitTicketingSearch is optional.

    Used to return both One-Way and Roundtrip fares in a single search
    response. Applicable to 1G, 1V, 1P only, the price points results
    path, and a simple roundtrip search only. Cannot be used in
    combination with Flex options.

    :ivar round_trip: Percentage of Roundtrip price points to be
        returned in the search response. This should be an even number.
        The One-Way price points returned in the response would be
        evenly distributed between the outbound and the inbound.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    round_trip: Optional[int] = field(
        default=None,
        metadata={
            "name": "RoundTrip",
            "type": "Attribute",
        }
    )


@dataclass
class SponsoredFltInfo:
    """This describes whether the segment is determined to be a sponsored flight.

    The SponsoredFltInfo node will only come back for Travelport UIs and
    not for other customers.

    :ivar sponsored_lnb: The line number of the sponsored flight item
    :ivar neutral_lnb: The neutral line number for the flight item.
    :ivar flt_key: The unique identifying key for the sponsored flight.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    sponsored_lnb: Optional[int] = field(
        default=None,
        metadata={
            "name": "SponsoredLNB",
            "type": "Attribute",
            "required": True,
        }
    )
    neutral_lnb: Optional[int] = field(
        default=None,
        metadata={
            "name": "NeutralLNB",
            "type": "Attribute",
            "required": True,
        }
    )
    flt_key: Optional[str] = field(
        default=None,
        metadata={
            "name": "FltKey",
            "type": "Attribute",
            "required": True,
            "max_length": 5,
        }
    )


@dataclass
class SvcSegment:
    """Service segment added to collect additional fee.

    1P only

    :ivar key: The Key of SVC Segment.
    :ivar carrier: The platting carrier
    :ivar status:
    :ivar number_of_items:
    :ivar origin: Origin location - Airport code. 1P only.
    :ivar destination: Destination location - Airport code. 1P only.
    :ivar start_date: Start date of the segment. Generally it is the
        next date after the last air segment. 1P only
    :ivar travel_order: To identify the appropriate travel sequence for
        Air/Car/Hotel/Passive segments/reservations based on travel
        dates. This ordering is applicable across the UR not provider or
        traveler specific
    :ivar booking_traveler_ref:
    :ivar rfic: 1P - Reason for issuance
    :ivar rfisc: 1P - Resaon for issuance sub-code
    :ivar svc_description: 1P - SVC fee description
    :ivar fee: The fee to be collected using SVC segment
    :ivar emdnumber: Generated EMD number, if EMD is issued on the SVC
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    key: Optional[str] = field(
        default=None,
        metadata={
            "name": "Key",
            "type": "Attribute",
            "required": True,
        }
    )
    carrier: Optional[str] = field(
        default=None,
        metadata={
            "name": "Carrier",
            "type": "Attribute",
            "length": 2,
        }
    )
    status: Optional[str] = field(
        default=None,
        metadata={
            "name": "Status",
            "type": "Attribute",
        }
    )
    number_of_items: Optional[int] = field(
        default=None,
        metadata={
            "name": "NumberOfItems",
            "type": "Attribute",
        }
    )
    origin: Optional[str] = field(
        default=None,
        metadata={
            "name": "Origin",
            "type": "Attribute",
            "length": 3,
            "white_space": "collapse",
        }
    )
    destination: Optional[str] = field(
        default=None,
        metadata={
            "name": "Destination",
            "type": "Attribute",
            "length": 3,
            "white_space": "collapse",
        }
    )
    start_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "StartDate",
            "type": "Attribute",
        }
    )
    travel_order: Optional[int] = field(
        default=None,
        metadata={
            "name": "TravelOrder",
            "type": "Attribute",
        }
    )
    booking_traveler_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "BookingTravelerRef",
            "type": "Attribute",
        }
    )
    rfic: Optional[str] = field(
        default=None,
        metadata={
            "name": "RFIC",
            "type": "Attribute",
        }
    )
    rfisc: Optional[str] = field(
        default=None,
        metadata={
            "name": "RFISC",
            "type": "Attribute",
        }
    )
    svc_description: Optional[str] = field(
        default=None,
        metadata={
            "name": "SvcDescription",
            "type": "Attribute",
        }
    )
    fee: Optional[str] = field(
        default=None,
        metadata={
            "name": "Fee",
            "type": "Attribute",
        }
    )
    emdnumber: Optional[str] = field(
        default=None,
        metadata={
            "name": "EMDNumber",
            "type": "Attribute",
            "length": 13,
        }
    )


class TcrrefundBundleRefundType(Enum):
    AUTO = "Auto"
    MANUAL = "Manual"
    IGNORED = "Ignored"


@dataclass
class Tax:
    """
    Taxes for Land Charges.

    :ivar category: The tax category represents a valid IATA tax code.
    :ivar amount:
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    category: Optional[str] = field(
        default=None,
        metadata={
            "name": "Category",
            "type": "Attribute",
        }
    )
    amount: Optional[str] = field(
        default=None,
        metadata={
            "name": "Amount",
            "type": "Attribute",
            "required": True,
        }
    )


@dataclass
class TextInfo:
    """
    Information on baggage as published by carrier.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    text: List[str] = field(
        default_factory=list,
        metadata={
            "name": "Text",
            "type": "Element",
            "max_occurs": 999,
            "max_length": 250,
        }
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "name": "Title",
            "type": "Attribute",
        }
    )


@dataclass
class TicketAgency:
    """This modifier will override the pseudo of the ticketing agency found in the
    AAT (TKAG).

    Used for all plating carrier validation.

    :ivar provider_code: The code of the Provider (e.g. 1G, 1P)
    :ivar pseudo_city_code: The PCC of the host system.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    provider_code: Optional[object] = field(
        default=None,
        metadata={
            "name": "ProviderCode",
            "type": "Attribute",
            "required": True,
        }
    )
    pseudo_city_code: Optional[object] = field(
        default=None,
        metadata={
            "name": "PseudoCityCode",
            "type": "Attribute",
            "required": True,
        }
    )


@dataclass
class TicketDesignator:
    """
    Ticket Designator used to further qualify a Fare Basis Code.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    value: Optional[str] = field(
        default=None,
        metadata={
            "name": "Value",
            "type": "Attribute",
            "required": True,
            "min_length": 0,
            "max_length": 20,
        }
    )


@dataclass
class TicketEndorsement:
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    value: Optional[str] = field(
        default=None,
        metadata={
            "name": "Value",
            "type": "Attribute",
            "required": True,
            "min_length": 1,
            "max_length": 256,
        }
    )


@dataclass
class TicketValidity:
    """
    To be used to pass the selected segment.

    :ivar not_valid_before: Fare not valid before this date.
    :ivar not_valid_after: Fare not valid after this date.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    not_valid_before: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "NotValidBefore",
            "type": "Attribute",
        }
    )
    not_valid_after: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "NotValidAfter",
            "type": "Attribute",
        }
    )


@dataclass
class TicketingCode:
    """
    Ticketing Code used to apply commissions.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    value: Optional[str] = field(
        default=None,
        metadata={
            "name": "Value",
            "type": "Attribute",
            "min_length": 0,
            "max_length": 20,
        }
    )


@dataclass
class TicketingModifiersRef:
    """
    Reference to a shared list of Ticketing Modifers.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    key: Optional[str] = field(
        default=None,
        metadata={
            "name": "Key",
            "type": "Attribute",
            "required": True,
        }
    )


@dataclass
class TourCode:
    """
    Tour Code Fare Basis.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    value: Optional[str] = field(
        default=None,
        metadata={
            "name": "Value",
            "type": "Attribute",
            "required": True,
            "max_length": 15,
        }
    )


@dataclass
class TravelArranger:
    """
    Details of Travel Arranger.

    :ivar value:
    :ivar company_short_name: Company Name
    :ivar code: IATA Code for Arranger
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    value: str = field(
        default="",
        metadata={
            "required": True,
        }
    )
    company_short_name: Optional[str] = field(
        default=None,
        metadata={
            "name": "CompanyShortName",
            "type": "Attribute",
        }
    )
    code: Optional[str] = field(
        default=None,
        metadata={
            "name": "Code",
            "type": "Attribute",
        }
    )


@dataclass
class Url:
    class Meta:
        name = "URL"
        namespace = "http://www.travelport.com/schema/air_v52_0"

    value: str = field(
        default="",
        metadata={
            "required": True,
        }
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "Type",
            "type": "Attribute",
        }
    )


@dataclass
class Urlinfo:
    """
    Contains the text and URL of baggage as published by carrier.
    """
    class Meta:
        name = "URLInfo"
        namespace = "http://www.travelport.com/schema/air_v52_0"

    text: List[str] = field(
        default_factory=list,
        metadata={
            "name": "Text",
            "type": "Element",
            "max_occurs": 999,
            "max_length": 250,
        }
    )
    url: List[str] = field(
        default_factory=list,
        metadata={
            "name": "URL",
            "type": "Element",
            "max_occurs": 999,
        }
    )


@dataclass
class UpsellBrand:
    """
    Upsell brand reference.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    fare_basis: Optional[str] = field(
        default=None,
        metadata={
            "name": "FareBasis",
            "type": "Attribute",
        }
    )
    fare_info_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "FareInfoRef",
            "type": "Attribute",
        }
    )


@dataclass
class ValueDetails:
    class Meta:
        target_namespace = "http://www.travelport.com/schema/air_v52_0"

    name: Optional[str] = field(
        default=None,
        metadata={
            "name": "Name",
            "type": "Attribute",
            "required": True,
        }
    )
    value: Optional[str] = field(
        default=None,
        metadata={
            "name": "Value",
            "type": "Attribute",
            "required": True,
        }
    )


@dataclass
class VoidFailureInfo:
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    value: str = field(
        default="",
        metadata={
            "required": True,
        }
    )
    ticket_number: Optional[str] = field(
        default=None,
        metadata={
            "name": "TicketNumber",
            "type": "Attribute",
            "required": True,
        }
    )
    code: Optional[int] = field(
        default=None,
        metadata={
            "name": "Code",
            "type": "Attribute",
        }
    )


@dataclass
class WaiverCode:
    """
    Waiver code to override fare validations.

    :ivar tour_code:
    :ivar ticket_designator:
    :ivar endorsement: Endorsement. Size can be up to 100 characters
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    tour_code: Optional[str] = field(
        default=None,
        metadata={
            "name": "TourCode",
            "type": "Attribute",
            "max_length": 15,
        }
    )
    ticket_designator: Optional[str] = field(
        default=None,
        metadata={
            "name": "TicketDesignator",
            "type": "Attribute",
            "min_length": 0,
            "max_length": 20,
        }
    )
    endorsement: Optional[str] = field(
        default=None,
        metadata={
            "name": "Endorsement",
            "type": "Attribute",
            "min_length": 0,
            "max_length": 100,
        }
    )


@dataclass
class Yield:
    """An identifier which identifies yield made on original pricing.

    It can be a flat amount of original price. The value of Amount can
    be negative. Negative value implies a discount.

    :ivar amount: Yield per passenger level in Default Currency for this
        entity.
    :ivar booking_traveler_ref: Reference to a booking traveler for
        which Yield is applied.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    amount: Optional[str] = field(
        default=None,
        metadata={
            "name": "Amount",
            "type": "Attribute",
        }
    )
    booking_traveler_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "BookingTravelerRef",
            "type": "Attribute",
        }
    )


class TypeAtpcoglobalIndicator(Enum):
    """
    Enumeration of ATPCO global indicators.

    :cvar AL: FareByRule -- All fares incl. EH/TS
    :cvar AP: Via Atlantic Pacific
    :cvar AT: Via Atlantic
    :cvar CA: Within Canada.
    :cvar CT: Circle trip.
    :cvar EH: Within Eastern Hemisphere
    :cvar FE: Far East
    :cvar IN: FareByRule - For int'l incl. AT/PA/WH/CT/RW
    :cvar NA: FareByRule for North America incl US/CA/TB/PV
    :cvar PA: Via Pacific
    :cvar PN: Via Pacific and via North America
    :cvar PO: Via Polar Route.
    :cvar RU: Russia - Area 3
    :cvar RW: Round The World.
    :cvar SA: South Atlantic only
    :cvar SP: Via South Polar Route
    :cvar TB: Trans-border
    :cvar TS: Via Siberia.
    :cvar US: Within the United States.
    :cvar WH: Within Western Hemisphere
    :cvar ZZ: Any Global
    """
    AL = "AL"
    AP = "AP"
    AT = "AT"
    CA = "CA"
    CT = "CT"
    EH = "EH"
    FE = "FE"
    IN = "IN"
    NA = "NA"
    PA = "PA"
    PN = "PN"
    PO = "PO"
    RU = "RU"
    RW = "RW"
    SA = "SA"
    SP = "SP"
    TB = "TB"
    TS = "TS"
    US = "US"
    WH = "WH"
    ZZ = "ZZ"


@dataclass
class TypeAnchorFlightData:
    """To support Anchor flight search contain the anchor flight details.

    Supported providers 1P

    :ivar airline_code: Indicates Anchor flight carrier code
    :ivar flight_number: Indicates Anchor flight number
    :ivar connection_indicator: Indicates that the Anchor flight has any
        connecting flight or not
    """
    class Meta:
        name = "typeAnchorFlightData"
        target_namespace = "http://www.travelport.com/schema/air_v52_0"

    airline_code: Optional[str] = field(
        default=None,
        metadata={
            "name": "AirlineCode",
            "type": "Attribute",
            "required": True,
            "length": 2,
        }
    )
    flight_number: Optional[str] = field(
        default=None,
        metadata={
            "name": "FlightNumber",
            "type": "Attribute",
            "required": True,
            "max_length": 5,
        }
    )
    connection_indicator: Optional[bool] = field(
        default=None,
        metadata={
            "name": "ConnectionIndicator",
            "type": "Attribute",
        }
    )


@dataclass
class TypeApplicableSegment:
    """
    :ivar key:
    :ivar air_itinerary_details_ref:
    :ivar booking_counts: Classes of service and their counts.
    """
    class Meta:
        name = "typeApplicableSegment"
        target_namespace = "http://www.travelport.com/schema/air_v52_0"

    key: Optional[str] = field(
        default=None,
        metadata={
            "name": "Key",
            "type": "Attribute",
            "required": True,
        }
    )
    air_itinerary_details_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "AirItineraryDetailsRef",
            "type": "Attribute",
        }
    )
    booking_counts: Optional[str] = field(
        default=None,
        metadata={
            "name": "BookingCounts",
            "type": "Attribute",
        }
    )


class TypeAssessIndicator(Enum):
    """
    The type of AssessIndicator.
    """
    MILEAGE_AND_CURRENCY = "MileageAndCurrency"
    MILEAGE_OR_CURRENCY = "MileageOrCurrency"


class TypeBackOffice(Enum):
    ACCOUNTING = "Accounting"
    GLOBAL = "Global"
    NON_ACCOUNTING = "NonAccounting"
    NON_ACCOUNTING_REMOTE = "NonAccountingRemote"
    DUAL = "Dual"


class TypeBillingDetailsDataType(Enum):
    ALPHA = "Alpha"
    NUMERIC = "Numeric"
    ALPHA_NUMERIC = "AlphaNumeric"
    DATE = "Date"


class TypeBillingDetailsName(Enum):
    PERSONAL_ID = "PersonalId"
    COST_ACCOUNT_NUMBER = "CostAccountNumber"
    ACCOUNT_NUMBER = "AccountNumber"
    PROJECT_NUMBER = "ProjectNumber"
    ACTION_CODE = "ActionCode"
    DEPARTMENT_CODE = "DepartmentCode"
    ACCOUNTING_UNIT = "AccountingUnit"
    ORDER_NUMBER = "OrderNumber"
    DESTINATION = "Destination"
    FILE_DATE = "FileDate"


class TypeBooking(Enum):
    """
    Type of booking.
    """
    SSR = "SSR"
    AUXILLARY_SEGMENT = "Auxillary Segment"
    AVAILABLE_FOR_DISPLAY_PRICING = "Available for Display/Pricing"
    CONTACT_CARRIER_FOR_BOOKING = "Contact Carrier for Booking"
    NO_BOOKING_REQUIRED = "No Booking Required"
    APPLY_BOOKING_PER_SERVICE = "Apply booking per service"


@dataclass
class TypeBulkTicketModifierType:
    """
    Bulk ticketing modifier type.

    :ivar suppress_on_fare_calc: Optional attribute to allow a modifier
        impact such as Bulk Ticketing to have information suppressed on
        the Fare Calc when generating supporting documents Check the
        specific host system which may or may not support this function
    """
    class Meta:
        name = "typeBulkTicketModifierType"
        target_namespace = "http://www.travelport.com/schema/air_v52_0"

    suppress_on_fare_calc: Optional[bool] = field(
        default=None,
        metadata={
            "name": "SuppressOnFareCalc",
            "type": "Attribute",
        }
    )


class TypeCarrierCode(Enum):
    """
    Defines the type of booking codes (Primary or Secondary)
    """
    PRIMARY = "Primary"
    SECONDARY = "Secondary"


class TypeConnectionIndicator(Enum):
    """Types of connection indicator :
    AvailabilityAndPricing : Specified availability and pricing connection;
    TurnAround : Specified turn around;
    Stopover : Specified stopover;"""
    AVAILABILITY_AND_PRICING = "AvailabilityAndPricing"
    TURN_AROUND = "TurnAround"
    STOPOVER = "Stopover"


@dataclass
class TypeDaysOfOperation:
    class Meta:
        name = "typeDaysOfOperation"
        target_namespace = "http://www.travelport.com/schema/air_v52_0"

    mon: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Mon",
            "type": "Attribute",
        }
    )
    tue: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Tue",
            "type": "Attribute",
        }
    )
    wed: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Wed",
            "type": "Attribute",
        }
    )
    thu: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Thu",
            "type": "Attribute",
        }
    )
    fri: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Fri",
            "type": "Attribute",
        }
    )
    sat: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Sat",
            "type": "Attribute",
        }
    )
    sun: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Sun",
            "type": "Attribute",
        }
    )


class TypeDestinationCode(Enum):
    """
    List of valid Destination Codes.

    :cvar MEXICO_COST_RICA_CENTRAL_AMERICA: Mexico/Central America/Canal
        Zone/Costa Rica
    :cvar CARIBBEAN: Island and Countries of The Caribbean
    :cvar SOUTH_AMERICA: South America
    :cvar EUROPE: Europe
    :cvar AFRICA: Africa
    :cvar MIDDLE_EAST_WESTERN_ASIA: Middle East/Western Asia
    :cvar ASIA: Asia
    :cvar AUSTRALIA_NEW_ZEALAND_PACIFIC_ISLANDS: Australia/New
        Zealand/Pacific Islands
    :cvar CANADA_GREENLAND: Canada and Greenland
    :cvar USA: United States of America
    """
    MEXICO_COST_RICA_CENTRAL_AMERICA = "MexicoCostRicaCentralAmerica"
    CARIBBEAN = "Caribbean"
    SOUTH_AMERICA = "SouthAmerica"
    EUROPE = "Europe"
    AFRICA = "Africa"
    MIDDLE_EAST_WESTERN_ASIA = "MiddleEastWesternAsia"
    ASIA = "Asia"
    AUSTRALIA_NEW_ZEALAND_PACIFIC_ISLANDS = "AustraliaNewZealandPacificIslands"
    CANADA_GREENLAND = "CanadaGreenland"
    USA = "USA"


class TypeDisplayCategory(Enum):
    """
    Type of booking.
    """
    WITH_ITINERARY_PRICING = "With Itinerary Pricing"
    STORE = "Store"
    SPECIAL_SERVICE = "SpecialService"


class TypeDiversity(Enum):
    """
    Used in Low Fare Search to better promote unique results.
    """
    BLEND = "Blend"
    AIRPORTS = "Airports"
    CARRIER = "Carrier"
    ORIGIN = "Origin"
    DESTINATION = "Destination"
    DATE_COMBINATION = "DateCombination"
    FIRST_ODDATE = "FirstODDate"
    SECOND_ODDATE = "SecondODDate"
    FIRST_OD = "FirstOD"
    SECOND_OD = "SecondOD"


class TypeEticketability(Enum):
    """
    Defines the ability to eticket an entity (Yes, No, Required, Ticketless)
    """
    YES = "Yes"
    NO = "No"
    REQUIRED = "Required"
    TICKETLESS = "Ticketless"


class TypeFacility(Enum):
    SEAT = "Seat"
    AISLE = "Aisle"
    OPEN = "Open"
    UNKNOWN = "Unknown"


@dataclass
class TypeFailureInfo:
    class Meta:
        name = "typeFailureInfo"
        target_namespace = "http://www.travelport.com/schema/air_v52_0"

    code: Optional[int] = field(
        default=None,
        metadata={
            "name": "Code",
            "type": "Attribute",
            "required": True,
        }
    )
    message: Optional[str] = field(
        default=None,
        metadata={
            "name": "Message",
            "type": "Attribute",
            "required": True,
        }
    )


class TypeFareBreak(Enum):
    """
    Types of fare break.

    :cvar MUST_BREAK: Break Fare at the associated segment. Multiple
        Breaks or No Breaks may be allowed.
    :cvar MUST_ONLY_BREAK: Only Break Fare at the associated segment.
        Fare Break in the entire itinerary is allowed only at the
        concerned segment.
    :cvar MUST_NOT_BREAK: No Fare Break allowed at the associated
        segment.
    """
    MUST_BREAK = "MustBreak"
    MUST_ONLY_BREAK = "MustOnlyBreak"
    MUST_NOT_BREAK = "MustNotBreak"


class TypeFareDirectionality(Enum):
    """
    A fare's directionality (e.g. one-way, return )
    """
    OUTBOUND = "Outbound"
    RETURN = "Return"
    ALL = "All"


class TypeFareDiscount(Enum):
    """
    Fare Discount Calculation Method.
    """
    BASE_RE_CALC_USTAXES = "BaseReCalcUSTaxes"
    BASE_NO_RE_CALC_USTAXES = "BaseNoReCalcUSTaxes"
    BASE_TAX = "BaseTax"


class TypeFareGuarantee(Enum):
    """
    The status of a fare.

    :cvar AUTO: Automatically generated
    :cvar MANUAL: Agent has overridden default(s)
    :cvar MANUAL_FARE: Fare has been constructed by agent
    :cvar GUARANTEED: Fare is guaranteed
    :cvar INVALID: Invalid fare, e.g. due to name or itinerary change
    :cvar RESTORED: Ticketed stored fare has been restored
    :cvar TICKETED:
    :cvar UNTICKETABLE: Unable to ticket
    :cvar REPRICE: Need requote to ticket
    :cvar EXPIRED: Expired fare due to older fare guarantee date
        typically older than 7 days
    :cvar AUTO_USING_PRIVATE_FARE: Agency private fares that are not
        guaranteed
    :cvar GUARANTEED_USING_AIRLINE_PRIVATE_FARE: Guaranteed fare using
        Airline private fare that was filed with a fare distributor.
    :cvar AIRLINE: Fare guaranteed by Airline.
    :cvar GUARANTEE_EXPIRED: Guaranteed fare recently got expired as
        ticketing hadn't been done within a time frame typically
        midnight local time of POS .
    :cvar AGENCY_PRIVATE_FARE_NO_OVERRIDE: Agency Private Fare with no
        rules override
    :cvar UNKNOWN: To handle new enumerations added by provider but
        currently not recognized by API
    """
    AUTO = "Auto"
    MANUAL = "Manual"
    MANUAL_FARE = "ManualFare"
    GUARANTEED = "Guaranteed"
    INVALID = "Invalid"
    RESTORED = "Restored"
    TICKETED = "Ticketed"
    UNTICKETABLE = "Unticketable"
    REPRICE = "Reprice"
    EXPIRED = "Expired"
    AUTO_USING_PRIVATE_FARE = "AutoUsingPrivateFare"
    GUARANTEED_USING_AIRLINE_PRIVATE_FARE = "GuaranteedUsingAirlinePrivateFare"
    AIRLINE = "Airline"
    GUARANTEE_EXPIRED = "GuaranteeExpired"
    AGENCY_PRIVATE_FARE_NO_OVERRIDE = "AgencyPrivateFareNoOverride"
    UNKNOWN = "Unknown"


class TypeFarePenaltyPenaltyApplies(Enum):
    """
    The values can be "Anytime", "Before Departure" or "After Departure".
    """
    ANYTIME = "Anytime"
    BEFORE_DEPARTURE = "Before Departure"
    AFTER_DEPARTURE = "After Departure"


class TypeFareRestrictionType(Enum):
    """
    The type of fare restriction.
    """
    DAY_OF_WEEK = "DayOfWeek"
    FLIGHT_TIME_OF_DAY = "FlightTimeOfDay"
    BOTH = "Both"


class TypeFareRuleCategoryCode(Enum):
    """
    Kestrel Long Fare Rule Category Codes.

    :cvar APP: Rule App/Other Conditions
    :cvar WHO: Eligibility
    :cvar DAY: Day/Time
    :cvar SEA: Seasonal
    :cvar FLT: Flight App
    :cvar ADV: Advance Res/Tkt
    :cvar MIN: Minimum Stay
    :cvar MAX: Maximum Stay
    :cvar STP: Stopovers
    :cvar TRF: Transfers/Routing
    :cvar CMB: Combinability
    :cvar BLA: Blackouts
    :cvar SUR: Surcharges
    :cvar ACC: Accompanied
    :cvar TVL: Travel Restrictions
    :cvar TKT: Sales Restrictions
    :cvar CHG: Penalties
    :cvar HIP: HIP and Mileage Exceptions
    :cvar END: Ticket Endorsements
    :cvar CHD: Children"s Discounts
    :cvar TUC: Tour Conductor Disc
    :cvar AGT: Agent Discounts
    :cvar DSC: All Other Disc
    :cvar MIS: Misc Fare Tags
    :cvar FBR: Fare By Rule
    :cvar GRP: Groups
    :cvar TUR: Tours
    :cvar VAC: Visit Another Country
    :cvar DEP: Deposits
    :cvar VOL: Voluntary Changes
    :cvar IVE: Involuntary Exchanges
    :cvar VOR: Voluntary Refunds
    :cvar IVR: Involuntary Refunds
    :cvar NET: Negotiated Fares
    :cvar OTH: Other
    """
    APP = "APP"
    WHO = "WHO"
    DAY = "DAY"
    SEA = "SEA"
    FLT = "FLT"
    ADV = "ADV"
    MIN = "MIN"
    MAX = "MAX"
    STP = "STP"
    TRF = "TRF"
    CMB = "CMB"
    BLA = "BLA"
    SUR = "SUR"
    ACC = "ACC"
    TVL = "TVL"
    TKT = "TKT"
    CHG = "CHG"
    HIP = "HIP"
    END = "END"
    CHD = "CHD"
    TUC = "TUC"
    AGT = "AGT"
    DSC = "DSC"
    MIS = "MIS"
    FBR = "FBR"
    GRP = "GRP"
    TUR = "TUR"
    VAC = "VAC"
    DEP = "DEP"
    VOL = "VOL"
    IVE = "IVE"
    VOR = "VOR"
    IVR = "IVR"
    NET = "NET"
    OTH = "OTH"


class TypeFareRuleType(Enum):
    """
    The valid rule types.
    """
    NONE = "none"
    SHORT = "short"
    LONG = "long"


class TypeFareSearchOption(Enum):
    """
    Fare Search option indicator.
    """
    LEAVE = "Leave"
    RETURN = "Return"
    SEASONAL = "Seasonal"
    BLACKOUT = "Blackout"
    ADVANCE_PURCHASE = "Advance Purchase"
    DAY_OF_WEEK = "Day-of-week"
    EFFECTIVE_DATE = "Effective Date"


class TypeFareStatusCode(Enum):
    """
    :cvar READY_TO_TICKET: Fare is enabled and available for ticketing
    :cvar UNABLE_TO_TICKET: Fare could not be ticketed
    :cvar REPRICE: Fare needs to be repriced
    :cvar TICKETED: Fare is ticketed
    :cvar UNABLE: Fare is not enabled
    :cvar UNKNOWN: To handle new enumerations added by provider but
        currently not recognized by API
    """
    READY_TO_TICKET = "ReadyToTicket"
    UNABLE_TO_TICKET = "UnableToTicket"
    REPRICE = "Reprice"
    TICKETED = "Ticketed"
    UNABLE = "Unable"
    UNKNOWN = "Unknown"


class TypeFareTripType(Enum):
    """Type of trip for this fare ( One-way, Return,

    etc..)
    OneWay - one way fare
    OneWayOnly - one way fare only. Do not
    double
    Return - round trip fare
    ReturnOnly -- Round Trip fare only.
    Cannot be divided for use in half Round Trip
    HalfReturn - Half roundtrip fare
    CircleTrip -- circle trip fare
    RoundTheWorld -- round the world fare
    """
    ONE_WAY = "OneWay"
    ONE_WAY_ONLY = "OneWayOnly"
    RETURN = "Return"
    RETURN_ONLY = "ReturnOnly"
    HALF_RETURN = "HalfReturn"
    CIRCLE_TRIP = "CircleTrip"
    ROUND_THE_WORLD = "RoundTheWorld"


class TypeFaresIndicator(Enum):
    """
    Defines the type of fares to return (Only public fares, Only private fares,
    Only agency private fares, Only airline private fares or all fares)

    :cvar PUBLIC_FARES_ONLY:
    :cvar PRIVATE_FARES_ONLY:
    :cvar AGENCY_PRIVATE_FARES_ONLY:
    :cvar AIRLINE_PRIVATE_FARES_ONLY:
    :cvar PUBLIC_AND_PRIVATE_FARES:
    :cvar NET_FARES_ONLY:
    :cvar ALL_FARES: Applicable for 1G/1V air shop only
    """
    PUBLIC_FARES_ONLY = "PublicFaresOnly"
    PRIVATE_FARES_ONLY = "PrivateFaresOnly"
    AGENCY_PRIVATE_FARES_ONLY = "AgencyPrivateFaresOnly"
    AIRLINE_PRIVATE_FARES_ONLY = "AirlinePrivateFaresOnly"
    PUBLIC_AND_PRIVATE_FARES = "PublicAndPrivateFares"
    NET_FARES_ONLY = "NetFaresOnly"
    ALL_FARES = "AllFares"


class TypeIgnoreStopOver(Enum):
    """
    The stop over inluded to quote fare.

    :cvar NO_STOP_OVER: No Stop over included.
    :cvar STOP_OVER: Stop over included.
    :cvar IGNORE_SEGMENT: Segment Ignored.
    """
    NO_STOP_OVER = "NoStopOver"
    STOP_OVER = "StopOver"
    IGNORE_SEGMENT = "IgnoreSegment"


class TypeInventoryRequest(Enum):
    """The valid inventory types are Seamless - A, DirectAccess - B, Basic - C"""
    SEAMLESS = "Seamless"
    DIRECT_ACCESS = "DirectAccess"
    BASIC = "Basic"


class TypeItinerary(Enum):
    INVOICE = "Invoice"
    POCKET = "Pocket"


class TypeItineraryOption(Enum):
    NO_FARE = "NoFare"
    NO_AMOUNT = "NoAmount"
    SEQUENCE_NUMBER = "SequenceNumber"


class TypeMealService(Enum):
    """
    Available Meal Service.
    """
    MEAL = "Meal"
    COLD_MEAL = "ColdMeal"
    HOT_MEAL = "HotMeal"
    BREAKFAST = "Breakfast"
    CONTINENTAL_BREAKFAST = "ContinentalBreakfast"
    LUNCH = "Lunch"
    DINNER = "Dinner"
    SNACK_OR_BRUNCH = "SnackOrBrunch"
    FOOD_FOR_PURCHASE = "FoodForPurchase"
    COMPLIMENTARY_REFRESHMENTS = "ComplimentaryRefreshments"
    ALCOHOLIC_BEVERAGES_FOR_PURCHASE = "AlcoholicBeveragesForPurchase"
    COMPLIMENTARY_ALCOHOLIC_BEVERAGES = "ComplimentaryAlcoholicBeverages"
    FOOD_AND_BEVERAGES_FOR_PURCHASE = "FoodAndBeveragesForPurchase"
    NO_MEAL_SERVICE = "NoMealService"
    REFRESHMENTS_FOR_PURCHASE = "RefreshmentsForPurchase"


class TypeMileOrRouteBasedFare(Enum):
    """
    Whether the fare is Mile or Route based.
    """
    MILE = "Mile"
    ROUTE = "Route"
    BOTH = "Both"


@dataclass
class TypeNativeSearchModifier:
    """
    :ivar value:
    :ivar provider_code: The host for which the NativeModfier being
        added to
    """
    class Meta:
        name = "typeNativeSearchModifier"
        target_namespace = "http://www.travelport.com/schema/air_v52_0"

    value: str = field(
        default="",
        metadata={
            "required": True,
        }
    )
    provider_code: Optional[str] = field(
        default=None,
        metadata={
            "name": "ProviderCode",
            "type": "Attribute",
            "required": True,
            "min_length": 2,
            "max_length": 5,
        }
    )


@dataclass
class TypeNonAirReservationRef:
    class Meta:
        name = "typeNonAirReservationRef"
        target_namespace = "http://www.travelport.com/schema/air_v52_0"

    locator_code: Optional[str] = field(
        default=None,
        metadata={
            "name": "LocatorCode",
            "type": "Attribute",
            "required": True,
            "min_length": 5,
            "max_length": 8,
        }
    )


class TypePosition(Enum):
    """Facility position with respect to position within the aircraft cabin.

    Possible values are – Left, Right, Center, Left Center, Right Center
    """
    LEFT = "Left"
    RIGHT = "Right"
    CENTER = "Center"
    LEFT_CENTER = "LeftCenter"
    RIGHT_CENTER = "RightCenter"


class TypePricingMethod(Enum):
    """
    The method at which the pricing data was acquired.

    :cvar AUTO: Automatically generated
    :cvar MANUAL: Agent has overridden default(s)
    :cvar MANUAL_FARE: Fare has been constructed by agent
    :cvar GUARANTEED: Fare is guaranteed
    :cvar INVALID: Invalid fare, e.g. due to name or itinerary change
    :cvar RESTORED: Ticketed stored fare has been restored
    :cvar TICKETED:
    :cvar UNTICKETABLE: Unable to ticket
    :cvar REPRICE: Need requote to ticket
    :cvar EXPIRED: Expired fare, older than 7 days
    :cvar AUTO_USING_PRIVATE_FARE: Agency private fares that are not
        guaranteed
    :cvar GUARANTEED_USING_AIRLINE_PRIVATE_FARE: Guaranteed fare using
        Airline private fare that was filed with a fare distributor.
    :cvar AIRLINE: Fare created as a result of Claim PNR which transfers
        data to GDS for ticketing purposes.
    :cvar AGENT_ASSISTED: Fare is created using Agent Asisted Pricing.
        Worldspan TKG FAX Line Documentation - AGENT ASSISTEDPRICED
    :cvar VERIFY_PRICE: Verify existing saved price on PNR . Worldspan
        TKG FAX Line Documentation -  AWAITING PRICE VERIFICATION
    :cvar ALT_SEGMENT_REMOVED_REPRICE: ALT Segment removed, Reprice
        pricing. Worldspan TKG FAX Line Documentation - AWAITING
        REPRICING ALT SEGS RMVD
    :cvar AUXILIARY_SEGMENT_REMOVED_REPRICE: AUX Segment removed,
        Reprice pricing. Worldspan TKG FAX Line Documentation -
        AWAITING REPRICING AUX SEGS REMOVED
    :cvar DUPLICATE_SEGMENT_REMOVED_REPRICE: Duplicate Segment removed,
        Reprice pricing. Worldspan TKG FAX Line Documentation - AWAITING
        REPRICING DUPE SEGS REMOVED
    :cvar UNKNOWN: Any other kind of Pricing Method which is not
        supported by API.
    :cvar GUARANTEED_USING_AGENCY_PRIVATE_FARE: Guaranteed fare using
        Agency private fare that was filed with a fare distributor.
    :cvar AUTO_RAPID_REPRICE: Auto priced by rapid reprice. Provider 1P
        FCI code 4 .
    """
    AUTO = "Auto"
    MANUAL = "Manual"
    MANUAL_FARE = "ManualFare"
    GUARANTEED = "Guaranteed"
    INVALID = "Invalid"
    RESTORED = "Restored"
    TICKETED = "Ticketed"
    UNTICKETABLE = "Unticketable"
    REPRICE = "Reprice"
    EXPIRED = "Expired"
    AUTO_USING_PRIVATE_FARE = "AutoUsingPrivateFare"
    GUARANTEED_USING_AIRLINE_PRIVATE_FARE = "GuaranteedUsingAirlinePrivateFare"
    AIRLINE = "Airline"
    AGENT_ASSISTED = "AgentAssisted"
    VERIFY_PRICE = "VerifyPrice"
    ALT_SEGMENT_REMOVED_REPRICE = "AltSegmentRemovedReprice"
    AUXILIARY_SEGMENT_REMOVED_REPRICE = "AuxiliarySegmentRemovedReprice"
    DUPLICATE_SEGMENT_REMOVED_REPRICE = "DuplicateSegmentRemovedReprice"
    UNKNOWN = "Unknown"
    GUARANTEED_USING_AGENCY_PRIVATE_FARE = "GuaranteedUsingAgencyPrivateFare"
    AUTO_RAPID_REPRICE = "AutoRapidReprice"


class TypePrivateFare(Enum):
    """List the types of private fares, Agency private fare, Airline private Fare
    and Unknown.

    Also, this enumaration list includes PrivateFare to indetify private
    fares for GDSs where we can not identify specific private fares.
    """
    UNKNOWN_TYPE = "UnknownType"
    PRIVATE_FARE = "PrivateFare"
    AGENCY_PRIVATE_FARE = "AgencyPrivateFare"
    AIRLINE_PRIVATE_FARE = "AirlinePrivateFare"


class TypePurposeCode(Enum):
    """
    List of valid Purpose Codes.

    :cvar BUSINESS: Business
    :cvar PLEASURE: Pleasure
    :cvar CHARTER_SERVICE: Charter Service
    """
    BUSINESS = "Business"
    PLEASURE = "Pleasure"
    CHARTER_SERVICE = "CharterService"


@dataclass
class TypeRestrictionData:
    """
    Restriction data.

    :ivar amount: Implies a flat amount to be adjusted. Negative value
        implies a discount.
    :ivar percentage: Implies an adjustment to be made on original
        price. Negative value implies a discount.
    :ivar name: Possible value for restriction name "Non-
        Refundable","Non-Changeable","Cancellation","Changes", "Non-
        Refundable marked with No Show","No Show","Non-Changeable marked
        with No Show"
    :ivar value: Possible value for restriction value "After
        Departure","Anytime" and "Before Departure"
    """
    class Meta:
        name = "typeRestrictionData"
        target_namespace = "http://www.travelport.com/schema/air_v52_0"

    amount: Optional[str] = field(
        default=None,
        metadata={
            "name": "Amount",
            "type": "Element",
            "namespace": "http://www.travelport.com/schema/air_v52_0",
        }
    )
    percentage: Optional[str] = field(
        default=None,
        metadata={
            "name": "Percentage",
            "type": "Element",
            "namespace": "http://www.travelport.com/schema/air_v52_0",
            "pattern": r"([0-9]{1,2}|100)\.[0-9]{1,2}",
        }
    )
    name: Optional[object] = field(
        default=None,
        metadata={
            "name": "Name",
            "type": "Attribute",
        }
    )
    value: Optional[object] = field(
        default=None,
        metadata={
            "name": "Value",
            "type": "Attribute",
        }
    )


class TypeRowLocation(Enum):
    """Facility Position with respect to a Row.

    Possible values are Rear, Front
    """
    REAR = "Rear"
    FRONT = "Front"


class TypeSeatAvailability(Enum):
    """
    Seat availability info of a seat map.
    """
    AVAILABLE = "Available"
    OCCUPIED = "Occupied"
    RESERVED = "Reserved"
    ADVANCED_BOARDING_PASS = "AdvancedBoardingPass"
    INTERLINE_CHECKIN = "InterlineCheckin"
    CODESHARE = "Codeshare"
    PROTECTED = "Protected"
    PARTNER_AIRLINE = "PartnerAirline"
    ADV_SEAT_SELECTION = "AdvSeatSelection"
    BLOCKED = "Blocked"
    EXTRA = "Extra"
    RBDRESTRICTION = "RBDRestriction"
    GROUP = "Group"
    NO_SEAT = "NoSeat"
    UNOCCUPIED_BUT_NOT_ELIGIBLE = "UnoccupiedButNotEligible"


@dataclass
class TypeSegmentRef:
    class Meta:
        name = "typeSegmentRef"
        target_namespace = "http://www.travelport.com/schema/air_v52_0"

    key: Optional[str] = field(
        default=None,
        metadata={
            "name": "Key",
            "type": "Attribute",
            "required": True,
        }
    )


class TypeStayUnit(Enum):
    """
    Units for the Length of Stay.
    """
    MINUTES = "Minutes"
    HOURS = "Hours"
    DAYS = "Days"
    MONTHS = "Months"
    MONDAY = "Monday"
    TUESDAY = "Tuesday"
    WEDNESDAY = "Wednesday"
    THURSDAY = "Thursday"
    FRIDAY = "Friday"
    SATURDAY = "Saturday"
    SUNDAY = "Sunday"


class TypeTcrstatus(Enum):
    UNKNOWN = "Unknown"
    CONFIRMED = "Confirmed"
    REFUNDED = "Refunded"
    EXCHANGED = "Exchanged"
    CANCELLED = "Cancelled"
    PENDING = "Pending"


@dataclass
class TypeTextElement:
    """
    :ivar value:
    :ivar type_value:
    :ivar language_code: ISO 639 two-character language codes are used
        to retrieve specific information in the requested language. For
        Rich Content and Branding, language codes ZH-HANT (Chinese
        Traditional), ZH-HANS (Chinese Simplified), FR-CA (French
        Canadian) and PT-BR (Portuguese Brazil) can also be used. For
        RCH, language codes ENGB, ENUS, DEDE, DECH can also be used.
        Only certain services support this attribute. Providers: ACH,
        RCH, 1G, 1V, 1P.
    """
    class Meta:
        name = "typeTextElement"
        target_namespace = "http://www.travelport.com/schema/air_v52_0"

    value: str = field(
        default="",
        metadata={
            "required": True,
        }
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "Type",
            "type": "Attribute",
            "required": True,
        }
    )
    language_code: Optional[str] = field(
        default=None,
        metadata={
            "name": "LanguageCode",
            "type": "Attribute",
        }
    )


@dataclass
class TypeTicketModifierAccountingType:
    """Ticketing Modifier used to add accounting
    - discount information."""
    class Meta:
        name = "typeTicketModifierAccountingType"
        target_namespace = "http://www.travelport.com/schema/air_v52_0"

    value: Optional[str] = field(
        default=None,
        metadata={
            "name": "Value",
            "type": "Element",
            "namespace": "http://www.travelport.com/schema/air_v52_0",
            "required": True,
        }
    )


@dataclass
class TypeTicketModifierAmountType:
    """
    Ticketing Modifier used to alter a fare amount before or during the ticketing
    operation.

    :ivar amount: Amount associated with a ticketing modifier
    """
    class Meta:
        name = "typeTicketModifierAmountType"
        target_namespace = "http://www.travelport.com/schema/air_v52_0"

    amount: Optional[str] = field(
        default=None,
        metadata={
            "name": "Amount",
            "type": "Attribute",
            "required": True,
        }
    )


@dataclass
class TypeTicketModifierPercentType:
    """
    Ticketing Modifier used to alter a fare percentage before or during the
    ticketing operation.

    :ivar percent: Percent associated with a ticketing modifier
    """
    class Meta:
        name = "typeTicketModifierPercentType"
        target_namespace = "http://www.travelport.com/schema/air_v52_0"

    percent: Optional[str] = field(
        default=None,
        metadata={
            "name": "Percent",
            "type": "Attribute",
            "required": True,
            "pattern": r"([0-9]{1,2}|100)\.[0-9]{1,2}",
        }
    )


@dataclass
class TypeTicketModifierValueType:
    """
    Ticketing Modifier used to add value discount information.

    :ivar value:
    :ivar net_fare_value: Treat the value as net fare discount
        information
    """
    class Meta:
        name = "typeTicketModifierValueType"
        target_namespace = "http://www.travelport.com/schema/air_v52_0"

    value: Optional[str] = field(
        default=None,
        metadata={
            "name": "Value",
            "type": "Element",
            "namespace": "http://www.travelport.com/schema/air_v52_0",
            "required": True,
        }
    )
    net_fare_value: Optional[bool] = field(
        default=None,
        metadata={
            "name": "NetFareValue",
            "type": "Attribute",
        }
    )


class TypeTripType(Enum):
    """
    Used in Low Fare Search to better target the results.
    """
    CHEAPEST = "Cheapest"
    QUICKEST = "Quickest"
    MOST_CONVENIENT = "MostConvenient"
    LEISURE = "Leisure"
    BUSINESS = "Business"
    LUXURY = "Luxury"
    PREFER_FIRST = "PreferFirst"
    BUSINESS_OR_FIRST = "BusinessOrFirst"
    NO_PENALTY = "NoPenalty"


@dataclass
class TypeUnitOfMeasure:
    """
    :ivar value:
    :ivar unit: Unit values would be lb,Lb,kg etc.
    """
    class Meta:
        name = "typeUnitOfMeasure"
        target_namespace = "http://www.travelport.com/schema/air_v52_0"

    value: Optional[float] = field(
        default=None,
        metadata={
            "name": "Value",
            "type": "Attribute",
        }
    )
    unit: Optional[str] = field(
        default=None,
        metadata={
            "name": "Unit",
            "type": "Attribute",
        }
    )


class TypeUnitWeight(Enum):
    """
    The available units of weight.
    """
    KILOGRAMS = "Kilograms"
    POUNDS = "Pounds"


class TypeVarianceIndicator(Enum):
    """
    Type code for Variance.
    """
    EARLY = "Early"
    LATE = "Late"


class TypeVarianceType(Enum):
    """
    Type code for Variance.
    """
    ACTUAL = "Actual"
    ESTIMATED = "Estimated"
    CANCELED = "Canceled"
    DIVERSION = "Diversion"


@dataclass
class Apisrequirements:
    """
    Specific details for APIS Requirements.

    :ivar document:
    :ivar key: Unique identifier for this APIS Requirements - use this
        key when a single APIS Requirements is shared by multiple
        elements.
    :ivar level: Applicability level of the Document. Required,
        Supported, API_Supported or Unknown
    :ivar gender_required:
    :ivar date_of_birth_required:
    :ivar required_documents: What are required documents for the APIS
        Requirement. One, FirstAndOneOther or All
    :ivar nationality_required: Nationality of the traveler is required
        for booking for some suppliers.
    """
    class Meta:
        name = "APISRequirements"
        namespace = "http://www.travelport.com/schema/air_v52_0"

    document: List[Document] = field(
        default_factory=list,
        metadata={
            "name": "Document",
            "type": "Element",
            "max_occurs": 999,
        }
    )
    key: Optional[object] = field(
        default=None,
        metadata={
            "name": "Key",
            "type": "Attribute",
        }
    )
    level: Optional[str] = field(
        default=None,
        metadata={
            "name": "Level",
            "type": "Attribute",
        }
    )
    gender_required: Optional[bool] = field(
        default=None,
        metadata={
            "name": "GenderRequired",
            "type": "Attribute",
        }
    )
    date_of_birth_required: Optional[bool] = field(
        default=None,
        metadata={
            "name": "DateOfBirthRequired",
            "type": "Attribute",
        }
    )
    required_documents: Optional[str] = field(
        default=None,
        metadata={
            "name": "RequiredDocuments",
            "type": "Attribute",
        }
    )
    nationality_required: Optional[bool] = field(
        default=None,
        metadata={
            "name": "NationalityRequired",
            "type": "Attribute",
        }
    )


@dataclass
class Affiliations:
    """
    Affiliations related for pre pay profiles.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    travel_arranger: List[TravelArranger] = field(
        default_factory=list,
        metadata={
            "name": "TravelArranger",
            "type": "Element",
            "max_occurs": 999,
        }
    )


@dataclass
class AirAvailInfo:
    """Matches class of service information with availability counts.

    Only provided on search results.

    :ivar booking_code_info:
    :ivar fare_token_info: Associates Fare with HostToken
    :ivar provider_code:
    :ivar host_token_ref:
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    booking_code_info: List[BookingCodeInfo] = field(
        default_factory=list,
        metadata={
            "name": "BookingCodeInfo",
            "type": "Element",
            "max_occurs": 999,
        }
    )
    fare_token_info: List["AirAvailInfo.FareTokenInfo"] = field(
        default_factory=list,
        metadata={
            "name": "FareTokenInfo",
            "type": "Element",
            "max_occurs": 999,
        }
    )
    provider_code: Optional[str] = field(
        default=None,
        metadata={
            "name": "ProviderCode",
            "type": "Attribute",
            "min_length": 2,
            "max_length": 5,
        }
    )
    host_token_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "HostTokenRef",
            "type": "Attribute",
        }
    )

    @dataclass
    class FareTokenInfo:
        fare_info_ref: Optional[str] = field(
            default=None,
            metadata={
                "name": "FareInfoRef",
                "type": "Attribute",
                "required": True,
            }
        )
        host_token_ref: Optional[str] = field(
            default=None,
            metadata={
                "name": "HostTokenRef",
                "type": "Attribute",
                "required": True,
            }
        )


@dataclass
class AirExchangeBundleTotal:
    """
    Total exchange and penalty information for one ticket number.

    :ivar air_exchange_info:
    :ivar penalty: Only used within an AirExchangeQuoteRsp
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    air_exchange_info: Optional[AirExchangeInfo] = field(
        default=None,
        metadata={
            "name": "AirExchangeInfo",
            "type": "Element",
            "namespace": "http://www.travelport.com/schema/common_v52_0",
            "required": True,
        }
    )
    penalty: List[CommonPenalty] = field(
        default_factory=list,
        metadata={
            "name": "Penalty",
            "type": "Element",
            "namespace": "http://www.travelport.com/schema/common_v52_0",
            "max_occurs": 999,
        }
    )


@dataclass
class AirExchangeModifiers:
    """
    Provides controls and switches for the Exchange process.

    :ivar contract_codes:
    :ivar booking_date:
    :ivar ticketing_date:
    :ivar account_code:
    :ivar ticket_designator:
    :ivar allow_penalty_fares:
    :ivar private_fares_only:
    :ivar universal_record_locator_code: Which UniversalRecord should
        this new reservation be applied to. If blank, then a new one is
        created.
    :ivar provider_locator_code: Which Provider reservation does this
        reservation get added to.
    :ivar provider_code: To be used with ProviderLocatorCode, which host
        the reservation being added to belongs to.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    contract_codes: Optional["AirExchangeModifiers.ContractCodes"] = field(
        default=None,
        metadata={
            "name": "ContractCodes",
            "type": "Element",
        }
    )
    booking_date: Optional[str] = field(
        default=None,
        metadata={
            "name": "BookingDate",
            "type": "Attribute",
        }
    )
    ticketing_date: Optional[str] = field(
        default=None,
        metadata={
            "name": "TicketingDate",
            "type": "Attribute",
        }
    )
    account_code: Optional[str] = field(
        default=None,
        metadata={
            "name": "AccountCode",
            "type": "Attribute",
        }
    )
    ticket_designator: Optional[str] = field(
        default=None,
        metadata={
            "name": "TicketDesignator",
            "type": "Attribute",
            "min_length": 0,
            "max_length": 20,
        }
    )
    allow_penalty_fares: bool = field(
        default=True,
        metadata={
            "name": "AllowPenaltyFares",
            "type": "Attribute",
        }
    )
    private_fares_only: bool = field(
        default=False,
        metadata={
            "name": "PrivateFaresOnly",
            "type": "Attribute",
        }
    )
    universal_record_locator_code: Optional[str] = field(
        default=None,
        metadata={
            "name": "UniversalRecordLocatorCode",
            "type": "Attribute",
            "min_length": 5,
            "max_length": 8,
        }
    )
    provider_locator_code: Optional[str] = field(
        default=None,
        metadata={
            "name": "ProviderLocatorCode",
            "type": "Attribute",
            "min_length": 5,
            "max_length": 8,
        }
    )
    provider_code: Optional[str] = field(
        default=None,
        metadata={
            "name": "ProviderCode",
            "type": "Attribute",
        }
    )

    @dataclass
    class ContractCodes:
        contract_code: List[ContractCode] = field(
            default_factory=list,
            metadata={
                "name": "ContractCode",
                "type": "Element",
                "min_occurs": 1,
                "max_occurs": 999,
            }
        )


@dataclass
class AirExchangeTicketBundle:
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    ticket_number: Optional[str] = field(
        default=None,
        metadata={
            "name": "TicketNumber",
            "type": "Element",
            "namespace": "http://www.travelport.com/schema/common_v52_0",
            "required": True,
            "min_length": 1,
            "max_length": 13,
        }
    )
    form_of_payment: List[FormOfPayment] = field(
        default_factory=list,
        metadata={
            "name": "FormOfPayment",
            "type": "Element",
            "namespace": "http://www.travelport.com/schema/common_v52_0",
            "max_occurs": 2,
        }
    )
    form_of_payment_ref: Optional[FormOfPaymentRef] = field(
        default=None,
        metadata={
            "name": "FormOfPaymentRef",
            "type": "Element",
            "namespace": "http://www.travelport.com/schema/common_v52_0",
        }
    )
    waiver_code: Optional[WaiverCode] = field(
        default=None,
        metadata={
            "name": "WaiverCode",
            "type": "Element",
        }
    )


@dataclass
class AirFareDiscount:
    """
    Fare Discounts.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    percentage: Optional[float] = field(
        default=None,
        metadata={
            "name": "Percentage",
            "type": "Attribute",
        }
    )
    amount: Optional[str] = field(
        default=None,
        metadata={
            "name": "Amount",
            "type": "Attribute",
        }
    )
    discount_method: Optional[TypeFareDiscount] = field(
        default=None,
        metadata={
            "name": "DiscountMethod",
            "type": "Attribute",
        }
    )


@dataclass
class AirFareRuleCategory:
    """
    A collection of fare rule category codes.

    :ivar category_code: The Category Code for Air Fare Rule.
    :ivar fare_info_ref:
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    category_code: List[TypeFareRuleCategoryCode] = field(
        default_factory=list,
        metadata={
            "name": "CategoryCode",
            "type": "Element",
            "min_occurs": 1,
            "max_occurs": 10,
        }
    )
    fare_info_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "FareInfoRef",
            "type": "Attribute",
        }
    )


@dataclass
class AirPricingAdjustment:
    """This is a container to adjust price of AirPricingInfo.

    Pass zero values to remove existing adjustment.

    :ivar adjustment:
    :ivar key: Key of AirPricingInfo from booking.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    adjustment: Optional[Adjustment] = field(
        default=None,
        metadata={
            "name": "Adjustment",
            "type": "Element",
            "required": True,
        }
    )
    key: Optional[str] = field(
        default=None,
        metadata={
            "name": "Key",
            "type": "Attribute",
            "required": True,
        }
    )


@dataclass
class AirPricingPayment:
    """AirPricing Payment information - used to
    associate a FormOfPayment withiin the UR with one or more
    AirPricingInfos"""
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    payment: List[Payment] = field(
        default_factory=list,
        metadata={
            "name": "Payment",
            "type": "Element",
            "namespace": "http://www.travelport.com/schema/common_v52_0",
            "max_occurs": 999,
        }
    )
    form_of_payment: List[FormOfPayment] = field(
        default_factory=list,
        metadata={
            "name": "FormOfPayment",
            "type": "Element",
            "namespace": "http://www.travelport.com/schema/common_v52_0",
            "max_occurs": 999,
        }
    )
    form_of_payment_ref: Optional[FormOfPaymentRef] = field(
        default=None,
        metadata={
            "name": "FormOfPaymentRef",
            "type": "Element",
            "namespace": "http://www.travelport.com/schema/common_v52_0",
        }
    )
    air_pricing_info_ref: List[AirPricingInfoRef] = field(
        default_factory=list,
        metadata={
            "name": "AirPricingInfoRef",
            "type": "Element",
            "min_occurs": 1,
            "max_occurs": 999,
        }
    )


@dataclass
class AirRefundInfo:
    """
    Provides results of a refund quote.

    :ivar refund_remark:
    :ivar refund_amount:
    :ivar retain_amount:
    :ivar refund_fee: Refund fee for ACH/1P
    :ivar refundable_taxes: 1P - None : All taxes are not refundable.
        Unknown : Refundability of taxes are not known.
    :ivar filed_currency: 1P  Currency of filed CAT33 refund fee
    :ivar conversion_rate: 1P - Currency conversion rate used for
        conversion between FiledCurrency and PCC base currency in which
        the response is returned.
    :ivar taxes: 1P - The total value of taxes.
    :ivar original_ticket_total: 1P - The original ticket amount.
    :ivar forfeit_amount:
    :ivar retain: This indicates whether any amount is retained by the
        provider.
    :ivar refund: This indicates whether carrier/host supports refund
        for the correcponding pnr.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    refund_remark: List[RefundRemark] = field(
        default_factory=list,
        metadata={
            "name": "RefundRemark",
            "type": "Element",
            "namespace": "http://www.travelport.com/schema/common_v52_0",
            "max_occurs": 999,
        }
    )
    refund_amount: Optional[str] = field(
        default=None,
        metadata={
            "name": "RefundAmount",
            "type": "Attribute",
        }
    )
    retain_amount: Optional[str] = field(
        default=None,
        metadata={
            "name": "RetainAmount",
            "type": "Attribute",
        }
    )
    refund_fee: Optional[str] = field(
        default=None,
        metadata={
            "name": "RefundFee",
            "type": "Attribute",
        }
    )
    refundable_taxes: Optional[str] = field(
        default=None,
        metadata={
            "name": "RefundableTaxes",
            "type": "Attribute",
        }
    )
    filed_currency: Optional[str] = field(
        default=None,
        metadata={
            "name": "FiledCurrency",
            "type": "Attribute",
            "length": 3,
        }
    )
    conversion_rate: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "ConversionRate",
            "type": "Attribute",
        }
    )
    taxes: Optional[str] = field(
        default=None,
        metadata={
            "name": "Taxes",
            "type": "Attribute",
        }
    )
    original_ticket_total: Optional[str] = field(
        default=None,
        metadata={
            "name": "OriginalTicketTotal",
            "type": "Attribute",
        }
    )
    forfeit_amount: Optional[str] = field(
        default=None,
        metadata={
            "name": "ForfeitAmount",
            "type": "Attribute",
        }
    )
    retain: bool = field(
        default=False,
        metadata={
            "name": "Retain",
            "type": "Attribute",
        }
    )
    refund: bool = field(
        default=False,
        metadata={
            "name": "Refund",
            "type": "Attribute",
        }
    )


@dataclass
class AirSegmentDetails:
    """
    An Air marketable travel segment.

    :ivar passenger_details_ref:
    :ivar brand_id:
    :ivar booking_code_list: Lists classes of service and their counts
        separated by delimiter |.
    :ivar key:
    :ivar provider_code:
    :ivar carrier:
    :ivar origin: The IATA location code for this origination of this
        entity.
    :ivar destination: The IATA location code for this destination of
        this entity.
    :ivar departure_time: The date and time at which this entity
        departs. This does not include time zone information since it
        can be derived from the origin location.
    :ivar arrival_time: The date and time at which this entity arrives
        at the destination. This does not include time zone information
        since it can be derived from the origin location.
    :ivar equipment:
    :ivar class_of_service:
    :ivar cabin_class:
    :ivar operating_carrier: The actual carrier that is operating the
        flight.
    :ivar flight_number: Flight Number for the Search Leg Detail.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    passenger_details_ref: List[PassengerDetailsRef] = field(
        default_factory=list,
        metadata={
            "name": "PassengerDetailsRef",
            "type": "Element",
            "min_occurs": 1,
            "max_occurs": 999,
        }
    )
    brand_id: List[BrandId] = field(
        default_factory=list,
        metadata={
            "name": "BrandID",
            "type": "Element",
            "max_occurs": 99,
        }
    )
    booking_code_list: Optional[str] = field(
        default=None,
        metadata={
            "name": "BookingCodeList",
            "type": "Element",
        }
    )
    key: Optional[str] = field(
        default=None,
        metadata={
            "name": "Key",
            "type": "Attribute",
            "required": True,
        }
    )
    provider_code: Optional[str] = field(
        default=None,
        metadata={
            "name": "ProviderCode",
            "type": "Attribute",
            "required": True,
            "min_length": 2,
            "max_length": 5,
        }
    )
    carrier: Optional[str] = field(
        default=None,
        metadata={
            "name": "Carrier",
            "type": "Attribute",
            "required": True,
            "length": 2,
        }
    )
    origin: Optional[str] = field(
        default=None,
        metadata={
            "name": "Origin",
            "type": "Attribute",
            "required": True,
            "length": 3,
            "white_space": "collapse",
        }
    )
    destination: Optional[str] = field(
        default=None,
        metadata={
            "name": "Destination",
            "type": "Attribute",
            "required": True,
            "length": 3,
            "white_space": "collapse",
        }
    )
    departure_time: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "DepartureTime",
            "type": "Attribute",
            "required": True,
        }
    )
    arrival_time: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "ArrivalTime",
            "type": "Attribute",
            "required": True,
        }
    )
    equipment: Optional[str] = field(
        default=None,
        metadata={
            "name": "Equipment",
            "type": "Attribute",
            "length": 3,
        }
    )
    class_of_service: Optional[str] = field(
        default=None,
        metadata={
            "name": "ClassOfService",
            "type": "Attribute",
            "min_length": 1,
            "max_length": 2,
        }
    )
    cabin_class: Optional[str] = field(
        default=None,
        metadata={
            "name": "CabinClass",
            "type": "Attribute",
        }
    )
    operating_carrier: Optional[str] = field(
        default=None,
        metadata={
            "name": "OperatingCarrier",
            "type": "Attribute",
            "length": 2,
        }
    )
    flight_number: Optional[str] = field(
        default=None,
        metadata={
            "name": "FlightNumber",
            "type": "Attribute",
            "required": True,
            "max_length": 5,
        }
    )


@dataclass
class AirSegmentPricingModifiers:
    """Specifies modifiers that a particular segment should be priced in.

    If this is used, then there must be one for each AirSegment in the
    AirItinerary.

    :ivar permitted_booking_codes:
    :ivar air_segment_ref:
    :ivar cabin_class:
    :ivar account_code:
    :ivar prohibit_advance_purchase_fares:
    :ivar prohibit_non_refundable_fares:
    :ivar prohibit_penalty_fares:
    :ivar fare_basis_code: The fare basis code to be used for pricing.
    :ivar fare_break: Fare break point modifier to instruct Fares where
        it should or should not break the fare.
    :ivar connection_indicator: ConnectionIndicator attribute will be
        used to map connection indicators AvailabilityAndPricing,
        TurnAround and Stopover. This attribute is for Wordspan/1P only.
    :ivar brand_tier: Modifier to price by specific brand tier number.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    permitted_booking_codes: Optional["AirSegmentPricingModifiers.PermittedBookingCodes"] = field(
        default=None,
        metadata={
            "name": "PermittedBookingCodes",
            "type": "Element",
        }
    )
    air_segment_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "AirSegmentRef",
            "type": "Attribute",
        }
    )
    cabin_class: Optional[str] = field(
        default=None,
        metadata={
            "name": "CabinClass",
            "type": "Attribute",
        }
    )
    account_code: Optional[str] = field(
        default=None,
        metadata={
            "name": "AccountCode",
            "type": "Attribute",
        }
    )
    prohibit_advance_purchase_fares: bool = field(
        default=False,
        metadata={
            "name": "ProhibitAdvancePurchaseFares",
            "type": "Attribute",
        }
    )
    prohibit_non_refundable_fares: bool = field(
        default=False,
        metadata={
            "name": "ProhibitNonRefundableFares",
            "type": "Attribute",
        }
    )
    prohibit_penalty_fares: bool = field(
        default=False,
        metadata={
            "name": "ProhibitPenaltyFares",
            "type": "Attribute",
        }
    )
    fare_basis_code: Optional[str] = field(
        default=None,
        metadata={
            "name": "FareBasisCode",
            "type": "Attribute",
        }
    )
    fare_break: Optional[TypeFareBreak] = field(
        default=None,
        metadata={
            "name": "FareBreak",
            "type": "Attribute",
        }
    )
    connection_indicator: Optional[TypeConnectionIndicator] = field(
        default=None,
        metadata={
            "name": "ConnectionIndicator",
            "type": "Attribute",
        }
    )
    brand_tier: Optional[str] = field(
        default=None,
        metadata={
            "name": "BrandTier",
            "type": "Attribute",
            "min_length": 1,
            "max_length": 10,
        }
    )

    @dataclass
    class PermittedBookingCodes:
        booking_code: List[BookingCode] = field(
            default_factory=list,
            metadata={
                "name": "BookingCode",
                "type": "Element",
                "min_occurs": 1,
                "max_occurs": 999,
            }
        )


@dataclass
class AirTicketingModifiers:
    """
    Modifiers used during ticketing.

    :ivar document_modifiers:
    :ivar air_pricing_info_ref:
    :ivar tour_code: Allows an agency to modify the tour code
        information during ticket issuance. Providers supported:
        Worldspan.
    :ivar ticket_endorsement: Allows an agency to add user defined
        ticketing endorsements in the ticket. Providers supported:
        Worldspan.
    :ivar commission: Allows an agency to add the commission to a new or
        different commission rate which will be applied at time of
        ticketing. The commission Modifier allows the user specify how
        the commission change is to applied. Providers supported:
        Worldspan.
    :ivar form_of_payment: FormOfPayment information to be used as
        ticketing modifier at the time of ticketing. Providers
        supported: Galileo, Apollo, Worldspan.
    :ivar credit_card_auth: CreditCardAuth information to be used as
        ticketing modifier at the time of ticketing. Providers
        supported: Galileo, Apollo, Worldspan.
    :ivar payment: Provide Payment for FOP. Providers supported:
        Galileo, Apollo, Worldspan.
    :ivar plating_carrier: The Plating Carrier used for this ticket
    :ivar ticketed_fare_override: It is a modifier to allow re-issuance
        of tickets for stored fares which are already ticketed.
        Providers supported are 1P
    :ivar suppress_tax_and_fee: Allow to suppress Taxand Fee in
        ticketing response.Providers supported: Worldspan.
    :ivar no_comparison_sfq: 1P - Set to "true" to include the no
        comparison overide #NC to override the existing SFQ and issue
        the ticket. Only valid for AirTicketingReq, not valid  for
        AirExchangeTicketingReq.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    document_modifiers: Optional[DocumentModifiers] = field(
        default=None,
        metadata={
            "name": "DocumentModifiers",
            "type": "Element",
        }
    )
    air_pricing_info_ref: List[AirPricingInfoRef] = field(
        default_factory=list,
        metadata={
            "name": "AirPricingInfoRef",
            "type": "Element",
            "max_occurs": 999,
        }
    )
    tour_code: Optional[TourCode] = field(
        default=None,
        metadata={
            "name": "TourCode",
            "type": "Element",
        }
    )
    ticket_endorsement: List[TicketEndorsement] = field(
        default_factory=list,
        metadata={
            "name": "TicketEndorsement",
            "type": "Element",
            "max_occurs": 3,
        }
    )
    commission: Optional[Commission] = field(
        default=None,
        metadata={
            "name": "Commission",
            "type": "Element",
            "namespace": "http://www.travelport.com/schema/common_v52_0",
        }
    )
    form_of_payment: List[FormOfPayment] = field(
        default_factory=list,
        metadata={
            "name": "FormOfPayment",
            "type": "Element",
            "namespace": "http://www.travelport.com/schema/common_v52_0",
            "max_occurs": 999,
        }
    )
    credit_card_auth: List[CreditCardAuth] = field(
        default_factory=list,
        metadata={
            "name": "CreditCardAuth",
            "type": "Element",
            "namespace": "http://www.travelport.com/schema/common_v52_0",
            "max_occurs": 999,
        }
    )
    payment: List[Payment] = field(
        default_factory=list,
        metadata={
            "name": "Payment",
            "type": "Element",
            "namespace": "http://www.travelport.com/schema/common_v52_0",
            "max_occurs": 999,
        }
    )
    plating_carrier: Optional[str] = field(
        default=None,
        metadata={
            "name": "PlatingCarrier",
            "type": "Attribute",
            "length": 2,
        }
    )
    ticketed_fare_override: bool = field(
        default=False,
        metadata={
            "name": "TicketedFareOverride",
            "type": "Attribute",
        }
    )
    suppress_tax_and_fee: bool = field(
        default=False,
        metadata={
            "name": "SuppressTaxAndFee",
            "type": "Attribute",
        }
    )
    no_comparison_sfq: bool = field(
        default=False,
        metadata={
            "name": "NoComparisonSFQ",
            "type": "Attribute",
        }
    )


@dataclass
class AlternateLocationDistance:
    """
    Information about the Original Search Airport to Alternate Search Airport.

    :ivar distance:
    :ivar key:
    :ivar search_location: The Searching City or Airport specified in
        the Request.
    :ivar alternate_location: The nearby Alternate City or Airport to
        SearchLocation.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    distance: Optional[Distance] = field(
        default=None,
        metadata={
            "name": "Distance",
            "type": "Element",
            "namespace": "http://www.travelport.com/schema/common_v52_0",
            "required": True,
        }
    )
    key: Optional[str] = field(
        default=None,
        metadata={
            "name": "Key",
            "type": "Attribute",
            "required": True,
        }
    )
    search_location: Optional[str] = field(
        default=None,
        metadata={
            "name": "SearchLocation",
            "type": "Attribute",
            "required": True,
            "length": 3,
            "white_space": "collapse",
        }
    )
    alternate_location: Optional[str] = field(
        default=None,
        metadata={
            "name": "AlternateLocation",
            "type": "Attribute",
            "required": True,
            "length": 3,
            "white_space": "collapse",
        }
    )


@dataclass
class ApplicableSegment(TypeApplicableSegment):
    """
    Applicable air segment.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"


@dataclass
class AssociatedRemark(TypeAssociatedRemarkWithSegmentRef):
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"


@dataclass
class AutoSeatAssignment:
    """
    Request object used to request seats automatically by seat type.

    :ivar segment_ref: The segment that this assignment belongs to
    :ivar smoking: Indicates that the requested seat type should be a
        smoking seat.
    :ivar seat_type: The type of seat that is requested
    :ivar group: Indicates that this seat request is for group seating
        for all passengers. If no SegmentRef is included, group seating
        will be requested for all segments.
    :ivar booking_traveler_ref: The booking traveler that this seat
        assignment is for. If not entered, this applies to the primary
        booking traveler and other passengers are adjacent.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    segment_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "SegmentRef",
            "type": "Attribute",
        }
    )
    smoking: bool = field(
        default=False,
        metadata={
            "name": "Smoking",
            "type": "Attribute",
        }
    )
    seat_type: Optional[TypeReqSeat] = field(
        default=None,
        metadata={
            "name": "SeatType",
            "type": "Attribute",
            "required": True,
        }
    )
    group: bool = field(
        default=False,
        metadata={
            "name": "Group",
            "type": "Attribute",
        }
    )
    booking_traveler_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "BookingTravelerRef",
            "type": "Attribute",
        }
    )


@dataclass
class AvailableDiscount:
    """
    :ivar loyalty_program: Customer Loyalty Program Detail.
    :ivar amount:
    :ivar percent:
    :ivar description:
    :ivar discount_qualifier:
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    loyalty_program: List[LoyaltyProgram] = field(
        default_factory=list,
        metadata={
            "name": "LoyaltyProgram",
            "type": "Element",
            "namespace": "http://www.travelport.com/schema/common_v52_0",
            "max_occurs": 999,
        }
    )
    amount: Optional[str] = field(
        default=None,
        metadata={
            "name": "Amount",
            "type": "Attribute",
        }
    )
    percent: Optional[str] = field(
        default=None,
        metadata={
            "name": "Percent",
            "type": "Attribute",
            "pattern": r"([0-9]{1,2}|100)\.[0-9]{1,2}",
        }
    )
    description: Optional[str] = field(
        default=None,
        metadata={
            "name": "Description",
            "type": "Attribute",
        }
    )
    discount_qualifier: Optional[str] = field(
        default=None,
        metadata={
            "name": "DiscountQualifier",
            "type": "Attribute",
        }
    )


@dataclass
class AvailableSsr:
    """
    A wrapper for all the information regarding each of the available SSR.

    :ivar ssr:
    :ivar ssrrules: Holds the rules for selecting the SSR in the
        itinerary
    :ivar industry_standard_ssr:
    """
    class Meta:
        name = "AvailableSSR"
        namespace = "http://www.travelport.com/schema/air_v52_0"

    ssr: List[Ssr] = field(
        default_factory=list,
        metadata={
            "name": "SSR",
            "type": "Element",
            "namespace": "http://www.travelport.com/schema/common_v52_0",
            "max_occurs": 999,
        }
    )
    ssrrules: List[ServiceRuleType] = field(
        default_factory=list,
        metadata={
            "name": "SSRRules",
            "type": "Element",
            "max_occurs": 999,
        }
    )
    industry_standard_ssr: List[IndustryStandardSsr] = field(
        default_factory=list,
        metadata={
            "name": "IndustryStandardSSR",
            "type": "Element",
            "namespace": "http://www.travelport.com/schema/common_v52_0",
            "max_occurs": 999,
        }
    )


@dataclass
class BackOfficeHandOff:
    """
    Allows an agency to select the back office documents and also route to
    different host to produce for the itinerary.

    :ivar type_value: The type of back office document,valid options are
        Accounting,Global,NonAccounting,NonAccountingRemote,Dual.
    :ivar location: This is required for NonAccountingRemote,Dual and
        Global type back office.
    :ivar pseudo_city_code: The PCC of the host system where it would be
        routed.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    type_value: Optional[TypeBackOffice] = field(
        default=None,
        metadata={
            "name": "Type",
            "type": "Attribute",
            "required": True,
        }
    )
    location: Optional[str] = field(
        default=None,
        metadata={
            "name": "Location",
            "type": "Attribute",
        }
    )
    pseudo_city_code: Optional[str] = field(
        default=None,
        metadata={
            "name": "PseudoCityCode",
            "type": "Attribute",
            "min_length": 2,
            "max_length": 10,
        }
    )


@dataclass
class BaseBaggageAllowanceInfo:
    """This contains common elements that are used for Baggage Allowance info,
    carry-on allowance info and embargo Info.

    Supported providers are 1V/1G/1P

    :ivar urlinfo: Contains the text and URL information as published by
        carrier.
    :ivar text_info: Text information as published by carrier.
    :ivar origin:
    :ivar destination:
    :ivar carrier:
    """
    class Meta:
        target_namespace = "http://www.travelport.com/schema/air_v52_0"

    urlinfo: List[Urlinfo] = field(
        default_factory=list,
        metadata={
            "name": "URLInfo",
            "type": "Element",
            "namespace": "http://www.travelport.com/schema/air_v52_0",
            "max_occurs": 999,
        }
    )
    text_info: List[TextInfo] = field(
        default_factory=list,
        metadata={
            "name": "TextInfo",
            "type": "Element",
            "namespace": "http://www.travelport.com/schema/air_v52_0",
            "max_occurs": 999,
        }
    )
    origin: Optional[str] = field(
        default=None,
        metadata={
            "name": "Origin",
            "type": "Attribute",
            "length": 3,
            "white_space": "collapse",
        }
    )
    destination: Optional[str] = field(
        default=None,
        metadata={
            "name": "Destination",
            "type": "Attribute",
            "length": 3,
            "white_space": "collapse",
        }
    )
    carrier: Optional[str] = field(
        default=None,
        metadata={
            "name": "Carrier",
            "type": "Attribute",
            "length": 2,
        }
    )


@dataclass
class BillingDetailItem:
    """
    The Billing Details Information.

    :ivar name: Detailed Billing Information Name(e.g Personal ID,
        Account Number)
    :ivar data_type: Detailed Billing Information DataType (Alpha,
        Numeric, etc.)
    :ivar min_length: Detailed Billing Information Minimum Length.
    :ivar max_length: Detailed Billing Information Maximum Length.
    :ivar value: Detailed Billing Information Value
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    name: Optional[TypeBillingDetailsName] = field(
        default=None,
        metadata={
            "name": "Name",
            "type": "Attribute",
            "required": True,
        }
    )
    data_type: Optional[TypeBillingDetailsDataType] = field(
        default=None,
        metadata={
            "name": "DataType",
            "type": "Attribute",
            "required": True,
        }
    )
    min_length: Optional[str] = field(
        default=None,
        metadata={
            "name": "MinLength",
            "type": "Attribute",
            "required": True,
        }
    )
    max_length: Optional[str] = field(
        default=None,
        metadata={
            "name": "MaxLength",
            "type": "Attribute",
            "required": True,
        }
    )
    value: Optional[str] = field(
        default=None,
        metadata={
            "name": "Value",
            "type": "Attribute",
        }
    )


@dataclass
class BundledService:
    """
    Displays the services bundled together.

    :ivar carrier: Carrier the service is applicable.
    :ivar carrier_sub_code: Carrier sub code. True means the carrier
        used their own sub code. False means the carrier used an ATPCO
        sub code
    :ivar service_type: The type of service or what the service is used
        for, e.g. F type is flight type, meaning the service is used on
        a flight
    :ivar service_sub_code: The sub code of the service, e.g. OAA for
        Pre paid baggage
    :ivar name: Name of the bundled service.
    :ivar booking: Booking method for the bundled service, e..g SSR.
    :ivar occurrence: How many of the service are included in the
        bundled service.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    carrier: Optional[str] = field(
        default=None,
        metadata={
            "name": "Carrier",
            "type": "Attribute",
            "length": 2,
        }
    )
    carrier_sub_code: Optional[bool] = field(
        default=None,
        metadata={
            "name": "CarrierSubCode",
            "type": "Attribute",
        }
    )
    service_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "ServiceType",
            "type": "Attribute",
        }
    )
    service_sub_code: Optional[str] = field(
        default=None,
        metadata={
            "name": "ServiceSubCode",
            "type": "Attribute",
        }
    )
    name: Optional[str] = field(
        default=None,
        metadata={
            "name": "Name",
            "type": "Attribute",
        }
    )
    booking: Optional[TypeBooking] = field(
        default=None,
        metadata={
            "name": "Booking",
            "type": "Attribute",
        }
    )
    occurrence: Optional[int] = field(
        default=None,
        metadata={
            "name": "Occurrence",
            "type": "Attribute",
        }
    )


@dataclass
class Chgtype:
    """
    PenFee list will be populated.
    """
    class Meta:
        name = "CHGType"
        target_namespace = "http://www.travelport.com/schema/air_v52_0"

    pen_fee: List[PenFeeType] = field(
        default_factory=list,
        metadata={
            "name": "PenFee",
            "type": "Element",
            "namespace": "http://www.travelport.com/schema/air_v52_0",
            "max_occurs": 2,
        }
    )


@dataclass
class Co2Emissions:
    """
    The carbon emissions produced by the journey.

    :ivar co2_emission:
    :ivar total_value: The total CO2 emission value for the journey
    :ivar unit: The unit used in the TotalValue attribute
    :ivar category: The category name of the type of cabin, either
        Economy or Premium.  Premium is any cabin that is not considered
        Economy
    :ivar source: The source responsible for the values
    """
    class Meta:
        name = "CO2Emissions"
        namespace = "http://www.travelport.com/schema/air_v52_0"

    co2_emission: List[Co2Emission] = field(
        default_factory=list,
        metadata={
            "name": "CO2Emission",
            "type": "Element",
            "max_occurs": 99,
        }
    )
    total_value: Optional[float] = field(
        default=None,
        metadata={
            "name": "TotalValue",
            "type": "Attribute",
        }
    )
    unit: Optional[str] = field(
        default=None,
        metadata={
            "name": "Unit",
            "type": "Attribute",
            "min_length": 1,
            "max_length": 64,
        }
    )
    category: Optional[str] = field(
        default=None,
        metadata={
            "name": "Category",
            "type": "Attribute",
            "min_length": 1,
            "max_length": 64,
        }
    )
    source: Optional[str] = field(
        default=None,
        metadata={
            "name": "Source",
            "type": "Attribute",
            "min_length": 1,
            "max_length": 64,
        }
    )


@dataclass
class CategoryDetailsType:
    """
    :ivar category_details: For each category Details of Structured Fare
        Rules
    :ivar value:
    """
    class Meta:
        target_namespace = "http://www.travelport.com/schema/air_v52_0"

    category_details: List[ValueDetails] = field(
        default_factory=list,
        metadata={
            "name": "CategoryDetails",
            "type": "Element",
            "namespace": "http://www.travelport.com/schema/air_v52_0",
            "max_occurs": 99,
        }
    )
    value: Optional[str] = field(
        default=None,
        metadata={
            "name": "Value",
            "type": "Attribute",
            "required": True,
        }
    )


@dataclass
class Characteristic:
    """
    :ivar value:
    :ivar position:
    :ivar row_location:
    :ivar padiscode: Industry standard code that defines seat and row
        characteristic.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    value: Optional[str] = field(
        default=None,
        metadata={
            "name": "Value",
            "type": "Attribute",
            "required": True,
        }
    )
    position: Optional[TypePosition] = field(
        default=None,
        metadata={
            "name": "Position",
            "type": "Attribute",
        }
    )
    row_location: Optional[TypeRowLocation] = field(
        default=None,
        metadata={
            "name": "RowLocation",
            "type": "Attribute",
        }
    )
    padiscode: Optional[str] = field(
        default=None,
        metadata={
            "name": "PADISCode",
            "type": "Attribute",
            "min_length": 1,
            "max_length": 99,
        }
    )


@dataclass
class ChargesRules:
    """
    Fare Reference associated with the BookingRules.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    voluntary_changes: List["ChargesRules.VoluntaryChanges"] = field(
        default_factory=list,
        metadata={
            "name": "VoluntaryChanges",
            "type": "Element",
            "max_occurs": 999,
        }
    )
    voluntary_refunds: List["ChargesRules.VoluntaryRefunds"] = field(
        default_factory=list,
        metadata={
            "name": "VoluntaryRefunds",
            "type": "Element",
            "max_occurs": 999,
        }
    )

    @dataclass
    class VoluntaryChanges:
        penalty: Optional[Penalty] = field(
            default=None,
            metadata={
                "name": "Penalty",
                "type": "Element",
            }
        )
        vol_change_ind: Optional[bool] = field(
            default=None,
            metadata={
                "name": "VolChangeInd",
                "type": "Attribute",
            }
        )

    @dataclass
    class VoluntaryRefunds:
        penalty: Optional[Penalty] = field(
            default=None,
            metadata={
                "name": "Penalty",
                "type": "Element",
            }
        )
        vol_change_ind: Optional[bool] = field(
            default=None,
            metadata={
                "name": "VolChangeInd",
                "type": "Attribute",
            }
        )


@dataclass
class ConjunctedTicketInfo:
    """
    :ivar number:
    :ivar iatanumber:
    :ivar ticket_issue_date:
    :ivar ticketing_agent_sign_on:
    :ivar country_code: Contains Ticketed PCC’s Country code.
    :ivar status:
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    number: Optional[str] = field(
        default=None,
        metadata={
            "name": "Number",
            "type": "Attribute",
            "required": True,
        }
    )
    iatanumber: Optional[str] = field(
        default=None,
        metadata={
            "name": "IATANumber",
            "type": "Attribute",
            "max_length": 8,
        }
    )
    ticket_issue_date: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "TicketIssueDate",
            "type": "Attribute",
        }
    )
    ticketing_agent_sign_on: Optional[str] = field(
        default=None,
        metadata={
            "name": "TicketingAgentSignOn",
            "type": "Attribute",
            "max_length": 9,
        }
    )
    country_code: Optional[str] = field(
        default=None,
        metadata={
            "name": "CountryCode",
            "type": "Attribute",
            "length": 2,
        }
    )
    status: Optional[TypeTicketStatus] = field(
        default=None,
        metadata={
            "name": "Status",
            "type": "Attribute",
            "required": True,
        }
    )


@dataclass
class Coupon:
    """
    The flight coupon that resulted from the ticketing operation.

    :ivar ticket_designator:
    :ivar key:
    :ivar coupon_number: The sequential number of this coupon.
    :ivar operating_carrier: The true carrier.
    :ivar operating_flight_number: The true carrier's flight number.
    :ivar marketing_carrier: If codeshare applies to this, this is the
        marketing carrier (as opposed to the operating carrier).
    :ivar marketing_flight_number: If codeshare applies to this, this is
        the marketing flight number (as opposed to the operating flight
        number).
    :ivar origin: Returns the airport or city code that defines the
        origin market for this fare.
    :ivar destination: Returns the airport or city code that defines the
        destination market for this fare.
    :ivar departure_time: The date and time at which this entity
        departs. This does not include time zone information since it
        can be derived from the origin location. In case of open segment
        this will not be returned.
    :ivar arrival_time: The date and time at which this entity arrives
        at the destination. This does not include time zone information
        since it can be derived from the origin location.
    :ivar stopover_code: Stopover code - indicator that stopover is
        allowed at Origin Airport or City.
    :ivar booking_class: Booked fare class for coupon.
    :ivar fare_basis: The fare basis code for this fare
    :ivar not_valid_before: Fare not valid before this date.
    :ivar not_valid_after: Fare not valid after this date.
    :ivar status: The status of this coupon returend from host is mapped
        as follows Code="A" Status="Airport Controlled" Code="C"
        Status="Checked In" Code="F" Status="Flown/Used" Code="L"
        Status="Boarded/Lifted" Code="O" Status="Open" Code="P"
        Status="Printed" Code="R" Status="Refunded" Code="E"
        Status="Exchanged" Code="V" Status="Void" Code="Z"
        Status="Archived/Carrier Modified" Code="U" Status="Unavailable"
        Code="S" Status="Suspended" Code="I" Status="Irregular Ops"
        Code="D" Status="Deleted/Removed" Code="X" Status="Unknown"
    :ivar segment_group: Indicates the grouping in which this segment
        resides based on Origin/Destination pairs in itinerary
    :ivar marriage_group: Airline Marrraige group indicator
    :ivar el_stat: This attribute is used to show the action results of
        an element. Possible values are "A" (when elements have been
        added to the UR) and "M" (when existing elements have been
        modified). Response only.
    :ivar key_override: If a duplicate key is found where we are adding
        elements in some cases like URAdd, then instead of erroring out
        set this attribute to true.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    ticket_designator: List[TicketDesignator] = field(
        default_factory=list,
        metadata={
            "name": "TicketDesignator",
            "type": "Element",
            "max_occurs": 999,
        }
    )
    key: Optional[str] = field(
        default=None,
        metadata={
            "name": "Key",
            "type": "Attribute",
        }
    )
    coupon_number: Optional[int] = field(
        default=None,
        metadata={
            "name": "CouponNumber",
            "type": "Attribute",
        }
    )
    operating_carrier: Optional[str] = field(
        default=None,
        metadata={
            "name": "OperatingCarrier",
            "type": "Attribute",
            "length": 2,
        }
    )
    operating_flight_number: Optional[str] = field(
        default=None,
        metadata={
            "name": "OperatingFlightNumber",
            "type": "Attribute",
            "max_length": 5,
        }
    )
    marketing_carrier: Optional[str] = field(
        default=None,
        metadata={
            "name": "MarketingCarrier",
            "type": "Attribute",
            "length": 2,
        }
    )
    marketing_flight_number: Optional[str] = field(
        default=None,
        metadata={
            "name": "MarketingFlightNumber",
            "type": "Attribute",
            "max_length": 5,
        }
    )
    origin: Optional[str] = field(
        default=None,
        metadata={
            "name": "Origin",
            "type": "Attribute",
            "required": True,
            "length": 3,
            "white_space": "collapse",
        }
    )
    destination: Optional[str] = field(
        default=None,
        metadata={
            "name": "Destination",
            "type": "Attribute",
            "required": True,
            "length": 3,
            "white_space": "collapse",
        }
    )
    departure_time: Optional[str] = field(
        default=None,
        metadata={
            "name": "DepartureTime",
            "type": "Attribute",
        }
    )
    arrival_time: Optional[str] = field(
        default=None,
        metadata={
            "name": "ArrivalTime",
            "type": "Attribute",
        }
    )
    stopover_code: Optional[bool] = field(
        default=None,
        metadata={
            "name": "StopoverCode",
            "type": "Attribute",
            "required": True,
        }
    )
    booking_class: Optional[str] = field(
        default=None,
        metadata={
            "name": "BookingClass",
            "type": "Attribute",
            "required": True,
            "max_length": 2,
        }
    )
    fare_basis: Optional[str] = field(
        default=None,
        metadata={
            "name": "FareBasis",
            "type": "Attribute",
            "required": True,
        }
    )
    not_valid_before: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "NotValidBefore",
            "type": "Attribute",
        }
    )
    not_valid_after: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "NotValidAfter",
            "type": "Attribute",
        }
    )
    status: Optional[str] = field(
        default=None,
        metadata={
            "name": "Status",
            "type": "Attribute",
            "required": True,
            "max_length": 1,
        }
    )
    segment_group: Optional[int] = field(
        default=None,
        metadata={
            "name": "SegmentGroup",
            "type": "Attribute",
        }
    )
    marriage_group: Optional[int] = field(
        default=None,
        metadata={
            "name": "MarriageGroup",
            "type": "Attribute",
        }
    )
    el_stat: Optional[TypeElementStatus] = field(
        default=None,
        metadata={
            "name": "ElStat",
            "type": "Attribute",
        }
    )
    key_override: Optional[bool] = field(
        default=None,
        metadata={
            "name": "KeyOverride",
            "type": "Attribute",
        }
    )


@dataclass
class DestinationPurposeCode:
    """This code is required to indicate destination and purpose of Travel.

    It is applicable for Canada and Bermuda agency only. This is used by
    Worldspan.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    destination: Optional[TypeDestinationCode] = field(
        default=None,
        metadata={
            "name": "Destination",
            "type": "Attribute",
            "required": True,
        }
    )
    purpose: Optional[TypePurposeCode] = field(
        default=None,
        metadata={
            "name": "Purpose",
            "type": "Attribute",
            "required": True,
        }
    )


@dataclass
class Dimension(TypeUnitOfMeasure):
    """
    Information related to Length,Height,Width of a baggage.

    :ivar type_value: Type denotes Length,Height,Width of a baggage.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
        }
    )


@dataclass
class Emd:
    """
    :ivar fulfillment_type: A one digit code specifying how the service
        must be fulfilled. See FulfillmentTypeDescription for the
        description of this value.
    :ivar fulfillment_type_description: EMD description.
    :ivar associated_item: The type of Optional Service.  The choices
        are Flight, Ticket, Merchandising, Rule Buster, Allowance,
        Chargeable Baggage, Carry On Baggage Allowance, Prepaid Baggage.
        Provider: 1G, 1V, 1P
    :ivar availability_charge_indicator: A one-letter code specifying
        whether the service is available or if there is a charge
        associated with it. X = Service not available F = No charge for
        service (free) and an EMD is not issued to reflect free service
        E = No charge for service (free) and an EMD is issued to reflect
        the free service. G = No charge for service (free), booking is
        not required and an EMD is not issued to reflect free service H
        = No charge for service (free), booking is not required, and an
        EMD is issued to reflect the free service. Blank = No
        application. Charges apply according to the data in the Service
        Fee fields.
    :ivar refund_reissue_indicator: An attribute specifying whether the
        service is refundable or reissuable.
    :ivar commissionable: True/False value to whether or not the service
        is comissionable.
    :ivar mileage_indicator: True/False value to whether or not the
        service has miles.
    :ivar location: 3 letter location code where the service will be
        availed.
    :ivar date: The date at which the service will be used.
    :ivar booking: Holds the booking description for the service, e.g.,
        SSR.
    :ivar display_category: Describes when the service should be
        displayed.
    :ivar reusable: Identifies if the service can be re-used towards a
        future purchase.
    """
    class Meta:
        name = "EMD"
        namespace = "http://www.travelport.com/schema/air_v52_0"

    fulfillment_type: Optional[int] = field(
        default=None,
        metadata={
            "name": "FulfillmentType",
            "type": "Attribute",
            "min_inclusive": 1,
            "max_inclusive": 5,
        }
    )
    fulfillment_type_description: Optional[str] = field(
        default=None,
        metadata={
            "name": "FulfillmentTypeDescription",
            "type": "Attribute",
        }
    )
    associated_item: Optional[str] = field(
        default=None,
        metadata={
            "name": "AssociatedItem",
            "type": "Attribute",
        }
    )
    availability_charge_indicator: Optional[EmdAvailabilityChargeIndicator] = field(
        default=None,
        metadata={
            "name": "AvailabilityChargeIndicator",
            "type": "Attribute",
        }
    )
    refund_reissue_indicator: Optional[EmdRefundReissueIndicator] = field(
        default=None,
        metadata={
            "name": "RefundReissueIndicator",
            "type": "Attribute",
        }
    )
    commissionable: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Commissionable",
            "type": "Attribute",
        }
    )
    mileage_indicator: Optional[bool] = field(
        default=None,
        metadata={
            "name": "MileageIndicator",
            "type": "Attribute",
        }
    )
    location: Optional[str] = field(
        default=None,
        metadata={
            "name": "Location",
            "type": "Attribute",
            "length": 3,
            "white_space": "collapse",
        }
    )
    date: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "Date",
            "type": "Attribute",
        }
    )
    booking: Optional[TypeBooking] = field(
        default=None,
        metadata={
            "name": "Booking",
            "type": "Attribute",
        }
    )
    display_category: Optional[TypeDisplayCategory] = field(
        default=None,
        metadata={
            "name": "DisplayCategory",
            "type": "Attribute",
        }
    )
    reusable: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Reusable",
            "type": "Attribute",
        }
    )


@dataclass
class Emdcommission:
    """Commission information to be used for EMD issuance.

    Supported providers are 1V/1G/1P

    :ivar type_value: Type of the commission applied.One of
        Amount/Percentage
    :ivar value: Value of the commission applied for EMD issuance.Could
        represent amount or percentage depending on the type
    :ivar currency_code: Currency of the commission amount
        applied.Applicable only with type - Amount
    """
    class Meta:
        name = "EMDCommission"
        namespace = "http://www.travelport.com/schema/air_v52_0"

    type_value: Optional[TypeAdjustmentType] = field(
        default=None,
        metadata={
            "name": "Type",
            "type": "Attribute",
            "required": True,
        }
    )
    value: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Value",
            "type": "Attribute",
            "required": True,
        }
    )
    currency_code: Optional[str] = field(
        default=None,
        metadata={
            "name": "CurrencyCode",
            "type": "Attribute",
            "length": 3,
        }
    )


@dataclass
class Emdcoupon:
    """The coupon information for the EMD issued.

    Supported providers are 1G/1V/1P

    :ivar number: Number of the EMD coupon
    :ivar status: Status of the coupon. Possible values Open, Void,
        Refunded, Exchanged, Irregular Operations,Airport Control,
        Checked In, Flown/Used, Boarded/Lifted, Suspended, Unknown
    :ivar svc_description: Description of the service related to the EMD
        Coupon
    :ivar consumed_at_issuance_ind: Indicates if the EMD coupon has been
        considered used as soon as issued.
    :ivar rfic: Reason For Issuance Code for the EMD coupon
    :ivar rfisc: Reason For Issueance Sub code for the EMD coupon
    :ivar rfidescription: Reason for Issueance Description for the EMD
        coupon
    :ivar origin: Departure Airport Code for the flight with which the
        Coupon is associated
    :ivar destination: Destination Airport Code for the flight with
        which the Coupon is associated
    :ivar flight_number: Flight Number of the flight with which the
        coupon is associated.
    :ivar present_to: Service provider to present the coupon to
    :ivar present_at: Location of service provider where this coupon
        should be presented at
    :ivar non_refundable_ind: Indicates whether the coupon is non-
        refundable
    :ivar marketing_carrier: Marketing carrier associated with the
        coupon
    :ivar key: System generated Key
    :ivar el_stat: This attribute is used to show the action results of
        an element. Possible values are "A" (when elements have been
        added to the UR) and "M" (when existing elements have been
        modified). Response only.
    :ivar key_override: If a duplicate key is found where we are adding
        elements in some cases like URAdd, then instead of erroring out
        set this attribute to true.
    """
    class Meta:
        name = "EMDCoupon"
        namespace = "http://www.travelport.com/schema/air_v52_0"

    number: Optional[int] = field(
        default=None,
        metadata={
            "name": "Number",
            "type": "Attribute",
            "required": True,
        }
    )
    status: Optional[str] = field(
        default=None,
        metadata={
            "name": "Status",
            "type": "Attribute",
            "required": True,
        }
    )
    svc_description: Optional[str] = field(
        default=None,
        metadata={
            "name": "SvcDescription",
            "type": "Attribute",
        }
    )
    consumed_at_issuance_ind: Optional[bool] = field(
        default=None,
        metadata={
            "name": "ConsumedAtIssuanceInd",
            "type": "Attribute",
        }
    )
    rfic: Optional[str] = field(
        default=None,
        metadata={
            "name": "RFIC",
            "type": "Attribute",
            "required": True,
            "length": 1,
        }
    )
    rfisc: Optional[str] = field(
        default=None,
        metadata={
            "name": "RFISC",
            "type": "Attribute",
        }
    )
    rfidescription: Optional[str] = field(
        default=None,
        metadata={
            "name": "RFIDescription",
            "type": "Attribute",
            "min_length": 1,
            "max_length": 86,
        }
    )
    origin: Optional[str] = field(
        default=None,
        metadata={
            "name": "Origin",
            "type": "Attribute",
            "length": 3,
            "white_space": "collapse",
        }
    )
    destination: Optional[str] = field(
        default=None,
        metadata={
            "name": "Destination",
            "type": "Attribute",
            "length": 3,
            "white_space": "collapse",
        }
    )
    flight_number: Optional[str] = field(
        default=None,
        metadata={
            "name": "FlightNumber",
            "type": "Attribute",
            "max_length": 5,
        }
    )
    present_to: Optional[str] = field(
        default=None,
        metadata={
            "name": "PresentTo",
            "type": "Attribute",
            "min_length": 1,
            "max_length": 71,
        }
    )
    present_at: Optional[str] = field(
        default=None,
        metadata={
            "name": "PresentAt",
            "type": "Attribute",
            "min_length": 1,
            "max_length": 71,
        }
    )
    non_refundable_ind: Optional[bool] = field(
        default=None,
        metadata={
            "name": "NonRefundableInd",
            "type": "Attribute",
        }
    )
    marketing_carrier: Optional[str] = field(
        default=None,
        metadata={
            "name": "MarketingCarrier",
            "type": "Attribute",
            "length": 2,
        }
    )
    key: Optional[str] = field(
        default=None,
        metadata={
            "name": "Key",
            "type": "Attribute",
        }
    )
    el_stat: Optional[TypeElementStatus] = field(
        default=None,
        metadata={
            "name": "ElStat",
            "type": "Attribute",
        }
    )
    key_override: Optional[bool] = field(
        default=None,
        metadata={
            "name": "KeyOverride",
            "type": "Attribute",
        }
    )


@dataclass
class EmbargoList:
    """List of embargoes.

    Provider: 1G, 1V, 1P
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    embargo: List[Embargo] = field(
        default_factory=list,
        metadata={
            "name": "Embargo",
            "type": "Element",
            "min_occurs": 1,
            "max_occurs": 99,
        }
    )


@dataclass
class ExchangePenaltyInfo:
    """
    :ivar penalty_information:
    :ivar ptc:
    :ivar minimum_change_fee: Minimum change fee for changes to the
        itinerary.
    :ivar maximum_change_fee: Maximum change fee for changes  to the
        itinerary.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    penalty_information: List[PenaltyInformation] = field(
        default_factory=list,
        metadata={
            "name": "PenaltyInformation",
            "type": "Element",
            "max_occurs": 999,
        }
    )
    ptc: Optional[str] = field(
        default=None,
        metadata={
            "name": "PTC",
            "type": "Attribute",
            "min_length": 3,
            "max_length": 5,
        }
    )
    minimum_change_fee: Optional[str] = field(
        default=None,
        metadata={
            "name": "MinimumChangeFee",
            "type": "Attribute",
        }
    )
    maximum_change_fee: Optional[str] = field(
        default=None,
        metadata={
            "name": "MaximumChangeFee",
            "type": "Attribute",
        }
    )


@dataclass
class FareDetails:
    """
    Information about this fare component.

    :ivar fare_ticket_designator:
    :ivar key: Fare key
    :ivar passenger_detail_ref: PassengerRef key
    :ivar fare_basis: The fare basis code for this fare
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    fare_ticket_designator: Optional[FareTicketDesignator] = field(
        default=None,
        metadata={
            "name": "FareTicketDesignator",
            "type": "Element",
        }
    )
    key: Optional[str] = field(
        default=None,
        metadata={
            "name": "Key",
            "type": "Attribute",
            "required": True,
        }
    )
    passenger_detail_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "PassengerDetailRef",
            "type": "Attribute",
            "required": True,
        }
    )
    fare_basis: Optional[str] = field(
        default=None,
        metadata={
            "name": "FareBasis",
            "type": "Attribute",
            "required": True,
            "max_length": 20,
        }
    )


@dataclass
class FareGuaranteeInfo:
    """
    The information related to fare guarantee details.

    :ivar guarantee_date: The date till which the fare is guaranteed.
    :ivar guarantee_type: Determines the status of a fare for a
        passenger.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    guarantee_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "GuaranteeDate",
            "type": "Attribute",
        }
    )
    guarantee_type: Optional[TypeFareGuarantee] = field(
        default=None,
        metadata={
            "name": "GuaranteeType",
            "type": "Attribute",
            "required": True,
        }
    )


@dataclass
class FareNote:
    """A simple textual fare note.

    Used within several other objects.

    :ivar value:
    :ivar key:
    :ivar precedence:
    :ivar note_name:
    :ivar fare_info_message_ref:
    :ivar el_stat: This attribute is used to show the action results of
        an element. Possible values are "A" (when elements have been
        added to the UR) and "M" (when existing elements have been
        modified). Response only.
    :ivar key_override: If a duplicate key is found where we are adding
        elements in some cases like URAdd, then instead of erroring out
        set this attribute to true.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    value: str = field(
        default="",
        metadata={
            "required": True,
        }
    )
    key: Optional[str] = field(
        default=None,
        metadata={
            "name": "Key",
            "type": "Attribute",
            "required": True,
        }
    )
    precedence: Optional[int] = field(
        default=None,
        metadata={
            "name": "Precedence",
            "type": "Attribute",
        }
    )
    note_name: Optional[str] = field(
        default=None,
        metadata={
            "name": "NoteName",
            "type": "Attribute",
        }
    )
    fare_info_message_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "FareInfoMessageRef",
            "type": "Attribute",
        }
    )
    el_stat: Optional[TypeElementStatus] = field(
        default=None,
        metadata={
            "name": "ElStat",
            "type": "Attribute",
        }
    )
    key_override: Optional[bool] = field(
        default=None,
        metadata={
            "name": "KeyOverride",
            "type": "Attribute",
        }
    )


@dataclass
class FareRemark:
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    text: List[str] = field(
        default_factory=list,
        metadata={
            "name": "Text",
            "type": "Element",
            "max_occurs": 999,
        }
    )
    url: List[Url] = field(
        default_factory=list,
        metadata={
            "name": "URL",
            "type": "Element",
            "max_occurs": 999,
        }
    )
    key: Optional[str] = field(
        default=None,
        metadata={
            "name": "Key",
            "type": "Attribute",
        }
    )
    name: Optional[str] = field(
        default=None,
        metadata={
            "name": "Name",
            "type": "Attribute",
        }
    )


@dataclass
class FareRestrictionDate:
    """Fare restriction based on date ranges.

    StartDate and EndDate are strings representing respective dates. If
    a year component is present then it signifies an exact date. If only
    day and month components are present then it signifies a seasonal
    date, which means applicable for that date in any year

    :ivar direction:
    :ivar start_date:
    :ivar end_date:
    :ivar end_date_indicator: This field indicates the end date/last
        date for which travel on the fare component being validated must
        be commenced or completed
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    direction: Optional[TypeFareDirectionality] = field(
        default=None,
        metadata={
            "name": "Direction",
            "type": "Attribute",
        }
    )
    start_date: Optional[str] = field(
        default=None,
        metadata={
            "name": "StartDate",
            "type": "Attribute",
        }
    )
    end_date: Optional[str] = field(
        default=None,
        metadata={
            "name": "EndDate",
            "type": "Attribute",
        }
    )
    end_date_indicator: Optional[FareRestrictionDateEndDateIndicator] = field(
        default=None,
        metadata={
            "name": "EndDateIndicator",
            "type": "Attribute",
        }
    )


@dataclass
class FareRestrictionDaysOfWeek:
    """
    Days of the week that the restriction applies too.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    direction: Optional[TypeFareDirectionality] = field(
        default=None,
        metadata={
            "name": "Direction",
            "type": "Attribute",
        }
    )
    trip_type: Optional[TypeFareTripType] = field(
        default=None,
        metadata={
            "name": "TripType",
            "type": "Attribute",
        }
    )
    monday: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Monday",
            "type": "Attribute",
        }
    )
    tuesday: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Tuesday",
            "type": "Attribute",
        }
    )
    wednesday: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Wednesday",
            "type": "Attribute",
        }
    )
    thursday: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Thursday",
            "type": "Attribute",
        }
    )
    friday: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Friday",
            "type": "Attribute",
        }
    )
    saturday: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Saturday",
            "type": "Attribute",
        }
    )
    sunday: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Sunday",
            "type": "Attribute",
        }
    )


@dataclass
class FareRuleLookup:
    """
    Parameters to use for a fare rule lookup that is not associated with an Air
    Reservation Locator Code.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    account_code: Optional[AccountCode] = field(
        default=None,
        metadata={
            "name": "AccountCode",
            "type": "Element",
            "namespace": "http://www.travelport.com/schema/common_v52_0",
        }
    )
    point_of_sale: Optional[PointOfSale] = field(
        default=None,
        metadata={
            "name": "PointOfSale",
            "type": "Element",
            "namespace": "http://www.travelport.com/schema/common_v52_0",
        }
    )
    origin: Optional[str] = field(
        default=None,
        metadata={
            "name": "Origin",
            "type": "Attribute",
            "required": True,
            "length": 3,
            "white_space": "collapse",
        }
    )
    destination: Optional[str] = field(
        default=None,
        metadata={
            "name": "Destination",
            "type": "Attribute",
            "required": True,
            "length": 3,
            "white_space": "collapse",
        }
    )
    carrier: Optional[str] = field(
        default=None,
        metadata={
            "name": "Carrier",
            "type": "Attribute",
            "required": True,
            "length": 2,
        }
    )
    fare_basis: Optional[str] = field(
        default=None,
        metadata={
            "name": "FareBasis",
            "type": "Attribute",
            "required": True,
        }
    )
    provider_code: Optional[str] = field(
        default=None,
        metadata={
            "name": "ProviderCode",
            "type": "Attribute",
            "required": True,
            "min_length": 2,
            "max_length": 5,
        }
    )
    departure_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "DepartureDate",
            "type": "Attribute",
        }
    )
    ticketing_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "TicketingDate",
            "type": "Attribute",
        }
    )


@dataclass
class FareRuleShort:
    """
    Short Text Fare Rule.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    fare_rule_name_value: List[FareRuleNameValue] = field(
        default_factory=list,
        metadata={
            "name": "FareRuleNameValue",
            "type": "Element",
            "min_occurs": 1,
            "max_occurs": 999,
        }
    )
    category: Optional[int] = field(
        default=None,
        metadata={
            "name": "Category",
            "type": "Attribute",
            "required": True,
        }
    )
    table_number: Optional[str] = field(
        default=None,
        metadata={
            "name": "TableNumber",
            "type": "Attribute",
        }
    )


@dataclass
class FareStatus:
    """
    Denotes the status of a particular fare.

    :ivar fare_status_failure_info:
    :ivar code: The status of the fare.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    fare_status_failure_info: Optional[FareStatusFailureInfo] = field(
        default=None,
        metadata={
            "name": "FareStatusFailureInfo",
            "type": "Element",
        }
    )
    code: Optional[TypeFareStatusCode] = field(
        default=None,
        metadata={
            "name": "Code",
            "type": "Attribute",
            "required": True,
        }
    )


@dataclass
class FareSurcharge:
    """
    Surcharges for a fare component.

    :ivar key:
    :ivar type_value:
    :ivar amount:
    :ivar segment_ref:
    :ivar coupon_ref: The coupon to which that surcharge is relative (if
        applicable)
    :ivar el_stat: This attribute is used to show the action results of
        an element. Possible values are "A" (when elements have been
        added to the UR) and "M" (when existing elements have been
        modified). Response only.
    :ivar key_override: If a duplicate key is found where we are adding
        elements in some cases like URAdd, then instead of erroring out
        set this attribute to true.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    key: Optional[str] = field(
        default=None,
        metadata={
            "name": "Key",
            "type": "Attribute",
        }
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "Type",
            "type": "Attribute",
            "required": True,
        }
    )
    amount: Optional[str] = field(
        default=None,
        metadata={
            "name": "Amount",
            "type": "Attribute",
            "required": True,
        }
    )
    segment_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "SegmentRef",
            "type": "Attribute",
        }
    )
    coupon_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "CouponRef",
            "type": "Attribute",
        }
    )
    el_stat: Optional[TypeElementStatus] = field(
        default=None,
        metadata={
            "name": "ElStat",
            "type": "Attribute",
        }
    )
    key_override: Optional[bool] = field(
        default=None,
        metadata={
            "name": "KeyOverride",
            "type": "Attribute",
        }
    )


@dataclass
class FeeInfo(TypeFeeInfo):
    """
    A generic type of fee for those charges which are incurred by the passenger,
    but not necessarily shown on tickets.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"


@dataclass
class FlexExploreModifiers:
    """This is the container for a set of modifiers which allow the user to perform
    a special kind of low fare search, depicted as flex explore, based on different
    parameters like Area, Zone, Country, State, Specific locations, Distance around
    the actual destination of the itinerary.

    Applicable for providers 1G,1V,1P

    :ivar destination: List of specific destinations for performing flex
        explore. Applicable only with flex explore type - Destination
    :ivar type_value: Type of flex explore to be performed
    :ivar radius: Radius around the destination of actual itinerary in
        which the search would be performed. Supported only with types -
        DistanceInMiles and DistanceInKilometers
    :ivar group_name: Group name for a set of destinations to be
        searched.  Use with Type=Group. Group names are defined in the
        Search Control Console. Supported Providers:  1G/1V/1P
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    destination: List[str] = field(
        default_factory=list,
        metadata={
            "name": "Destination",
            "type": "Element",
            "max_occurs": 59,
            "length": 3,
            "white_space": "collapse",
        }
    )
    type_value: Optional[FlexExploreModifiersType] = field(
        default=None,
        metadata={
            "name": "Type",
            "type": "Attribute",
            "required": True,
        }
    )
    radius: Optional[int] = field(
        default=None,
        metadata={
            "name": "Radius",
            "type": "Attribute",
        }
    )
    group_name: Optional[str] = field(
        default=None,
        metadata={
            "name": "GroupName",
            "type": "Attribute",
            "max_length": 15,
        }
    )


@dataclass
class GeneralTimeTable:
    """
    :ivar days_of_operation:
    :ivar flight_origin:
    :ivar flight_destination:
    :ivar carrier_list:
    :ivar start_date:
    :ivar end_date:
    :ivar start_time: Flight start time of flight time tabel .
    :ivar end_time: Flight end time of flight time tabel .
    :ivar include_connection: Include or exclude connecting flights.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    days_of_operation: Optional[TypeDaysOfOperation] = field(
        default=None,
        metadata={
            "name": "DaysOfOperation",
            "type": "Element",
        }
    )
    flight_origin: Optional[TypeLocation] = field(
        default=None,
        metadata={
            "name": "FlightOrigin",
            "type": "Element",
            "required": True,
        }
    )
    flight_destination: Optional[TypeLocation] = field(
        default=None,
        metadata={
            "name": "FlightDestination",
            "type": "Element",
            "required": True,
        }
    )
    carrier_list: Optional[CarrierList] = field(
        default=None,
        metadata={
            "name": "CarrierList",
            "type": "Element",
        }
    )
    start_date: Optional[str] = field(
        default=None,
        metadata={
            "name": "StartDate",
            "type": "Attribute",
            "required": True,
        }
    )
    end_date: Optional[str] = field(
        default=None,
        metadata={
            "name": "EndDate",
            "type": "Attribute",
        }
    )
    start_time: Optional[XmlTime] = field(
        default=None,
        metadata={
            "name": "StartTime",
            "type": "Attribute",
        }
    )
    end_time: Optional[XmlTime] = field(
        default=None,
        metadata={
            "name": "EndTime",
            "type": "Attribute",
        }
    )
    include_connection: Optional[bool] = field(
        default=None,
        metadata={
            "name": "IncludeConnection",
            "type": "Attribute",
        }
    )


@dataclass
class GroupedOptionInfo:
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    grouped_option: List[GroupedOption] = field(
        default_factory=list,
        metadata={
            "name": "GroupedOption",
            "type": "Element",
            "max_occurs": 999,
        }
    )


@dataclass
class HostTokenList:
    """
    The shared object list of Host Tokens.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    host_token: List[HostToken] = field(
        default_factory=list,
        metadata={
            "name": "HostToken",
            "type": "Element",
            "namespace": "http://www.travelport.com/schema/common_v52_0",
            "min_occurs": 1,
            "max_occurs": 999,
        }
    )


@dataclass
class IncludeAddlBookingCodeInfo:
    """
    Used to include primary or secondary carrier's booking code details.

    :ivar type_value: The type defines that the booking code info is for
        primary or secondary carrier.
    :ivar secondary_carrier: The secondary carrier code is required when
        type is secondary .
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    type_value: Optional[TypeCarrierCode] = field(
        default=None,
        metadata={
            "name": "Type",
            "type": "Attribute",
            "required": True,
        }
    )
    secondary_carrier: Optional[str] = field(
        default=None,
        metadata={
            "name": "SecondaryCarrier",
            "type": "Attribute",
            "length": 2,
        }
    )


@dataclass
class InvoluntaryChange:
    """
    Specify the Ticket Endorsement value.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    ticket_endorsement: Optional[TicketEndorsement] = field(
        default=None,
        metadata={
            "name": "TicketEndorsement",
            "type": "Element",
            "required": True,
        }
    )


@dataclass
class Itinerary:
    """
    Allows an agency to select the itinenary option for ticket.

    :ivar type_value: Specifies the type of itinenary option for ticket
        like Invoice type or Pocket itinenary.
    :ivar option: Specifies the itinerary option like NoFare,NoAmount.
    :ivar separate_indicator: Set to true if one itinerary to be printed
        per passenger.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    type_value: Optional[TypeItinerary] = field(
        default=None,
        metadata={
            "name": "Type",
            "type": "Attribute",
        }
    )
    option: Optional[TypeItineraryOption] = field(
        default=None,
        metadata={
            "name": "Option",
            "type": "Attribute",
        }
    )
    separate_indicator: Optional[bool] = field(
        default=None,
        metadata={
            "name": "SeparateIndicator",
            "type": "Attribute",
        }
    )


@dataclass
class Journey:
    """
    Information about all connecting segment list and total traveling time.

    :ivar air_segment_ref:
    :ivar travel_time: Total traveling time that is difference between
        the departure time of the first segment and the arrival time of
        the last segments for that particular entire set of connection.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    air_segment_ref: List[AirSegmentRef] = field(
        default_factory=list,
        metadata={
            "name": "AirSegmentRef",
            "type": "Element",
            "max_occurs": 999,
        }
    )
    travel_time: Optional[XmlDuration] = field(
        default=None,
        metadata={
            "name": "TravelTime",
            "type": "Attribute",
        }
    )


@dataclass
class LandCharges:
    """
    Prints non-air charges on a document.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    tax: List[Tax] = field(
        default_factory=list,
        metadata={
            "name": "Tax",
            "type": "Element",
            "max_occurs": 3,
        }
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "name": "Base",
            "type": "Attribute",
        }
    )
    total: Optional[str] = field(
        default=None,
        metadata={
            "name": "Total",
            "type": "Attribute",
        }
    )
    miscellaneous: Optional[str] = field(
        default=None,
        metadata={
            "name": "Miscellaneous",
            "type": "Attribute",
        }
    )
    pre_paid: Optional[str] = field(
        default=None,
        metadata={
            "name": "PrePaid",
            "type": "Attribute",
        }
    )
    deposit: Optional[str] = field(
        default=None,
        metadata={
            "name": "Deposit",
            "type": "Attribute",
        }
    )


@dataclass
class Leg:
    """
    Information about the journey Leg.

    :ivar leg_detail:
    :ivar key:
    :ivar group: Returns the Group Number for the leg.
    :ivar origin: Returns the origin airport or city code for the leg.
    :ivar destination: Returns the destination airport or city code for
        the leg.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    leg_detail: List[LegDetail] = field(
        default_factory=list,
        metadata={
            "name": "LegDetail",
            "type": "Element",
            "max_occurs": 999,
        }
    )
    key: Optional[str] = field(
        default=None,
        metadata={
            "name": "Key",
            "type": "Attribute",
            "required": True,
        }
    )
    group: Optional[int] = field(
        default=None,
        metadata={
            "name": "Group",
            "type": "Attribute",
            "required": True,
        }
    )
    origin: Optional[str] = field(
        default=None,
        metadata={
            "name": "Origin",
            "type": "Attribute",
            "required": True,
            "min_length": 3,
            "max_length": 8,
            "white_space": "collapse",
        }
    )
    destination: Optional[str] = field(
        default=None,
        metadata={
            "name": "Destination",
            "type": "Attribute",
            "required": True,
            "min_length": 3,
            "max_length": 8,
            "white_space": "collapse",
        }
    )


@dataclass
class LegPrice:
    """
    Information about the journey Leg Price.

    :ivar leg_detail:
    :ivar key:
    :ivar total_price: The Total Prices for the Combination of Journey
        legs for this Price.
    :ivar approximate_total_price: The Converted Total Price in Agency's
        Default Currency Value
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    leg_detail: List[LegDetail] = field(
        default_factory=list,
        metadata={
            "name": "LegDetail",
            "type": "Element",
            "min_occurs": 1,
            "max_occurs": 999,
        }
    )
    key: Optional[str] = field(
        default=None,
        metadata={
            "name": "Key",
            "type": "Attribute",
            "required": True,
        }
    )
    total_price: Optional[str] = field(
        default=None,
        metadata={
            "name": "TotalPrice",
            "type": "Attribute",
            "required": True,
        }
    )
    approximate_total_price: Optional[str] = field(
        default=None,
        metadata={
            "name": "ApproximateTotalPrice",
            "type": "Attribute",
        }
    )


@dataclass
class ManualFareAdjustment:
    """
    :ivar applied_on: Represents pricing component upon which manual
        increment/discount to be applied. Presently supported values are
        Base and Total. Other is present as a future place holder but
        presently no request processing logic is available for value
        Other
    :ivar adjustment_type: Represents process used for applying manual
        discount/increment. Presently supported values are Flat,
        Percentage.
    :ivar value: Represents value of increment/discount applied.
        Negative value is considered as discount whereas positive value
        represents increment
    :ivar passenger_ref: Represents passenger association.
    :ivar ticket_designator: Providers: 1p
    :ivar fare_type: Providers: 1p
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    applied_on: Optional[TypeAdjustmentTarget] = field(
        default=None,
        metadata={
            "name": "AppliedOn",
            "type": "Attribute",
            "required": True,
        }
    )
    adjustment_type: Optional[TypeAdjustmentType] = field(
        default=None,
        metadata={
            "name": "AdjustmentType",
            "type": "Attribute",
            "required": True,
        }
    )
    value: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Value",
            "type": "Attribute",
            "required": True,
        }
    )
    passenger_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "PassengerRef",
            "type": "Attribute",
        }
    )
    ticket_designator: Optional[str] = field(
        default=None,
        metadata={
            "name": "TicketDesignator",
            "type": "Attribute",
            "min_length": 0,
            "max_length": 20,
        }
    )
    fare_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "FareType",
            "type": "Attribute",
            "min_length": 1,
            "max_length": 5,
        }
    )


@dataclass
class Meals:
    """
    Available Meal Service.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    value: Optional[TypeMealService] = field(
        default=None,
        metadata={
            "required": True,
        }
    )


@dataclass
class MerchandisingPricingModifiers:
    """
    :ivar account_code: The account code is used to get corporate
        discounted pricing on paid seats. Provider:ACH
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    account_code: List[AccountCode] = field(
        default_factory=list,
        metadata={
            "name": "AccountCode",
            "type": "Element",
            "namespace": "http://www.travelport.com/schema/common_v52_0",
            "max_occurs": 10,
        }
    )


@dataclass
class OptionalServiceModifiers:
    """
    Rich Content and Branding for an optional service.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    optional_service_modifier: List[OptionalServiceModifier] = field(
        default_factory=list,
        metadata={
            "name": "OptionalServiceModifier",
            "type": "Element",
            "min_occurs": 1,
            "max_occurs": 99,
        }
    )


@dataclass
class OriginalItineraryDetails:
    """Used for rapid reprice to provide additional information about the original
    itinerary.

    Providers: 1G/1V/1P/1S/1A

    :ivar itinerary_type: Values allowed are International or Domestic.
        This tells if the itinerary is international or domestic.
    :ivar bulk_ticket: Set to true and the itinerary is/will be a bulk
        ticket. Set to false and the itinerary being repriced will not
        be a bulk ticket. Default is false.
    :ivar ticketing_pcc: This is the PCC or SID where the ticket was
        issued
    :ivar ticketing_iata: This is the IATA where the ticket was issued.
    :ivar ticketing_country: This is the country where the ticket was
        issued.
    :ivar tour_code:
    :ivar ticketing_date: The date the repriced itinerary was ticketed
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    itinerary_type: Optional[TypeItineraryCode] = field(
        default=None,
        metadata={
            "name": "ItineraryType",
            "type": "Attribute",
        }
    )
    bulk_ticket: bool = field(
        default=False,
        metadata={
            "name": "BulkTicket",
            "type": "Attribute",
        }
    )
    ticketing_pcc: Optional[str] = field(
        default=None,
        metadata={
            "name": "TicketingPCC",
            "type": "Attribute",
            "min_length": 2,
            "max_length": 10,
        }
    )
    ticketing_iata: Optional[str] = field(
        default=None,
        metadata={
            "name": "TicketingIATA",
            "type": "Attribute",
            "max_length": 8,
        }
    )
    ticketing_country: Optional[str] = field(
        default=None,
        metadata={
            "name": "TicketingCountry",
            "type": "Attribute",
            "length": 2,
        }
    )
    tour_code: Optional[str] = field(
        default=None,
        metadata={
            "name": "TourCode",
            "type": "Attribute",
            "max_length": 15,
        }
    )
    ticketing_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "TicketingDate",
            "type": "Attribute",
        }
    )


@dataclass
class Pcc:
    """
    Specify pseudo City.
    """
    class Meta:
        name = "PCC"
        namespace = "http://www.travelport.com/schema/air_v52_0"

    override_pcc: Optional[OverridePcc] = field(
        default=None,
        metadata={
            "name": "OverridePCC",
            "type": "Element",
            "namespace": "http://www.travelport.com/schema/common_v52_0",
        }
    )
    point_of_sale: List[PointOfSale] = field(
        default_factory=list,
        metadata={
            "name": "PointOfSale",
            "type": "Element",
            "namespace": "http://www.travelport.com/schema/common_v52_0",
            "max_occurs": 5,
        }
    )
    ticket_agency: Optional[TicketAgency] = field(
        default=None,
        metadata={
            "name": "TicketAgency",
            "type": "Element",
        }
    )


@dataclass
class PassengerDetails:
    """
    Details of passenger.

    :ivar loyalty_card_details:
    :ivar key: Passenger key
    :ivar code: Passenger code
    :ivar age: Passenger age
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    loyalty_card_details: List[LoyaltyCardDetails] = field(
        default_factory=list,
        metadata={
            "name": "LoyaltyCardDetails",
            "type": "Element",
            "max_occurs": 9,
        }
    )
    key: Optional[str] = field(
        default=None,
        metadata={
            "name": "Key",
            "type": "Attribute",
            "required": True,
        }
    )
    code: Optional[str] = field(
        default=None,
        metadata={
            "name": "Code",
            "type": "Attribute",
            "required": True,
            "min_length": 3,
            "max_length": 5,
        }
    )
    age: Optional[int] = field(
        default=None,
        metadata={
            "name": "Age",
            "type": "Attribute",
        }
    )


@dataclass
class PermittedCabins:
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    cabin_class: List[CabinClass] = field(
        default_factory=list,
        metadata={
            "name": "CabinClass",
            "type": "Element",
            "namespace": "http://www.travelport.com/schema/common_v52_0",
            "min_occurs": 1,
            "max_occurs": 5,
        }
    )


@dataclass
class PermittedCarriers:
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    carrier: List[Carrier] = field(
        default_factory=list,
        metadata={
            "name": "Carrier",
            "type": "Element",
            "namespace": "http://www.travelport.com/schema/common_v52_0",
            "min_occurs": 1,
            "max_occurs": 999,
        }
    )


@dataclass
class PocketItineraryRemark(TypeAssociatedRemarkWithSegmentRef):
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"


@dataclass
class PrePayId:
    """
    Pre pay unique identifier , example Flight Pass Number.

    :ivar company_name: Supplier info that is specific to the pre pay Id
    :ivar id: This is the exact pre pay number. Example flight pass
        number
    :ivar type_value: Type of pre pay unique identifier,presently only
        available value is FlightPass.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    company_name: Optional[CompanyName] = field(
        default=None,
        metadata={
            "name": "CompanyName",
            "type": "Element",
        }
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "name": "Id",
            "type": "Attribute",
            "required": True,
            "min_length": 1,
            "max_length": 36,
        }
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "Type",
            "type": "Attribute",
        }
    )


@dataclass
class PreferredBookingCodes:
    """
    This is the container to specify all preferred booking codes.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    booking_code: List[BookingCode] = field(
        default_factory=list,
        metadata={
            "name": "BookingCode",
            "type": "Element",
            "min_occurs": 1,
            "max_occurs": 999,
        }
    )


@dataclass
class PreferredCabins:
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    cabin_class: Optional[CabinClass] = field(
        default=None,
        metadata={
            "name": "CabinClass",
            "type": "Element",
            "namespace": "http://www.travelport.com/schema/common_v52_0",
            "required": True,
        }
    )


@dataclass
class PreferredCarriers:
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    carrier: List[Carrier] = field(
        default_factory=list,
        metadata={
            "name": "Carrier",
            "type": "Element",
            "namespace": "http://www.travelport.com/schema/common_v52_0",
            "min_occurs": 1,
            "max_occurs": 999,
        }
    )


@dataclass
class PricingDetails:
    """Used for rapid reprice.

    This is a response element.  Additional information about how
    pricing was obtain, messages, etc.  Providers: 1G/1V/1P/1S/1A

    :ivar advisory_message: Advisory messages returned from the host.
    :ivar endorsement_text: Endorsement text returned from the host.
    :ivar waiver_text: Waiver text returned from the host.
    :ivar low_fare_pricing: This tells if Low Fare Finder was used.
    :ivar low_fare_found: This tells if the lowest fare was found.
    :ivar penalty_applies: This tells if penalties apply.
    :ivar discount_applies: This tells if a discount applies.
    :ivar itinerary_type: Values allowed are International or Domestic.
        This tells if the itinerary is international or domestic.
    :ivar validating_vendor_code: The vendor code of the validating
        carrier.
    :ivar for_ticketing_on_date: The ticketing date of the itinerary.
    :ivar last_date_to_ticket: The last date to issue the ticket.
    :ivar form_of_refund: How the refund will be issued. Values will be
        MCO or FormOfPayment
    :ivar account_code:
    :ivar bankers_selling_rate: The selling rate at time of quote.
    :ivar pricing_type: Ties with the RepricingModifiers sent in the
        request and tells how the itinerary was priced.
    :ivar conversion_rate: The conversion rate at the time of quote.
    :ivar rate_of_exchange: The exchange rate at time of quote.
    :ivar original_ticket_currency: The currency of the original ticket.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    advisory_message: List[str] = field(
        default_factory=list,
        metadata={
            "name": "AdvisoryMessage",
            "type": "Element",
            "max_occurs": 999,
        }
    )
    endorsement_text: List[str] = field(
        default_factory=list,
        metadata={
            "name": "EndorsementText",
            "type": "Element",
            "max_occurs": 999,
        }
    )
    waiver_text: Optional[str] = field(
        default=None,
        metadata={
            "name": "WaiverText",
            "type": "Element",
        }
    )
    low_fare_pricing: bool = field(
        default=False,
        metadata={
            "name": "LowFarePricing",
            "type": "Attribute",
        }
    )
    low_fare_found: bool = field(
        default=False,
        metadata={
            "name": "LowFareFound",
            "type": "Attribute",
        }
    )
    penalty_applies: bool = field(
        default=False,
        metadata={
            "name": "PenaltyApplies",
            "type": "Attribute",
        }
    )
    discount_applies: bool = field(
        default=False,
        metadata={
            "name": "DiscountApplies",
            "type": "Attribute",
        }
    )
    itinerary_type: Optional[TypeItineraryCode] = field(
        default=None,
        metadata={
            "name": "ItineraryType",
            "type": "Attribute",
        }
    )
    validating_vendor_code: Optional[str] = field(
        default=None,
        metadata={
            "name": "ValidatingVendorCode",
            "type": "Attribute",
            "length": 2,
        }
    )
    for_ticketing_on_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "ForTicketingOnDate",
            "type": "Attribute",
        }
    )
    last_date_to_ticket: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "LastDateToTicket",
            "type": "Attribute",
        }
    )
    form_of_refund: Optional[TypeFormOfRefund] = field(
        default=None,
        metadata={
            "name": "FormOfRefund",
            "type": "Attribute",
        }
    )
    account_code: Optional[str] = field(
        default=None,
        metadata={
            "name": "AccountCode",
            "type": "Attribute",
        }
    )
    bankers_selling_rate: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "BankersSellingRate",
            "type": "Attribute",
        }
    )
    pricing_type: Optional[TypePricingType] = field(
        default=None,
        metadata={
            "name": "PricingType",
            "type": "Attribute",
        }
    )
    conversion_rate: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "ConversionRate",
            "type": "Attribute",
        }
    )
    rate_of_exchange: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "RateOfExchange",
            "type": "Attribute",
        }
    )
    original_ticket_currency: Optional[str] = field(
        default=None,
        metadata={
            "name": "OriginalTicketCurrency",
            "type": "Attribute",
            "length": 3,
        }
    )


@dataclass
class ProhibitedCabins:
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    cabin_class: List[CabinClass] = field(
        default_factory=list,
        metadata={
            "name": "CabinClass",
            "type": "Element",
            "namespace": "http://www.travelport.com/schema/common_v52_0",
            "min_occurs": 1,
            "max_occurs": 3,
        }
    )


@dataclass
class ProhibitedCarriers:
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    carrier: List[Carrier] = field(
        default_factory=list,
        metadata={
            "name": "Carrier",
            "type": "Element",
            "namespace": "http://www.travelport.com/schema/common_v52_0",
            "min_occurs": 1,
            "max_occurs": 999,
        }
    )


@dataclass
class RefundFailureInfo:
    """
    Will be optionally returned as part of AirRefunTicketingRsp if one or all
    ticket refund requests fail.

    :ivar ticket_number:
    :ivar name:
    :ivar tcrnumber: The identifying number for a Ticketless Air
        Reservation.
    :ivar booking_traveler_ref:
    :ivar code:
    :ivar message:
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    ticket_number: Optional[str] = field(
        default=None,
        metadata={
            "name": "TicketNumber",
            "type": "Element",
            "namespace": "http://www.travelport.com/schema/common_v52_0",
            "min_length": 1,
            "max_length": 13,
        }
    )
    name: Optional[Name] = field(
        default=None,
        metadata={
            "name": "Name",
            "type": "Element",
            "namespace": "http://www.travelport.com/schema/common_v52_0",
        }
    )
    tcrnumber: Optional[str] = field(
        default=None,
        metadata={
            "name": "TCRNumber",
            "type": "Element",
        }
    )
    booking_traveler_ref: List[str] = field(
        default_factory=list,
        metadata={
            "name": "BookingTravelerRef",
            "type": "Element",
            "min_occurs": 1,
            "max_occurs": 999,
        }
    )
    code: Optional[int] = field(
        default=None,
        metadata={
            "name": "Code",
            "type": "Attribute",
            "required": True,
        }
    )
    message: Optional[str] = field(
        default=None,
        metadata={
            "name": "Message",
            "type": "Attribute",
        }
    )


@dataclass
class RelatedTraveler:
    """
    Detailed related Traveler information for pre pay profiles.

    :ivar loyalty_card: Traveler loyalty card detail
    :ivar person_name: Traveler name detail
    :ivar credits_used: Traveler pre pay credit detail
    :ivar status_code: Traveler status code(One of Marked for
        deletion,Lapsed,Terminated,Active,Inactive)
    :ivar relation: Relation to the pre pay id. Example flight pass user
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    loyalty_card: List[LoyaltyCard] = field(
        default_factory=list,
        metadata={
            "name": "LoyaltyCard",
            "type": "Element",
            "namespace": "http://www.travelport.com/schema/common_v52_0",
            "max_occurs": 999,
        }
    )
    person_name: Optional[PersonName] = field(
        default=None,
        metadata={
            "name": "PersonName",
            "type": "Element",
        }
    )
    credits_used: Optional["RelatedTraveler.CreditsUsed"] = field(
        default=None,
        metadata={
            "name": "CreditsUsed",
            "type": "Element",
        }
    )
    status_code: Optional[str] = field(
        default=None,
        metadata={
            "name": "StatusCode",
            "type": "Attribute",
        }
    )
    relation: Optional[str] = field(
        default=None,
        metadata={
            "name": "Relation",
            "type": "Attribute",
        }
    )

    @dataclass
    class CreditsUsed:
        used_credit: Optional[Decimal] = field(
            default=None,
            metadata={
                "name": "UsedCredit",
                "type": "Attribute",
            }
        )
        currency_code: Optional[str] = field(
            default=None,
            metadata={
                "name": "CurrencyCode",
                "type": "Attribute",
                "length": 3,
            }
        )


@dataclass
class RoutingRules:
    """
    Rules related to routing.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    routing: List["RoutingRules.Routing"] = field(
        default_factory=list,
        metadata={
            "name": "Routing",
            "type": "Element",
            "max_occurs": 999,
        }
    )

    @dataclass
    class Routing:
        direction_info: List["RoutingRules.Routing.DirectionInfo"] = field(
            default_factory=list,
            metadata={
                "name": "DirectionInfo",
                "type": "Element",
                "max_occurs": 999,
            }
        )
        routing_constructed_ind: Optional[bool] = field(
            default=None,
            metadata={
                "name": "RoutingConstructedInd",
                "type": "Attribute",
            }
        )
        number: Optional[str] = field(
            default=None,
            metadata={
                "name": "Number",
                "type": "Attribute",
            }
        )
        routing_restriction: Optional[str] = field(
            default=None,
            metadata={
                "name": "RoutingRestriction",
                "type": "Attribute",
            }
        )

        @dataclass
        class DirectionInfo:
            location_code: Optional[str] = field(
                default=None,
                metadata={
                    "name": "LocationCode",
                    "type": "Attribute",
                    "length": 3,
                    "white_space": "collapse",
                }
            )
            direction: Optional[DirectionInfoDirection] = field(
                default=None,
                metadata={
                    "name": "Direction",
                    "type": "Attribute",
                }
            )


@dataclass
class RuleAdvancedPurchase:
    """Container for rules regarding advance purchase restrictions.

    TicketingEarliestDate and TicketingLatestDate are strings
    representing respective dates. If a year component is present then
    it signifies an exact date. If only day and month components are
    present then it signifies a seasonal date, which means applicable
    for that date in any year

    :ivar reservation_latest_period:
    :ivar reservation_latest_unit:
    :ivar ticketing_earliest_date:
    :ivar ticketing_latest_date:
    :ivar more_rules_present: If true, specifies that advance purchase
        information will be present in fare rules.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    reservation_latest_period: Optional[str] = field(
        default=None,
        metadata={
            "name": "ReservationLatestPeriod",
            "type": "Attribute",
        }
    )
    reservation_latest_unit: Optional[TypeStayUnit] = field(
        default=None,
        metadata={
            "name": "ReservationLatestUnit",
            "type": "Attribute",
        }
    )
    ticketing_earliest_date: Optional[str] = field(
        default=None,
        metadata={
            "name": "TicketingEarliestDate",
            "type": "Attribute",
        }
    )
    ticketing_latest_date: Optional[str] = field(
        default=None,
        metadata={
            "name": "TicketingLatestDate",
            "type": "Attribute",
        }
    )
    more_rules_present: Optional[bool] = field(
        default=None,
        metadata={
            "name": "MoreRulesPresent",
            "type": "Attribute",
        }
    )


@dataclass
class SearchTraveler(TypePassengerType):
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    air_seat_assignment: List[AirSeatAssignment] = field(
        default_factory=list,
        metadata={
            "name": "AirSeatAssignment",
            "type": "Element",
            "namespace": "http://www.travelport.com/schema/common_v52_0",
            "max_occurs": 999,
        }
    )
    key: Optional[str] = field(
        default=None,
        metadata={
            "name": "Key",
            "type": "Attribute",
        }
    )


@dataclass
class SegmentSelect:
    """
    To be used to pass the selected segment.

    :ivar air_segment_ref: Reference to AirSegment from an Air
        Reservation.
    :ivar hotel_reservation_ref: Specify the locator code of Hotel
        reservation if it needs to be considered as Auxiliary segment
    :ivar vehicle_reservation_ref: Specify the locator code of Vehicle
        reservation if it needs to be considered as Auxiliary segment
    :ivar passive_segment_ref: Reference to PassiveSegment from a
        Passive Reservation.Specify the passive segment if it needs to
        be considered as Auxiliary segment
    :ivar all_confirmed_air: Set to true to consider all Confirmed
        segments including active and passive and set to false to
        discard confirmed segments
    :ivar all_waitlisted_air: Set to true to consider all Waitlisted
        segments and false to discard all waitlisted segments
    :ivar all_hotel: Set to true to consider all Hotel reservations as
        Auxiliary segment and false to discard all Hotel reservations
    :ivar all_vehicle: Set to true to consider all Vehicle reservations
        as Auxiliary segment and false to discard all Vehicle
        reservations
    :ivar all_passive: Set to true to consider all Passive segments as
        Auxiliary segment and false to discard passive segments
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    air_segment_ref: List[TypeSegmentRef] = field(
        default_factory=list,
        metadata={
            "name": "AirSegmentRef",
            "type": "Element",
            "max_occurs": 999,
        }
    )
    hotel_reservation_ref: List[TypeNonAirReservationRef] = field(
        default_factory=list,
        metadata={
            "name": "HotelReservationRef",
            "type": "Element",
            "max_occurs": 999,
        }
    )
    vehicle_reservation_ref: List[TypeNonAirReservationRef] = field(
        default_factory=list,
        metadata={
            "name": "VehicleReservationRef",
            "type": "Element",
            "max_occurs": 999,
        }
    )
    passive_segment_ref: List[TypeSegmentRef] = field(
        default_factory=list,
        metadata={
            "name": "PassiveSegmentRef",
            "type": "Element",
            "max_occurs": 999,
        }
    )
    all_confirmed_air: Optional[bool] = field(
        default=None,
        metadata={
            "name": "AllConfirmedAir",
            "type": "Attribute",
        }
    )
    all_waitlisted_air: Optional[bool] = field(
        default=None,
        metadata={
            "name": "AllWaitlistedAir",
            "type": "Attribute",
        }
    )
    all_hotel: Optional[bool] = field(
        default=None,
        metadata={
            "name": "AllHotel",
            "type": "Attribute",
        }
    )
    all_vehicle: Optional[bool] = field(
        default=None,
        metadata={
            "name": "AllVehicle",
            "type": "Attribute",
        }
    )
    all_passive: Optional[bool] = field(
        default=None,
        metadata={
            "name": "AllPassive",
            "type": "Attribute",
        }
    )


@dataclass
class SelectionModifiers:
    """Modifiers supported for selection of services during EMD Issuance.

    Supported providers are 1V/1G/1P

    :ivar air_segment_ref: References to airsegments for which EMDs will
        be generated on all the associated services.
    :ivar svc_segment_ref: SVC segment reference to which the EMD is
        being issued
    :ivar supplier_code: Supplier/Vendor code for which EMDs will be
        generated on all the associated services. Required if PNR
        contains more than one supplier.
    :ivar rfic: Reason for issuance code for which EMDs will be
        generated on all the associated services.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    air_segment_ref: List[AirSegmentRef] = field(
        default_factory=list,
        metadata={
            "name": "AirSegmentRef",
            "type": "Element",
            "max_occurs": 999,
        }
    )
    svc_segment_ref: List[str] = field(
        default_factory=list,
        metadata={
            "name": "SvcSegmentRef",
            "type": "Element",
            "max_occurs": 999,
        }
    )
    supplier_code: Optional[str] = field(
        default=None,
        metadata={
            "name": "SupplierCode",
            "type": "Attribute",
            "length": 2,
        }
    )
    rfic: Optional[str] = field(
        default=None,
        metadata={
            "name": "RFIC",
            "type": "Attribute",
            "length": 1,
        }
    )


@dataclass
class ServiceAssociations:
    """
    :ivar applicable_segment: Applicable air segment associated with
        this brand.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    applicable_segment: List["ServiceAssociations.ApplicableSegment"] = field(
        default_factory=list,
        metadata={
            "name": "ApplicableSegment",
            "type": "Element",
            "min_occurs": 1,
            "max_occurs": 999,
        }
    )

    @dataclass
    class ApplicableSegment:
        """
        :ivar response_message:
        :ivar optional_service_ref:
        :ivar key: Applicable air segment key
        """
        response_message: Optional[ResponseMessage] = field(
            default=None,
            metadata={
                "name": "ResponseMessage",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/common_v52_0",
            }
        )
        optional_service_ref: Optional[str] = field(
            default=None,
            metadata={
                "name": "OptionalServiceRef",
                "type": "Element",
            }
        )
        key: Optional[str] = field(
            default=None,
            metadata={
                "name": "Key",
                "type": "Attribute",
            }
        )


@dataclass
class ServiceGroup:
    """The Service Group of the Ancillary Service.

    Providers: 1G, 1V, 1P, ACH

    :ivar service_sub_group:
    :ivar code: The Service Group Code of the Ancillary Service.
        Providers: 1G, 1V, 1P, ACH
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    service_sub_group: List[ServiceSubGroup] = field(
        default_factory=list,
        metadata={
            "name": "ServiceSubGroup",
            "type": "Element",
            "max_occurs": 15,
        }
    )
    code: Optional[str] = field(
        default=None,
        metadata={
            "name": "Code",
            "type": "Attribute",
            "required": True,
        }
    )


@dataclass
class SolutionGroup:
    """
    Specifies the trip type and diversity of all or a subset of the result
    solutions.

    :ivar permitted_account_codes:
    :ivar preferred_account_codes:
    :ivar prohibited_account_codes:
    :ivar permitted_point_of_sales:
    :ivar prohibited_point_of_sales:
    :ivar count: The number of solution to include in this group. If
        only one group specified, this can be left blank. If multiple
        groups specified, all counts must add up to the MaxResults of
        the request.
    :ivar trip_type: Specifies the trip type for this group of results.
        Allows targeting a result set to a particular set of
        characterists.
    :ivar diversification: Specifies the diversification of this group
        of results, if specified. Allows targeting a result set to
        ensure they contain more unique results.
    :ivar tag: An arbitrary name for this group of solutions. Will be
        returned with the solution for idetification.
    :ivar primary: Indicates that this is a primary SolutionGroup when
        using alternate pricing concepts
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    permitted_account_codes: Optional["SolutionGroup.PermittedAccountCodes"] = field(
        default=None,
        metadata={
            "name": "PermittedAccountCodes",
            "type": "Element",
        }
    )
    preferred_account_codes: Optional["SolutionGroup.PreferredAccountCodes"] = field(
        default=None,
        metadata={
            "name": "PreferredAccountCodes",
            "type": "Element",
        }
    )
    prohibited_account_codes: Optional["SolutionGroup.ProhibitedAccountCodes"] = field(
        default=None,
        metadata={
            "name": "ProhibitedAccountCodes",
            "type": "Element",
        }
    )
    permitted_point_of_sales: Optional["SolutionGroup.PermittedPointOfSales"] = field(
        default=None,
        metadata={
            "name": "PermittedPointOfSales",
            "type": "Element",
        }
    )
    prohibited_point_of_sales: Optional["SolutionGroup.ProhibitedPointOfSales"] = field(
        default=None,
        metadata={
            "name": "ProhibitedPointOfSales",
            "type": "Element",
        }
    )
    count: Optional[int] = field(
        default=None,
        metadata={
            "name": "Count",
            "type": "Attribute",
        }
    )
    trip_type: Optional[TypeTripType] = field(
        default=None,
        metadata={
            "name": "TripType",
            "type": "Attribute",
            "required": True,
        }
    )
    diversification: Optional[TypeDiversity] = field(
        default=None,
        metadata={
            "name": "Diversification",
            "type": "Attribute",
        }
    )
    tag: Optional[str] = field(
        default=None,
        metadata={
            "name": "Tag",
            "type": "Attribute",
            "max_length": 20,
        }
    )
    primary: bool = field(
        default=False,
        metadata={
            "name": "Primary",
            "type": "Attribute",
        }
    )

    @dataclass
    class PermittedAccountCodes:
        account_code: List[AccountCode] = field(
            default_factory=list,
            metadata={
                "name": "AccountCode",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/common_v52_0",
                "min_occurs": 1,
                "max_occurs": 999,
            }
        )

    @dataclass
    class PreferredAccountCodes:
        account_code: List[AccountCode] = field(
            default_factory=list,
            metadata={
                "name": "AccountCode",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/common_v52_0",
                "min_occurs": 1,
                "max_occurs": 999,
            }
        )

    @dataclass
    class ProhibitedAccountCodes:
        account_code: List[AccountCode] = field(
            default_factory=list,
            metadata={
                "name": "AccountCode",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/common_v52_0",
                "min_occurs": 1,
                "max_occurs": 999,
            }
        )

    @dataclass
    class PermittedPointOfSales:
        point_of_sale: List[PointOfSale] = field(
            default_factory=list,
            metadata={
                "name": "PointOfSale",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/common_v52_0",
                "min_occurs": 1,
                "max_occurs": 999,
            }
        )

    @dataclass
    class ProhibitedPointOfSales:
        point_of_sale: List[PointOfSale] = field(
            default_factory=list,
            metadata={
                "name": "PointOfSale",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/common_v52_0",
                "min_occurs": 1,
                "max_occurs": 999,
            }
        )


@dataclass
class SpecificTimeTable:
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    flight_origin: Optional["SpecificTimeTable.FlightOrigin"] = field(
        default=None,
        metadata={
            "name": "FlightOrigin",
            "type": "Element",
        }
    )
    flight_destination: Optional["SpecificTimeTable.FlightDestination"] = field(
        default=None,
        metadata={
            "name": "FlightDestination",
            "type": "Element",
        }
    )
    start_date: Optional[str] = field(
        default=None,
        metadata={
            "name": "StartDate",
            "type": "Attribute",
            "required": True,
        }
    )
    carrier: Optional[str] = field(
        default=None,
        metadata={
            "name": "Carrier",
            "type": "Attribute",
            "required": True,
            "length": 2,
        }
    )
    flight_number: Optional[str] = field(
        default=None,
        metadata={
            "name": "FlightNumber",
            "type": "Attribute",
            "required": True,
            "max_length": 5,
        }
    )

    @dataclass
    class FlightOrigin:
        airport: Optional[Airport] = field(
            default=None,
            metadata={
                "name": "Airport",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/common_v52_0",
                "required": True,
            }
        )

    @dataclass
    class FlightDestination:
        airport: Optional[Airport] = field(
            default=None,
            metadata={
                "name": "Airport",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/common_v52_0",
                "required": True,
            }
        )


@dataclass
class Tcrinfo:
    """
    :ivar status:
    :ivar date:
    :ivar tcrnumber: The identifying number for a Ticketless Air
        Reservation.
    :ivar provider_reservation_info_ref: Provider reservation reference
        key.
    """
    class Meta:
        name = "TCRInfo"
        namespace = "http://www.travelport.com/schema/air_v52_0"

    status: Optional[TypeTcrstatus] = field(
        default=None,
        metadata={
            "name": "Status",
            "type": "Attribute",
            "required": True,
        }
    )
    date: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "Date",
            "type": "Attribute",
        }
    )
    tcrnumber: Optional[str] = field(
        default=None,
        metadata={
            "name": "TCRNumber",
            "type": "Attribute",
            "required": True,
        }
    )
    provider_reservation_info_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "ProviderReservationInfoRef",
            "type": "Attribute",
            "required": True,
        }
    )


@dataclass
class TaxInfo(TypeTaxInfo):
    """
    The tax information for a.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"


@dataclass
class TermConditions:
    """
    The terms and conditions to be included in Fax details.

    :ivar language_option:
    :ivar include_term_conditions: Specifies whether Term and Conditions
        included in the Fax or not .
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    language_option: List[LanguageOption] = field(
        default_factory=list,
        metadata={
            "name": "LanguageOption",
            "type": "Element",
            "max_occurs": 2,
        }
    )
    include_term_conditions: Optional[bool] = field(
        default=None,
        metadata={
            "name": "IncludeTermConditions",
            "type": "Attribute",
            "required": True,
        }
    )


@dataclass
class Text(TypeTextElement):
    """
    Type of Text, Eg-'Upsell','Marketing Agent','Marketing
    Consumer','Strapline','Rule'.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"


@dataclass
class TicketFailureInfo:
    """Will be optionally returned as part of AirTicketingRsp if one or all ticket
    requests fail.

    Atrributes are faiilure code, failure message, and passenger
    reference key. Passenger name is a child element.

    :ivar air_pricing_info_ref: Returns related air pricing infos.
    :ivar name:
    :ivar code:
    :ivar message:
    :ivar booking_traveler_ref:
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    air_pricing_info_ref: List[AirPricingInfoRef] = field(
        default_factory=list,
        metadata={
            "name": "AirPricingInfoRef",
            "type": "Element",
            "min_occurs": 1,
            "max_occurs": 999,
        }
    )
    name: Optional[Name] = field(
        default=None,
        metadata={
            "name": "Name",
            "type": "Element",
            "namespace": "http://www.travelport.com/schema/common_v52_0",
            "required": True,
        }
    )
    code: Optional[int] = field(
        default=None,
        metadata={
            "name": "Code",
            "type": "Attribute",
            "required": True,
        }
    )
    message: Optional[str] = field(
        default=None,
        metadata={
            "name": "Message",
            "type": "Attribute",
        }
    )
    booking_traveler_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "BookingTravelerRef",
            "type": "Attribute",
            "required": True,
        }
    )


@dataclass
class Title(TypeTextElement):
    """The additional titles associated to the brand or optional service.

    Providers: ACH, RCH, 1G, 1V, 1P.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"


@dataclass
class Variance:
    """
    Indicates any variance in the requested flight.

    :ivar type_value: Indicates type Variance, i.e. Actual, Estimated,
        Canceled and Diversion.
    :ivar time: Indicates time for Variance.
    :ivar indicator: Indicates VAriance Indicator, i.e. Early, Late.
    :ivar reason: Reason for Variance
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    type_value: Optional[TypeVarianceType] = field(
        default=None,
        metadata={
            "name": "Type",
            "type": "Attribute",
            "required": True,
        }
    )
    time: Optional[str] = field(
        default=None,
        metadata={
            "name": "Time",
            "type": "Attribute",
        }
    )
    indicator: Optional[TypeVarianceIndicator] = field(
        default=None,
        metadata={
            "name": "Indicator",
            "type": "Attribute",
        }
    )
    reason: Optional[str] = field(
        default=None,
        metadata={
            "name": "Reason",
            "type": "Attribute",
        }
    )


@dataclass
class VoidDocumentInfo:
    """
    Container to represent document information.

    :ivar document_number: Identifies the document number to be voided.
    :ivar document_type: Identifies the document type to be voided,
        Document Type can have four values like Service Fee, Paper
        Ticket , MCO and E-Ticket.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    document_number: Optional[str] = field(
        default=None,
        metadata={
            "name": "DocumentNumber",
            "type": "Attribute",
            "min_length": 1,
            "max_length": 13,
        }
    )
    document_type: Optional[VoidDocumentInfoDocumentType] = field(
        default=None,
        metadata={
            "name": "DocumentType",
            "type": "Attribute",
        }
    )


@dataclass
class VoidResultInfo:
    """
    List of Successful Or Failed void document results.

    :ivar failure_remark: Container to show all provider failure
        information.
    :ivar document_number: Identifies the document number to be voided.
    :ivar document_type: Identifies the document type to be voided,
        Document Type can have four values like Service Fee, Paper
        Ticket , MCO and E-Ticket.
    :ivar result_type: Successful Or Failed result indicator.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    failure_remark: Optional[str] = field(
        default=None,
        metadata={
            "name": "FailureRemark",
            "type": "Element",
        }
    )
    document_number: Optional[str] = field(
        default=None,
        metadata={
            "name": "DocumentNumber",
            "type": "Attribute",
            "min_length": 1,
            "max_length": 13,
        }
    )
    document_type: Optional[VoidResultInfoDocumentType] = field(
        default=None,
        metadata={
            "name": "DocumentType",
            "type": "Attribute",
        }
    )
    result_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "ResultType",
            "type": "Attribute",
        }
    )


@dataclass
class TypeFarePenalty:
    """
    Penalty applicable on a Fare for change/ cancellation etc- expressed in both
    Money and Percentage.

    :ivar amount: The penalty (if any) - expressed as the actual amount
        of money. Both Amount and Percentage can be present.
    :ivar percentage: The penalty (if any) - expressed in percentage.
        Both Amount and Percentage can be present.
    :ivar penalty_applies:
    :ivar no_show: The No Show penalty (if any) to change/cancel the
        fare.
    """
    class Meta:
        name = "typeFarePenalty"
        target_namespace = "http://www.travelport.com/schema/air_v52_0"

    amount: Optional[str] = field(
        default=None,
        metadata={
            "name": "Amount",
            "type": "Element",
            "namespace": "http://www.travelport.com/schema/air_v52_0",
        }
    )
    percentage: Optional[str] = field(
        default=None,
        metadata={
            "name": "Percentage",
            "type": "Element",
            "namespace": "http://www.travelport.com/schema/air_v52_0",
            "pattern": r"([0-9]{1,2}|100)\.[0-9]{1,2}",
        }
    )
    penalty_applies: Optional[TypeFarePenaltyPenaltyApplies] = field(
        default=None,
        metadata={
            "name": "PenaltyApplies",
            "type": "Attribute",
        }
    )
    no_show: Optional[bool] = field(
        default=None,
        metadata={
            "name": "NoShow",
            "type": "Attribute",
        }
    )


@dataclass
class TypeMostRestrictivePenalties:
    """
    Most Restrictive Penalties.

    :ivar restriction_type: Contain the type of restriction applicable
    """
    class Meta:
        name = "typeMostRestrictivePenalties"
        target_namespace = "http://www.travelport.com/schema/air_v52_0"

    restriction_type: List[TypeRestrictionData] = field(
        default_factory=list,
        metadata={
            "name": "RestrictionType",
            "type": "Element",
            "namespace": "http://www.travelport.com/schema/air_v52_0",
            "max_occurs": 999,
        }
    )


@dataclass
class TypeRestrictionLengthOfStay:
    """
    Length Of Stay Restriction ( e.g. 2 day minimum..)

    :ivar length:
    :ivar stay_unit:
    :ivar stay_date:
    :ivar more_rules_present: If true, specifies that advance purchase
        information will be present in fare rules.
    """
    class Meta:
        name = "typeRestrictionLengthOfStay"
        target_namespace = "http://www.travelport.com/schema/air_v52_0"

    length: Optional[int] = field(
        default=None,
        metadata={
            "name": "Length",
            "type": "Attribute",
        }
    )
    stay_unit: Optional[TypeStayUnit] = field(
        default=None,
        metadata={
            "name": "StayUnit",
            "type": "Attribute",
        }
    )
    stay_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "StayDate",
            "type": "Attribute",
        }
    )
    more_rules_present: Optional[bool] = field(
        default=None,
        metadata={
            "name": "MoreRulesPresent",
            "type": "Attribute",
        }
    )


@dataclass
class TypeTaxInfoWithPaymentRef(TypeTaxInfo):
    """
    :ivar payment_ref: This reference elements will associate relevant
        payment to this tax
    """
    class Meta:
        name = "typeTaxInfoWithPaymentRef"
        target_namespace = "http://www.travelport.com/schema/air_v52_0"

    payment_ref: List[PaymentRef] = field(
        default_factory=list,
        metadata={
            "name": "PaymentRef",
            "type": "Element",
            "namespace": "http://www.travelport.com/schema/air_v52_0",
            "max_occurs": 999,
        }
    )


@dataclass
class TypeTicketFailureInfo:
    """
    Will be optionally returned as part if one or all ticketing requests fail.

    :ivar ticket_number:
    :ivar name:
    :ivar tcrnumber: The identifying number for a Ticketless Air
        Reservation.
    :ivar booking_traveler_ref:
    :ivar code:
    :ivar message:
    """
    class Meta:
        name = "typeTicketFailureInfo"
        target_namespace = "http://www.travelport.com/schema/air_v52_0"

    ticket_number: Optional[str] = field(
        default=None,
        metadata={
            "name": "TicketNumber",
            "type": "Element",
            "namespace": "http://www.travelport.com/schema/common_v52_0",
            "min_length": 1,
            "max_length": 13,
        }
    )
    name: Optional[Name] = field(
        default=None,
        metadata={
            "name": "Name",
            "type": "Element",
            "namespace": "http://www.travelport.com/schema/common_v52_0",
        }
    )
    tcrnumber: Optional[str] = field(
        default=None,
        metadata={
            "name": "TCRNumber",
            "type": "Element",
            "namespace": "http://www.travelport.com/schema/air_v52_0",
        }
    )
    booking_traveler_ref: List[str] = field(
        default_factory=list,
        metadata={
            "name": "BookingTravelerRef",
            "type": "Element",
            "namespace": "http://www.travelport.com/schema/air_v52_0",
            "min_occurs": 1,
            "max_occurs": 999,
        }
    )
    code: Optional[int] = field(
        default=None,
        metadata={
            "name": "Code",
            "type": "Attribute",
            "required": True,
        }
    )
    message: Optional[str] = field(
        default=None,
        metadata={
            "name": "Message",
            "type": "Attribute",
        }
    )


@dataclass
class TypeTicketingModifiersRef:
    class Meta:
        name = "typeTicketingModifiersRef"
        target_namespace = "http://www.travelport.com/schema/air_v52_0"

    air_pricing_info_ref: List[AirPricingInfoRef] = field(
        default_factory=list,
        metadata={
            "name": "AirPricingInfoRef",
            "type": "Element",
            "namespace": "http://www.travelport.com/schema/air_v52_0",
            "max_occurs": 999,
        }
    )
    key: Optional[str] = field(
        default=None,
        metadata={
            "name": "Key",
            "type": "Attribute",
            "required": True,
        }
    )


@dataclass
class TypeWeight:
    class Meta:
        name = "typeWeight"
        target_namespace = "http://www.travelport.com/schema/air_v52_0"

    value: Optional[int] = field(
        default=None,
        metadata={
            "name": "Value",
            "type": "Attribute",
        }
    )
    unit: Optional[TypeUnitWeight] = field(
        default=None,
        metadata={
            "name": "Unit",
            "type": "Attribute",
        }
    )


@dataclass
class AckScheduleChangeServicePortTypeServiceInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    header: Optional["AckScheduleChangeServicePortTypeServiceInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        }
    )
    body: Optional["AckScheduleChangeServicePortTypeServiceInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Header:
        supported_versions: Optional[SupportedVersions] = field(
            default=None,
            metadata={
                "name": "SupportedVersions",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/universal_v52_0",
            }
        )

    @dataclass
    class Body:
        ack_schedule_change_req: Optional[AckScheduleChangeReq] = field(
            default=None,
            metadata={
                "name": "AckScheduleChangeReq",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/universal_v52_0",
            }
        )


@dataclass
class AckScheduleChangeServicePortTypeServiceOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["AckScheduleChangeServicePortTypeServiceOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        ack_schedule_change_rsp: Optional[AckScheduleChangeRsp] = field(
            default=None,
            metadata={
                "name": "AckScheduleChangeRsp",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/universal_v52_0",
            }
        )
        fault: Optional["AckScheduleChangeServicePortTypeServiceOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            }
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            detail: Optional["AckScheduleChangeServicePortTypeServiceOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )

            @dataclass
            class Detail:
                error_info: Optional[V52ErrorInfo] = field(
                    default=None,
                    metadata={
                        "name": "ErrorInfo",
                        "type": "Element",
                        "namespace": "http://www.travelport.com/schema/common_v52_0",
                    }
                )


@dataclass
class AgencyCreateServiceFeePortTypeServiceInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["AgencyCreateServiceFeePortTypeServiceInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        agency_service_fee_create_req: Optional[AgencyServiceFeeCreateReq] = field(
            default=None,
            metadata={
                "name": "AgencyServiceFeeCreateReq",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/util_v52_0",
            }
        )


@dataclass
class AgencyCreateServiceFeePortTypeServiceOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["AgencyCreateServiceFeePortTypeServiceOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        agency_service_fee_create_rsp: Optional[AgencyServiceFeeCreateRsp] = field(
            default=None,
            metadata={
                "name": "AgencyServiceFeeCreateRsp",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/util_v52_0",
            }
        )
        fault: Optional["AgencyCreateServiceFeePortTypeServiceOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            }
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            detail: Optional["AgencyCreateServiceFeePortTypeServiceOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )

            @dataclass
            class Detail:
                error_info: Optional[V52ErrorInfo] = field(
                    default=None,
                    metadata={
                        "name": "ErrorInfo",
                        "type": "Element",
                        "namespace": "http://www.travelport.com/schema/common_v52_0",
                    }
                )


@dataclass
class AirAvailabilitySearchPortTypeServiceInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    header: Optional["AirAvailabilitySearchPortTypeServiceInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        }
    )
    body: Optional["AirAvailabilitySearchPortTypeServiceInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Header:
        session_context: Optional[SessionContext] = field(
            default=None,
            metadata={
                "name": "SessionContext",
                "type": "Element",
                "namespace": "http://www.travelport.com/soa/common/security/SessionContext_v1",
            }
        )

    @dataclass
    class Body:
        availability_search_req: Optional[AvailabilitySearchReq] = field(
            default=None,
            metadata={
                "name": "AvailabilitySearchReq",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/air_v52_0",
            }
        )


@dataclass
class AirAvailabilitySearchPortTypeServiceOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["AirAvailabilitySearchPortTypeServiceOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        availability_search_rsp: Optional[AvailabilitySearchRsp] = field(
            default=None,
            metadata={
                "name": "AvailabilitySearchRsp",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/air_v52_0",
            }
        )
        fault: Optional["AirAvailabilitySearchPortTypeServiceOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            }
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            detail: Optional["AirAvailabilitySearchPortTypeServiceOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )

            @dataclass
            class Detail:
                error_info: Optional[V52ErrorInfo] = field(
                    default=None,
                    metadata={
                        "name": "ErrorInfo",
                        "type": "Element",
                        "namespace": "http://www.travelport.com/schema/common_v52_0",
                    }
                )


@dataclass
class AirCancelPortTypeServiceInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    header: Optional["AirCancelPortTypeServiceInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        }
    )
    body: Optional["AirCancelPortTypeServiceInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Header:
        supported_versions: Optional[SupportedVersions] = field(
            default=None,
            metadata={
                "name": "SupportedVersions",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/universal_v52_0",
            }
        )

    @dataclass
    class Body:
        air_cancel_req: Optional[AirCancelReq] = field(
            default=None,
            metadata={
                "name": "AirCancelReq",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/universal_v52_0",
            }
        )


@dataclass
class AirCancelPortTypeServiceOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["AirCancelPortTypeServiceOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        air_cancel_rsp: Optional[AirCancelRsp] = field(
            default=None,
            metadata={
                "name": "AirCancelRsp",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/universal_v52_0",
            }
        )
        fault: Optional["AirCancelPortTypeServiceOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            }
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            detail: Optional["AirCancelPortTypeServiceOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )

            @dataclass
            class Detail:
                error_info: Optional[V52ErrorInfo] = field(
                    default=None,
                    metadata={
                        "name": "ErrorInfo",
                        "type": "Element",
                        "namespace": "http://www.travelport.com/schema/common_v52_0",
                    }
                )


@dataclass
class AirCreateReservationPortTypeServiceInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    header: Optional["AirCreateReservationPortTypeServiceInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        }
    )
    body: Optional["AirCreateReservationPortTypeServiceInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Header:
        supported_versions: Optional[SupportedVersions] = field(
            default=None,
            metadata={
                "name": "SupportedVersions",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/universal_v52_0",
            }
        )

    @dataclass
    class Body:
        air_create_reservation_req: Optional[AirCreateReservationReq] = field(
            default=None,
            metadata={
                "name": "AirCreateReservationReq",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/universal_v52_0",
            }
        )


@dataclass
class AirExchangeEligibilityPortTypeServiceInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["AirExchangeEligibilityPortTypeServiceInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        air_exchange_eligibility_req: Optional[AirExchangeEligibilityReq] = field(
            default=None,
            metadata={
                "name": "AirExchangeEligibilityReq",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/air_v52_0",
            }
        )


@dataclass
class AirExchangeEligibilityPortTypeServiceOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["AirExchangeEligibilityPortTypeServiceOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        air_exchange_eligibility_rsp: Optional[AirExchangeEligibilityRsp] = field(
            default=None,
            metadata={
                "name": "AirExchangeEligibilityRsp",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/air_v52_0",
            }
        )
        fault: Optional["AirExchangeEligibilityPortTypeServiceOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            }
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            detail: Optional["AirExchangeEligibilityPortTypeServiceOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )

            @dataclass
            class Detail:
                error_info: Optional[V52ErrorInfo] = field(
                    default=None,
                    metadata={
                        "name": "ErrorInfo",
                        "type": "Element",
                        "namespace": "http://www.travelport.com/schema/common_v52_0",
                    }
                )


@dataclass
class AirExchangeMultiQuotePortTypeServiceInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["AirExchangeMultiQuotePortTypeServiceInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        air_exchange_multi_quote_req: Optional[AirExchangeMultiQuoteReq] = field(
            default=None,
            metadata={
                "name": "AirExchangeMultiQuoteReq",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/air_v52_0",
            }
        )


@dataclass
class AirExchangeMultiQuotePortTypeServiceOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["AirExchangeMultiQuotePortTypeServiceOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        air_exchange_multi_quote_rsp: Optional[AirExchangeMultiQuoteRsp] = field(
            default=None,
            metadata={
                "name": "AirExchangeMultiQuoteRsp",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/air_v52_0",
            }
        )
        fault: Optional["AirExchangeMultiQuotePortTypeServiceOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            }
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            detail: Optional["AirExchangeMultiQuotePortTypeServiceOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )

            @dataclass
            class Detail:
                error_info: Optional[V52ErrorInfo] = field(
                    default=None,
                    metadata={
                        "name": "ErrorInfo",
                        "type": "Element",
                        "namespace": "http://www.travelport.com/schema/common_v52_0",
                    }
                )


@dataclass
class AirExchangeProcessPortTypeServiceInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["AirExchangeProcessPortTypeServiceInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        air_exchange_req: Optional[AirExchangeReq] = field(
            default=None,
            metadata={
                "name": "AirExchangeReq",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/air_v52_0",
            }
        )


@dataclass
class AirExchangeProcessPortTypeServiceOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["AirExchangeProcessPortTypeServiceOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        air_exchange_rsp: Optional[AirExchangeRsp] = field(
            default=None,
            metadata={
                "name": "AirExchangeRsp",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/air_v52_0",
            }
        )
        fault: Optional["AirExchangeProcessPortTypeServiceOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            }
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            detail: Optional["AirExchangeProcessPortTypeServiceOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )

            @dataclass
            class Detail:
                error_info: Optional[V52ErrorInfo] = field(
                    default=None,
                    metadata={
                        "name": "ErrorInfo",
                        "type": "Element",
                        "namespace": "http://www.travelport.com/schema/common_v52_0",
                    }
                )


@dataclass
class AirExchangeQuotePortTypeServiceInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["AirExchangeQuotePortTypeServiceInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        air_exchange_quote_req: Optional[AirExchangeQuoteReq] = field(
            default=None,
            metadata={
                "name": "AirExchangeQuoteReq",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/air_v52_0",
            }
        )


@dataclass
class AirExchangeQuotePortTypeServiceOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["AirExchangeQuotePortTypeServiceOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        air_exchange_quote_rsp: Optional[AirExchangeQuoteRsp] = field(
            default=None,
            metadata={
                "name": "AirExchangeQuoteRsp",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/air_v52_0",
            }
        )
        fault: Optional["AirExchangeQuotePortTypeServiceOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            }
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            detail: Optional["AirExchangeQuotePortTypeServiceOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )

            @dataclass
            class Detail:
                error_info: Optional[V52ErrorInfo] = field(
                    default=None,
                    metadata={
                        "name": "ErrorInfo",
                        "type": "Element",
                        "namespace": "http://www.travelport.com/schema/common_v52_0",
                    }
                )


@dataclass
class AirExchangeTicketingPortTypeServiceInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    header: Optional["AirExchangeTicketingPortTypeServiceInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        }
    )
    body: Optional["AirExchangeTicketingPortTypeServiceInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Header:
        session_context: Optional[SessionContext] = field(
            default=None,
            metadata={
                "name": "SessionContext",
                "type": "Element",
                "namespace": "http://www.travelport.com/soa/common/security/SessionContext_v1",
            }
        )

    @dataclass
    class Body:
        air_exchange_ticketing_req: Optional[AirExchangeTicketingReq] = field(
            default=None,
            metadata={
                "name": "AirExchangeTicketingReq",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/air_v52_0",
            }
        )


@dataclass
class AirExchangeTicketingPortTypeServiceOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["AirExchangeTicketingPortTypeServiceOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        air_exchange_ticketing_rsp: Optional[AirExchangeTicketingRsp] = field(
            default=None,
            metadata={
                "name": "AirExchangeTicketingRsp",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/air_v52_0",
            }
        )
        fault: Optional["AirExchangeTicketingPortTypeServiceOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            }
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            detail: Optional["AirExchangeTicketingPortTypeServiceOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )

            @dataclass
            class Detail:
                error_info: Optional[V52ErrorInfo] = field(
                    default=None,
                    metadata={
                        "name": "ErrorInfo",
                        "type": "Element",
                        "namespace": "http://www.travelport.com/schema/common_v52_0",
                    }
                )


@dataclass
class AirFareDisplayPortTypeServiceInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    header: Optional["AirFareDisplayPortTypeServiceInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        }
    )
    body: Optional["AirFareDisplayPortTypeServiceInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Header:
        session_context: Optional[SessionContext] = field(
            default=None,
            metadata={
                "name": "SessionContext",
                "type": "Element",
                "namespace": "http://www.travelport.com/soa/common/security/SessionContext_v1",
            }
        )

    @dataclass
    class Body:
        air_fare_display_req: Optional[AirFareDisplayReq] = field(
            default=None,
            metadata={
                "name": "AirFareDisplayReq",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/air_v52_0",
            }
        )


@dataclass
class AirFareDisplayPortTypeServiceOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["AirFareDisplayPortTypeServiceOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        air_fare_display_rsp: Optional[AirFareDisplayRsp] = field(
            default=None,
            metadata={
                "name": "AirFareDisplayRsp",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/air_v52_0",
            }
        )
        fault: Optional["AirFareDisplayPortTypeServiceOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            }
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            detail: Optional["AirFareDisplayPortTypeServiceOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )

            @dataclass
            class Detail:
                error_info: Optional[V52ErrorInfo] = field(
                    default=None,
                    metadata={
                        "name": "ErrorInfo",
                        "type": "Element",
                        "namespace": "http://www.travelport.com/schema/common_v52_0",
                    }
                )


@dataclass
class AirFareRulesPortTypeServiceInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    header: Optional["AirFareRulesPortTypeServiceInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        }
    )
    body: Optional["AirFareRulesPortTypeServiceInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Header:
        session_context: Optional[SessionContext] = field(
            default=None,
            metadata={
                "name": "SessionContext",
                "type": "Element",
                "namespace": "http://www.travelport.com/soa/common/security/SessionContext_v1",
            }
        )

    @dataclass
    class Body:
        air_fare_rules_req: Optional[AirFareRulesReq] = field(
            default=None,
            metadata={
                "name": "AirFareRulesReq",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/air_v52_0",
            }
        )


@dataclass
class AirFareRulesPortTypeServiceOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["AirFareRulesPortTypeServiceOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        air_fare_rules_rsp: Optional[AirFareRulesRsp] = field(
            default=None,
            metadata={
                "name": "AirFareRulesRsp",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/air_v52_0",
            }
        )
        fault: Optional["AirFareRulesPortTypeServiceOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            }
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            detail: Optional["AirFareRulesPortTypeServiceOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )

            @dataclass
            class Detail:
                error_info: Optional[V52ErrorInfo] = field(
                    default=None,
                    metadata={
                        "name": "ErrorInfo",
                        "type": "Element",
                        "namespace": "http://www.travelport.com/schema/common_v52_0",
                    }
                )


@dataclass
class AirLowFareSearchPortTypeServiceInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    header: Optional["AirLowFareSearchPortTypeServiceInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        }
    )
    body: Optional["AirLowFareSearchPortTypeServiceInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Header:
        session_context: Optional[SessionContext] = field(
            default=None,
            metadata={
                "name": "SessionContext",
                "type": "Element",
                "namespace": "http://www.travelport.com/soa/common/security/SessionContext_v1",
            }
        )

    @dataclass
    class Body:
        low_fare_search_req: Optional[LowFareSearchReq] = field(
            default=None,
            metadata={
                "name": "LowFareSearchReq",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/air_v52_0",
            }
        )


@dataclass
class AirLowFareSearchPortTypeServiceOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["AirLowFareSearchPortTypeServiceOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        low_fare_search_rsp: Optional[LowFareSearchRsp] = field(
            default=None,
            metadata={
                "name": "LowFareSearchRsp",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/air_v52_0",
            }
        )
        fault: Optional["AirLowFareSearchPortTypeServiceOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            }
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            detail: Optional["AirLowFareSearchPortTypeServiceOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )

            @dataclass
            class Detail:
                error_info: Optional[V52ErrorInfo] = field(
                    default=None,
                    metadata={
                        "name": "ErrorInfo",
                        "type": "Element",
                        "namespace": "http://www.travelport.com/schema/common_v52_0",
                    }
                )


@dataclass
class AirMerchandisingDetailsPortTypeServiceInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["AirMerchandisingDetailsPortTypeServiceInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        air_merchandising_details_req: Optional[AirMerchandisingDetailsReq] = field(
            default=None,
            metadata={
                "name": "AirMerchandisingDetailsReq",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/air_v52_0",
            }
        )


@dataclass
class AirMerchandisingDetailsPortTypeServiceOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["AirMerchandisingDetailsPortTypeServiceOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        air_merchandising_details_rsp: Optional[AirMerchandisingDetailsRsp] = field(
            default=None,
            metadata={
                "name": "AirMerchandisingDetailsRsp",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/air_v52_0",
            }
        )
        fault: Optional["AirMerchandisingDetailsPortTypeServiceOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            }
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            detail: Optional["AirMerchandisingDetailsPortTypeServiceOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )

            @dataclass
            class Detail:
                error_info: Optional[V52ErrorInfo] = field(
                    default=None,
                    metadata={
                        "name": "ErrorInfo",
                        "type": "Element",
                        "namespace": "http://www.travelport.com/schema/common_v52_0",
                    }
                )


@dataclass
class AirMerchandisingFulfillmentPortTypeServiceInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    header: Optional["AirMerchandisingFulfillmentPortTypeServiceInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        }
    )
    body: Optional["AirMerchandisingFulfillmentPortTypeServiceInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Header:
        supported_versions: Optional[SupportedVersions] = field(
            default=None,
            metadata={
                "name": "SupportedVersions",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/universal_v52_0",
            }
        )

    @dataclass
    class Body:
        air_merchandising_fulfillment_req: Optional[AirMerchandisingFulfillmentReq] = field(
            default=None,
            metadata={
                "name": "AirMerchandisingFulfillmentReq",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/universal_v52_0",
            }
        )


@dataclass
class AirMerchandisingFulfillmentPortTypeServiceOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["AirMerchandisingFulfillmentPortTypeServiceOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        air_merchandising_fulfillment_rsp: Optional[AirMerchandisingFulfillmentRsp] = field(
            default=None,
            metadata={
                "name": "AirMerchandisingFulfillmentRsp",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/universal_v52_0",
            }
        )
        fault: Optional["AirMerchandisingFulfillmentPortTypeServiceOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            }
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            detail: Optional["AirMerchandisingFulfillmentPortTypeServiceOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )

            @dataclass
            class Detail:
                error_info: Optional[V52ErrorInfo] = field(
                    default=None,
                    metadata={
                        "name": "ErrorInfo",
                        "type": "Element",
                        "namespace": "http://www.travelport.com/schema/common_v52_0",
                    }
                )


@dataclass
class AirMerchandisingOfferAvailabilityPortTypeServiceInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["AirMerchandisingOfferAvailabilityPortTypeServiceInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        air_merchandising_offer_availability_req: Optional[AirMerchandisingOfferAvailabilityReq] = field(
            default=None,
            metadata={
                "name": "AirMerchandisingOfferAvailabilityReq",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/air_v52_0",
            }
        )


@dataclass
class AirMerchandisingOfferAvailabilityPortTypeServiceOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["AirMerchandisingOfferAvailabilityPortTypeServiceOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        air_merchandising_offer_availability_rsp: Optional[AirMerchandisingOfferAvailabilityRsp] = field(
            default=None,
            metadata={
                "name": "AirMerchandisingOfferAvailabilityRsp",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/air_v52_0",
            }
        )
        fault: Optional["AirMerchandisingOfferAvailabilityPortTypeServiceOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            }
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            detail: Optional["AirMerchandisingOfferAvailabilityPortTypeServiceOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )

            @dataclass
            class Detail:
                error_info: Optional[V52ErrorInfo] = field(
                    default=None,
                    metadata={
                        "name": "ErrorInfo",
                        "type": "Element",
                        "namespace": "http://www.travelport.com/schema/common_v52_0",
                    }
                )


@dataclass
class AirPrePayPortTypeServiceInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["AirPrePayPortTypeServiceInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        air_pre_pay_req: Optional[AirPrePayReq] = field(
            default=None,
            metadata={
                "name": "AirPrePayReq",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/air_v52_0",
            }
        )


@dataclass
class AirPrePayPortTypeServiceOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["AirPrePayPortTypeServiceOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        air_pre_pay_rsp: Optional[AirPrePayRsp] = field(
            default=None,
            metadata={
                "name": "AirPrePayRsp",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/air_v52_0",
            }
        )
        fault: Optional["AirPrePayPortTypeServiceOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            }
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            detail: Optional["AirPrePayPortTypeServiceOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )

            @dataclass
            class Detail:
                error_info: Optional[V52ErrorInfo] = field(
                    default=None,
                    metadata={
                        "name": "ErrorInfo",
                        "type": "Element",
                        "namespace": "http://www.travelport.com/schema/common_v52_0",
                    }
                )


@dataclass
class AirPricePortTypeServiceInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    header: Optional["AirPricePortTypeServiceInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        }
    )
    body: Optional["AirPricePortTypeServiceInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Header:
        session_context: Optional[SessionContext] = field(
            default=None,
            metadata={
                "name": "SessionContext",
                "type": "Element",
                "namespace": "http://www.travelport.com/soa/common/security/SessionContext_v1",
            }
        )

    @dataclass
    class Body:
        air_price_req: Optional[AirPriceReq] = field(
            default=None,
            metadata={
                "name": "AirPriceReq",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/air_v52_0",
            }
        )


@dataclass
class AirPricePortTypeServiceOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["AirPricePortTypeServiceOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        air_price_rsp: Optional[AirPriceRsp] = field(
            default=None,
            metadata={
                "name": "AirPriceRsp",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/air_v52_0",
            }
        )
        fault: Optional["AirPricePortTypeServiceOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            }
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            detail: Optional["AirPricePortTypeServiceOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )

            @dataclass
            class Detail:
                error_info: Optional[V52ErrorInfo] = field(
                    default=None,
                    metadata={
                        "name": "ErrorInfo",
                        "type": "Element",
                        "namespace": "http://www.travelport.com/schema/common_v52_0",
                    }
                )


@dataclass
class AirRefundQuotePortTypeServiceInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["AirRefundQuotePortTypeServiceInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        air_refund_quote_req: Optional[AirRefundQuoteReq] = field(
            default=None,
            metadata={
                "name": "AirRefundQuoteReq",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/air_v52_0",
            }
        )


@dataclass
class AirRefundQuotePortTypeServiceOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["AirRefundQuotePortTypeServiceOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        air_refund_quote_rsp: Optional[AirRefundQuoteRsp] = field(
            default=None,
            metadata={
                "name": "AirRefundQuoteRsp",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/air_v52_0",
            }
        )
        fault: Optional["AirRefundQuotePortTypeServiceOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            }
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            detail: Optional["AirRefundQuotePortTypeServiceOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )

            @dataclass
            class Detail:
                error_info: Optional[V52ErrorInfo] = field(
                    default=None,
                    metadata={
                        "name": "ErrorInfo",
                        "type": "Element",
                        "namespace": "http://www.travelport.com/schema/common_v52_0",
                    }
                )


@dataclass
class AirRefundTicketPortTypeServiceInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["AirRefundTicketPortTypeServiceInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        air_refund_req: Optional[AirRefundReq] = field(
            default=None,
            metadata={
                "name": "AirRefundReq",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/air_v52_0",
            }
        )


@dataclass
class AirRefundTicketPortTypeServiceOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["AirRefundTicketPortTypeServiceOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        air_refund_rsp: Optional[AirRefundRsp] = field(
            default=None,
            metadata={
                "name": "AirRefundRsp",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/air_v52_0",
            }
        )
        fault: Optional["AirRefundTicketPortTypeServiceOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            }
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            detail: Optional["AirRefundTicketPortTypeServiceOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )

            @dataclass
            class Detail:
                error_info: Optional[V52ErrorInfo] = field(
                    default=None,
                    metadata={
                        "name": "ErrorInfo",
                        "type": "Element",
                        "namespace": "http://www.travelport.com/schema/common_v52_0",
                    }
                )


@dataclass
class AirRepriceSearchPortTypeServiceInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["AirRepriceSearchPortTypeServiceInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        air_reprice_req: Optional[AirRepriceReq] = field(
            default=None,
            metadata={
                "name": "AirRepriceReq",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/air_v52_0",
            }
        )


@dataclass
class AirRepriceSearchPortTypeServiceOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["AirRepriceSearchPortTypeServiceOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        air_reprice_rsp: Optional[AirRepriceRsp] = field(
            default=None,
            metadata={
                "name": "AirRepriceRsp",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/air_v52_0",
            }
        )
        fault: Optional["AirRepriceSearchPortTypeServiceOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            }
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            detail: Optional["AirRepriceSearchPortTypeServiceOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )

            @dataclass
            class Detail:
                error_info: Optional[V52ErrorInfo] = field(
                    default=None,
                    metadata={
                        "name": "ErrorInfo",
                        "type": "Element",
                        "namespace": "http://www.travelport.com/schema/common_v52_0",
                    }
                )


@dataclass
class AirRetrieveDocumentPortTypeServiceInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["AirRetrieveDocumentPortTypeServiceInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        air_retrieve_document_req: Optional[AirRetrieveDocumentReq] = field(
            default=None,
            metadata={
                "name": "AirRetrieveDocumentReq",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/air_v52_0",
            }
        )


@dataclass
class AirRetrieveDocumentPortTypeServiceOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["AirRetrieveDocumentPortTypeServiceOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        air_retrieve_document_rsp: Optional[AirRetrieveDocumentRsp] = field(
            default=None,
            metadata={
                "name": "AirRetrieveDocumentRsp",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/air_v52_0",
            }
        )
        fault: Optional["AirRetrieveDocumentPortTypeServiceOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            }
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            detail: Optional["AirRetrieveDocumentPortTypeServiceOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )

            @dataclass
            class Detail:
                error_info: Optional[V52ErrorInfo] = field(
                    default=None,
                    metadata={
                        "name": "ErrorInfo",
                        "type": "Element",
                        "namespace": "http://www.travelport.com/schema/common_v52_0",
                    }
                )


@dataclass
class AirScheduleSearchPortTypeServiceInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["AirScheduleSearchPortTypeServiceInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        schedule_search_req: Optional[ScheduleSearchReq] = field(
            default=None,
            metadata={
                "name": "ScheduleSearchReq",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/air_v52_0",
            }
        )


@dataclass
class AirScheduleSearchPortTypeServiceOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["AirScheduleSearchPortTypeServiceOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        schedule_search_rsp: Optional[ScheduleSearchRsp] = field(
            default=None,
            metadata={
                "name": "ScheduleSearchRsp",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/air_v52_0",
            }
        )
        fault: Optional["AirScheduleSearchPortTypeServiceOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            }
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            detail: Optional["AirScheduleSearchPortTypeServiceOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )

            @dataclass
            class Detail:
                error_info: Optional[V52ErrorInfo] = field(
                    default=None,
                    metadata={
                        "name": "ErrorInfo",
                        "type": "Element",
                        "namespace": "http://www.travelport.com/schema/common_v52_0",
                    }
                )


@dataclass
class AirTicketingPortTypeServiceInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["AirTicketingPortTypeServiceInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        air_ticketing_req: Optional[AirTicketingReq] = field(
            default=None,
            metadata={
                "name": "AirTicketingReq",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/air_v52_0",
            }
        )


@dataclass
class AirTicketingPortTypeServiceOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["AirTicketingPortTypeServiceOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        air_ticketing_rsp: Optional[AirTicketingRsp] = field(
            default=None,
            metadata={
                "name": "AirTicketingRsp",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/air_v52_0",
            }
        )
        fault: Optional["AirTicketingPortTypeServiceOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            }
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            detail: Optional["AirTicketingPortTypeServiceOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )

            @dataclass
            class Detail:
                error_info: Optional[V52ErrorInfo] = field(
                    default=None,
                    metadata={
                        "name": "ErrorInfo",
                        "type": "Element",
                        "namespace": "http://www.travelport.com/schema/common_v52_0",
                    }
                )


@dataclass
class AirUpsellSearchPortTypeServiceInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["AirUpsellSearchPortTypeServiceInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        air_upsell_search_req: Optional[AirUpsellSearchReq] = field(
            default=None,
            metadata={
                "name": "AirUpsellSearchReq",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/air_v52_0",
            }
        )


@dataclass
class AirUpsellSearchPortTypeServiceOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["AirUpsellSearchPortTypeServiceOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        air_upsell_search_rsp: Optional[AirUpsellSearchRsp] = field(
            default=None,
            metadata={
                "name": "AirUpsellSearchRsp",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/air_v52_0",
            }
        )
        fault: Optional["AirUpsellSearchPortTypeServiceOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            }
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            detail: Optional["AirUpsellSearchPortTypeServiceOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )

            @dataclass
            class Detail:
                error_info: Optional[V52ErrorInfo] = field(
                    default=None,
                    metadata={
                        "name": "ErrorInfo",
                        "type": "Element",
                        "namespace": "http://www.travelport.com/schema/common_v52_0",
                    }
                )


@dataclass
class AirVoidDocumentPortTypeServiceInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["AirVoidDocumentPortTypeServiceInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        air_void_document_req: Optional[AirVoidDocumentReq] = field(
            default=None,
            metadata={
                "name": "AirVoidDocumentReq",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/air_v52_0",
            }
        )


@dataclass
class AirVoidDocumentPortTypeServiceOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["AirVoidDocumentPortTypeServiceOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        air_void_document_rsp: Optional[AirVoidDocumentRsp] = field(
            default=None,
            metadata={
                "name": "AirVoidDocumentRsp",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/air_v52_0",
            }
        )
        fault: Optional["AirVoidDocumentPortTypeServiceOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            }
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            detail: Optional["AirVoidDocumentPortTypeServiceOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )

            @dataclass
            class Detail:
                error_info: Optional[V52ErrorInfo] = field(
                    default=None,
                    metadata={
                        "name": "ErrorInfo",
                        "type": "Element",
                        "namespace": "http://www.travelport.com/schema/common_v52_0",
                    }
                )


@dataclass
class BookingAirExchangePortTypeServiceInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    header: Optional["BookingAirExchangePortTypeServiceInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        }
    )
    body: Optional["BookingAirExchangePortTypeServiceInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Header:
        session_context: Optional[SessionContext] = field(
            default=None,
            metadata={
                "name": "SessionContext",
                "type": "Element",
                "namespace": "http://www.travelport.com/soa/common/security/SessionContext_v1",
            }
        )

    @dataclass
    class Body:
        booking_air_exchange_req: Optional[BookingAirExchangeReq] = field(
            default=None,
            metadata={
                "name": "BookingAirExchangeReq",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/sharedBooking_v52_0",
            }
        )


@dataclass
class BookingAirExchangePortTypeServiceOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["BookingAirExchangePortTypeServiceOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        booking_air_exchange_rsp: Optional[BookingAirExchangeRsp] = field(
            default=None,
            metadata={
                "name": "BookingAirExchangeRsp",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/sharedBooking_v52_0",
            }
        )
        fault: Optional["BookingAirExchangePortTypeServiceOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            }
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            detail: Optional["BookingAirExchangePortTypeServiceOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )

            @dataclass
            class Detail:
                error_info: Optional[V52ErrorInfo] = field(
                    default=None,
                    metadata={
                        "name": "ErrorInfo",
                        "type": "Element",
                        "namespace": "http://www.travelport.com/schema/common_v52_0",
                    }
                )


@dataclass
class BookingAirExchangeQuotePortTypeServiceInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    header: Optional["BookingAirExchangeQuotePortTypeServiceInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        }
    )
    body: Optional["BookingAirExchangeQuotePortTypeServiceInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Header:
        session_context: Optional[SessionContext] = field(
            default=None,
            metadata={
                "name": "SessionContext",
                "type": "Element",
                "namespace": "http://www.travelport.com/soa/common/security/SessionContext_v1",
            }
        )

    @dataclass
    class Body:
        booking_air_exchange_quote_req: Optional[BookingAirExchangeQuoteReq] = field(
            default=None,
            metadata={
                "name": "BookingAirExchangeQuoteReq",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/sharedBooking_v52_0",
            }
        )


@dataclass
class BookingAirExchangeQuotePortTypeServiceOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["BookingAirExchangeQuotePortTypeServiceOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        booking_air_exchange_quote_rsp: Optional[BookingAirExchangeQuoteRsp] = field(
            default=None,
            metadata={
                "name": "BookingAirExchangeQuoteRsp",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/sharedBooking_v52_0",
            }
        )
        fault: Optional["BookingAirExchangeQuotePortTypeServiceOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            }
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            detail: Optional["BookingAirExchangeQuotePortTypeServiceOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )

            @dataclass
            class Detail:
                error_info: Optional[V52ErrorInfo] = field(
                    default=None,
                    metadata={
                        "name": "ErrorInfo",
                        "type": "Element",
                        "namespace": "http://www.travelport.com/schema/common_v52_0",
                    }
                )


@dataclass
class BookingAirPnrElementPortTypeServiceInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    header: Optional["BookingAirPnrElementPortTypeServiceInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        }
    )
    body: Optional["BookingAirPnrElementPortTypeServiceInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Header:
        session_context: Optional[SessionContext] = field(
            default=None,
            metadata={
                "name": "SessionContext",
                "type": "Element",
                "namespace": "http://www.travelport.com/soa/common/security/SessionContext_v1",
            }
        )

    @dataclass
    class Body:
        booking_air_pnr_element_req: Optional[BookingAirPnrElementReq] = field(
            default=None,
            metadata={
                "name": "BookingAirPnrElementReq",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/sharedBooking_v52_0",
            }
        )


@dataclass
class BookingAirPnrElementPortTypeServiceOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["BookingAirPnrElementPortTypeServiceOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        booking_air_pnr_element_rsp: Optional[BookingAirPnrElementRsp] = field(
            default=None,
            metadata={
                "name": "BookingAirPnrElementRsp",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/sharedBooking_v52_0",
            }
        )
        fault: Optional["BookingAirPnrElementPortTypeServiceOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            }
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            detail: Optional["BookingAirPnrElementPortTypeServiceOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )

            @dataclass
            class Detail:
                error_info: Optional[V52ErrorInfo] = field(
                    default=None,
                    metadata={
                        "name": "ErrorInfo",
                        "type": "Element",
                        "namespace": "http://www.travelport.com/schema/common_v52_0",
                    }
                )


@dataclass
class BookingAirSegmentPortTypeServiceInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    header: Optional["BookingAirSegmentPortTypeServiceInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        }
    )
    body: Optional["BookingAirSegmentPortTypeServiceInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Header:
        session_context: Optional[SessionContext] = field(
            default=None,
            metadata={
                "name": "SessionContext",
                "type": "Element",
                "namespace": "http://www.travelport.com/soa/common/security/SessionContext_v1",
            }
        )

    @dataclass
    class Body:
        booking_air_segment_req: Optional[BookingAirSegmentReq] = field(
            default=None,
            metadata={
                "name": "BookingAirSegmentReq",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/sharedBooking_v52_0",
            }
        )


@dataclass
class BookingAirSegmentPortTypeServiceOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["BookingAirSegmentPortTypeServiceOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        booking_air_segment_rsp: Optional[BookingAirSegmentRsp] = field(
            default=None,
            metadata={
                "name": "BookingAirSegmentRsp",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/sharedBooking_v52_0",
            }
        )
        fault: Optional["BookingAirSegmentPortTypeServiceOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            }
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            detail: Optional["BookingAirSegmentPortTypeServiceOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )

            @dataclass
            class Detail:
                error_info: Optional[V52ErrorInfo] = field(
                    default=None,
                    metadata={
                        "name": "ErrorInfo",
                        "type": "Element",
                        "namespace": "http://www.travelport.com/schema/common_v52_0",
                    }
                )


@dataclass
class BookingDisplayPortTypeServiceInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    header: Optional["BookingDisplayPortTypeServiceInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        }
    )
    body: Optional["BookingDisplayPortTypeServiceInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Header:
        session_context: Optional[SessionContext] = field(
            default=None,
            metadata={
                "name": "SessionContext",
                "type": "Element",
                "namespace": "http://www.travelport.com/soa/common/security/SessionContext_v1",
            }
        )

    @dataclass
    class Body:
        booking_display_req: Optional[BookingDisplayReq] = field(
            default=None,
            metadata={
                "name": "BookingDisplayReq",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/sharedBooking_v52_0",
            }
        )


@dataclass
class BookingDisplayPortTypeServiceOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["BookingDisplayPortTypeServiceOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        booking_display_rsp: Optional[BookingDisplayRsp] = field(
            default=None,
            metadata={
                "name": "BookingDisplayRsp",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/sharedBooking_v52_0",
            }
        )
        fault: Optional["BookingDisplayPortTypeServiceOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            }
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            detail: Optional["BookingDisplayPortTypeServiceOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )

            @dataclass
            class Detail:
                error_info: Optional[V52ErrorInfo] = field(
                    default=None,
                    metadata={
                        "name": "ErrorInfo",
                        "type": "Element",
                        "namespace": "http://www.travelport.com/schema/common_v52_0",
                    }
                )


@dataclass
class BookingEndPortTypeServiceInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    header: Optional["BookingEndPortTypeServiceInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        }
    )
    body: Optional["BookingEndPortTypeServiceInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Header:
        session_context: Optional[SessionContext] = field(
            default=None,
            metadata={
                "name": "SessionContext",
                "type": "Element",
                "namespace": "http://www.travelport.com/soa/common/security/SessionContext_v1",
            }
        )

    @dataclass
    class Body:
        booking_end_req: Optional[BookingEndReq] = field(
            default=None,
            metadata={
                "name": "BookingEndReq",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/sharedBooking_v52_0",
            }
        )


@dataclass
class BookingEndPortTypeServiceOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["BookingEndPortTypeServiceOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        booking_end_rsp: Optional[BookingEndRsp] = field(
            default=None,
            metadata={
                "name": "BookingEndRsp",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/sharedBooking_v52_0",
            }
        )
        fault: Optional["BookingEndPortTypeServiceOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            }
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            detail: Optional["BookingEndPortTypeServiceOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )

            @dataclass
            class Detail:
                error_info: Optional[V52ErrorInfo] = field(
                    default=None,
                    metadata={
                        "name": "ErrorInfo",
                        "type": "Element",
                        "namespace": "http://www.travelport.com/schema/common_v52_0",
                    }
                )


@dataclass
class BookingHotelPnrElementPortTypeServiceInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    header: Optional["BookingHotelPnrElementPortTypeServiceInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        }
    )
    body: Optional["BookingHotelPnrElementPortTypeServiceInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Header:
        session_context: Optional[SessionContext] = field(
            default=None,
            metadata={
                "name": "SessionContext",
                "type": "Element",
                "namespace": "http://www.travelport.com/soa/common/security/SessionContext_v1",
            }
        )

    @dataclass
    class Body:
        booking_hotel_pnr_element_req: Optional[BookingHotelPnrElementReq] = field(
            default=None,
            metadata={
                "name": "BookingHotelPnrElementReq",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/sharedBooking_v52_0",
            }
        )


@dataclass
class BookingHotelPnrElementPortTypeServiceOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["BookingHotelPnrElementPortTypeServiceOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        booking_hotel_pnr_element_rsp: Optional[BookingHotelPnrElementRsp] = field(
            default=None,
            metadata={
                "name": "BookingHotelPnrElementRsp",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/sharedBooking_v52_0",
            }
        )
        fault: Optional["BookingHotelPnrElementPortTypeServiceOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            }
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            detail: Optional["BookingHotelPnrElementPortTypeServiceOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )

            @dataclass
            class Detail:
                error_info: Optional[V52ErrorInfo] = field(
                    default=None,
                    metadata={
                        "name": "ErrorInfo",
                        "type": "Element",
                        "namespace": "http://www.travelport.com/schema/common_v52_0",
                    }
                )


@dataclass
class BookingHotelSegmentPortTypeServiceInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    header: Optional["BookingHotelSegmentPortTypeServiceInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        }
    )
    body: Optional["BookingHotelSegmentPortTypeServiceInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Header:
        session_context: Optional[SessionContext] = field(
            default=None,
            metadata={
                "name": "SessionContext",
                "type": "Element",
                "namespace": "http://www.travelport.com/soa/common/security/SessionContext_v1",
            }
        )

    @dataclass
    class Body:
        booking_hotel_segment_req: Optional[BookingHotelSegmentReq] = field(
            default=None,
            metadata={
                "name": "BookingHotelSegmentReq",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/sharedBooking_v52_0",
            }
        )


@dataclass
class BookingHotelSegmentPortTypeServiceOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["BookingHotelSegmentPortTypeServiceOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        booking_hotel_segment_rsp: Optional[BookingHotelSegmentRsp] = field(
            default=None,
            metadata={
                "name": "BookingHotelSegmentRsp",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/sharedBooking_v52_0",
            }
        )
        fault: Optional["BookingHotelSegmentPortTypeServiceOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            }
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            detail: Optional["BookingHotelSegmentPortTypeServiceOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )

            @dataclass
            class Detail:
                error_info: Optional[V52ErrorInfo] = field(
                    default=None,
                    metadata={
                        "name": "ErrorInfo",
                        "type": "Element",
                        "namespace": "http://www.travelport.com/schema/common_v52_0",
                    }
                )


@dataclass
class BookingPnrElementPortTypeServiceInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    header: Optional["BookingPnrElementPortTypeServiceInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        }
    )
    body: Optional["BookingPnrElementPortTypeServiceInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Header:
        session_context: Optional[SessionContext] = field(
            default=None,
            metadata={
                "name": "SessionContext",
                "type": "Element",
                "namespace": "http://www.travelport.com/soa/common/security/SessionContext_v1",
            }
        )

    @dataclass
    class Body:
        booking_pnr_element_req: Optional[BookingPnrElementReq] = field(
            default=None,
            metadata={
                "name": "BookingPnrElementReq",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/sharedBooking_v52_0",
            }
        )


@dataclass
class BookingPnrElementPortTypeServiceOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["BookingPnrElementPortTypeServiceOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        booking_pnr_element_rsp: Optional[BookingPnrElementRsp] = field(
            default=None,
            metadata={
                "name": "BookingPnrElementRsp",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/sharedBooking_v52_0",
            }
        )
        fault: Optional["BookingPnrElementPortTypeServiceOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            }
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            detail: Optional["BookingPnrElementPortTypeServiceOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )

            @dataclass
            class Detail:
                error_info: Optional[V52ErrorInfo] = field(
                    default=None,
                    metadata={
                        "name": "ErrorInfo",
                        "type": "Element",
                        "namespace": "http://www.travelport.com/schema/common_v52_0",
                    }
                )


@dataclass
class BookingPricingPortTypeServiceInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    header: Optional["BookingPricingPortTypeServiceInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        }
    )
    body: Optional["BookingPricingPortTypeServiceInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Header:
        session_context: Optional[SessionContext] = field(
            default=None,
            metadata={
                "name": "SessionContext",
                "type": "Element",
                "namespace": "http://www.travelport.com/soa/common/security/SessionContext_v1",
            }
        )

    @dataclass
    class Body:
        booking_pricing_req: Optional[BookingPricingReq] = field(
            default=None,
            metadata={
                "name": "BookingPricingReq",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/sharedBooking_v52_0",
            }
        )


@dataclass
class BookingPricingPortTypeServiceOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["BookingPricingPortTypeServiceOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        booking_pricing_rsp: Optional[BookingPricingRsp] = field(
            default=None,
            metadata={
                "name": "BookingPricingRsp",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/sharedBooking_v52_0",
            }
        )
        fault: Optional["BookingPricingPortTypeServiceOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            }
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            detail: Optional["BookingPricingPortTypeServiceOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )

            @dataclass
            class Detail:
                error_info: Optional[V52ErrorInfo] = field(
                    default=None,
                    metadata={
                        "name": "ErrorInfo",
                        "type": "Element",
                        "namespace": "http://www.travelport.com/schema/common_v52_0",
                    }
                )


@dataclass
class BookingRetrieveDocumentPortTypeServiceInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    operation: Optional["BookingRetrieveDocumentPortTypeServiceInput.Operation"] = field(
        default=None,
        metadata={
            "name": "Operation",
            "type": "Element",
        }
    )
    body: Optional["BookingRetrieveDocumentPortTypeServiceInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Operation:
        booking_retrieve_document_req: Optional[BookingRetrieveDocumentReq] = field(
            default=None,
            metadata={
                "name": "BookingRetrieveDocumentReq",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/sharedBooking_v52_0",
            }
        )

    @dataclass
    class Body:
        booking_retrieve_document_req: Optional[BookingRetrieveDocumentReq] = field(
            default=None,
            metadata={
                "name": "BookingRetrieveDocumentReq",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/sharedBooking_v52_0",
            }
        )


@dataclass
class BookingRetrieveDocumentPortTypeServiceOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["BookingRetrieveDocumentPortTypeServiceOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        booking_retrieve_document_rsp: Optional[BookingRetrieveDocumentRsp] = field(
            default=None,
            metadata={
                "name": "BookingRetrieveDocumentRsp",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/sharedBooking_v52_0",
            }
        )
        fault: Optional["BookingRetrieveDocumentPortTypeServiceOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            }
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            detail: Optional["BookingRetrieveDocumentPortTypeServiceOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )

            @dataclass
            class Detail:
                error_info: Optional[V52ErrorInfo] = field(
                    default=None,
                    metadata={
                        "name": "ErrorInfo",
                        "type": "Element",
                        "namespace": "http://www.travelport.com/schema/common_v52_0",
                    }
                )


@dataclass
class BookingSeatAssignmentPortTypeServiceInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    header: Optional["BookingSeatAssignmentPortTypeServiceInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        }
    )
    body: Optional["BookingSeatAssignmentPortTypeServiceInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Header:
        session_context: Optional[SessionContext] = field(
            default=None,
            metadata={
                "name": "SessionContext",
                "type": "Element",
                "namespace": "http://www.travelport.com/soa/common/security/SessionContext_v1",
            }
        )

    @dataclass
    class Body:
        booking_seat_assignment_req: Optional[BookingSeatAssignmentReq] = field(
            default=None,
            metadata={
                "name": "BookingSeatAssignmentReq",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/sharedBooking_v52_0",
            }
        )


@dataclass
class BookingSeatAssignmentPortTypeServiceOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["BookingSeatAssignmentPortTypeServiceOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        booking_seat_assignment_rsp: Optional[BookingSeatAssignmentRsp] = field(
            default=None,
            metadata={
                "name": "BookingSeatAssignmentRsp",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/sharedBooking_v52_0",
            }
        )
        fault: Optional["BookingSeatAssignmentPortTypeServiceOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            }
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            detail: Optional["BookingSeatAssignmentPortTypeServiceOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )

            @dataclass
            class Detail:
                error_info: Optional[V52ErrorInfo] = field(
                    default=None,
                    metadata={
                        "name": "ErrorInfo",
                        "type": "Element",
                        "namespace": "http://www.travelport.com/schema/common_v52_0",
                    }
                )


@dataclass
class BookingStartPortTypeServiceInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["BookingStartPortTypeServiceInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        booking_start_req: Optional[BookingStartReq] = field(
            default=None,
            metadata={
                "name": "BookingStartReq",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/sharedBooking_v52_0",
            }
        )


@dataclass
class BookingStartPortTypeServiceOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["BookingStartPortTypeServiceOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        booking_start_rsp: Optional[BookingStartRsp] = field(
            default=None,
            metadata={
                "name": "BookingStartRsp",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/sharedBooking_v52_0",
            }
        )
        fault: Optional["BookingStartPortTypeServiceOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            }
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            detail: Optional["BookingStartPortTypeServiceOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )

            @dataclass
            class Detail:
                error_info: Optional[V52ErrorInfo] = field(
                    default=None,
                    metadata={
                        "name": "ErrorInfo",
                        "type": "Element",
                        "namespace": "http://www.travelport.com/schema/common_v52_0",
                    }
                )


@dataclass
class BookingTerminalCommandPortTypeServiceInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    header: Optional["BookingTerminalCommandPortTypeServiceInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        }
    )
    body: Optional["BookingTerminalCommandPortTypeServiceInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Header:
        session_context: Optional[SessionContext] = field(
            default=None,
            metadata={
                "name": "SessionContext",
                "type": "Element",
                "namespace": "http://www.travelport.com/soa/common/security/SessionContext_v1",
            }
        )

    @dataclass
    class Body:
        booking_terminal_req: Optional[BookingTerminalReq] = field(
            default=None,
            metadata={
                "name": "BookingTerminalReq",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/sharedBooking_v52_0",
            }
        )


@dataclass
class BookingTerminalCommandPortTypeServiceOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["BookingTerminalCommandPortTypeServiceOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        booking_terminal_rsp: Optional[BookingTerminalRsp] = field(
            default=None,
            metadata={
                "name": "BookingTerminalRsp",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/sharedBooking_v52_0",
            }
        )
        fault: Optional["BookingTerminalCommandPortTypeServiceOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            }
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            detail: Optional["BookingTerminalCommandPortTypeServiceOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )

            @dataclass
            class Detail:
                error_info: Optional[V52ErrorInfo] = field(
                    default=None,
                    metadata={
                        "name": "ErrorInfo",
                        "type": "Element",
                        "namespace": "http://www.travelport.com/schema/common_v52_0",
                    }
                )


@dataclass
class BookingTravelerPortTypeServiceInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    header: Optional["BookingTravelerPortTypeServiceInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        }
    )
    body: Optional["BookingTravelerPortTypeServiceInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Header:
        session_context: Optional[SessionContext] = field(
            default=None,
            metadata={
                "name": "SessionContext",
                "type": "Element",
                "namespace": "http://www.travelport.com/soa/common/security/SessionContext_v1",
            }
        )

    @dataclass
    class Body:
        booking_traveler_req: Optional[BookingTravelerReq] = field(
            default=None,
            metadata={
                "name": "BookingTravelerReq",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/sharedBooking_v52_0",
            }
        )


@dataclass
class BookingTravelerPortTypeServiceOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["BookingTravelerPortTypeServiceOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        booking_traveler_rsp: Optional[BookingTravelerRsp] = field(
            default=None,
            metadata={
                "name": "BookingTravelerRsp",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/sharedBooking_v52_0",
            }
        )
        fault: Optional["BookingTravelerPortTypeServiceOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            }
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            detail: Optional["BookingTravelerPortTypeServiceOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )

            @dataclass
            class Detail:
                error_info: Optional[V52ErrorInfo] = field(
                    default=None,
                    metadata={
                        "name": "ErrorInfo",
                        "type": "Element",
                        "namespace": "http://www.travelport.com/schema/common_v52_0",
                    }
                )


@dataclass
class BrandedFareAdminPortTypeServiceInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["BrandedFareAdminPortTypeServiceInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        branded_fare_admin_req: Optional[BrandedFareAdminReq] = field(
            default=None,
            metadata={
                "name": "BrandedFareAdminReq",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/util_v52_0",
            }
        )


@dataclass
class BrandedFareAdminPortTypeServiceOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["BrandedFareAdminPortTypeServiceOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        branded_fare_admin_rsp: Optional[BrandedFareAdminRsp] = field(
            default=None,
            metadata={
                "name": "BrandedFareAdminRsp",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/util_v52_0",
            }
        )
        fault: Optional["BrandedFareAdminPortTypeServiceOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            }
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            detail: Optional["BrandedFareAdminPortTypeServiceOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )

            @dataclass
            class Detail:
                error_info: Optional[V52ErrorInfo] = field(
                    default=None,
                    metadata={
                        "name": "ErrorInfo",
                        "type": "Element",
                        "namespace": "http://www.travelport.com/schema/common_v52_0",
                    }
                )


@dataclass
class BrandedFareSearchPortTypeServiceInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["BrandedFareSearchPortTypeServiceInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        branded_fare_search_req: Optional[BrandedFareSearchReq] = field(
            default=None,
            metadata={
                "name": "BrandedFareSearchReq",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/util_v52_0",
            }
        )


@dataclass
class BrandedFareSearchPortTypeServiceOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["BrandedFareSearchPortTypeServiceOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        branded_fare_search_rsp: Optional[BrandedFareSearchRsp] = field(
            default=None,
            metadata={
                "name": "BrandedFareSearchRsp",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/util_v52_0",
            }
        )
        fault: Optional["BrandedFareSearchPortTypeServiceOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            }
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            detail: Optional["BrandedFareSearchPortTypeServiceOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )

            @dataclass
            class Detail:
                error_info: Optional[V52ErrorInfo] = field(
                    default=None,
                    metadata={
                        "name": "ErrorInfo",
                        "type": "Element",
                        "namespace": "http://www.travelport.com/schema/common_v52_0",
                    }
                )


@dataclass
class CalculateTaxPortTypeServiceInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["CalculateTaxPortTypeServiceInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        calculate_tax_req: Optional[CalculateTaxReq] = field(
            default=None,
            metadata={
                "name": "CalculateTaxReq",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/util_v52_0",
            }
        )


@dataclass
class CalculateTaxPortTypeServiceOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["CalculateTaxPortTypeServiceOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        calculate_tax_rsp: Optional[CalculateTaxRsp] = field(
            default=None,
            metadata={
                "name": "CalculateTaxRsp",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/util_v52_0",
            }
        )
        fault: Optional["CalculateTaxPortTypeServiceOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            }
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            detail: Optional["CalculateTaxPortTypeServiceOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )

            @dataclass
            class Detail:
                error_info: Optional[V52ErrorInfo] = field(
                    default=None,
                    metadata={
                        "name": "ErrorInfo",
                        "type": "Element",
                        "namespace": "http://www.travelport.com/schema/common_v52_0",
                    }
                )


@dataclass
class ContentProviderRetrievePortTypeServiceInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["ContentProviderRetrievePortTypeServiceInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        content_provider_retrieve_req: Optional[ContentProviderRetrieveReq] = field(
            default=None,
            metadata={
                "name": "ContentProviderRetrieveReq",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/util_v52_0",
            }
        )


@dataclass
class ContentProviderRetrievePortTypeServiceOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["ContentProviderRetrievePortTypeServiceOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        content_provider_retrieve_rsp: Optional[ContentProviderRetrieveRsp] = field(
            default=None,
            metadata={
                "name": "ContentProviderRetrieveRsp",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/util_v52_0",
            }
        )
        fault: Optional["ContentProviderRetrievePortTypeServiceOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            }
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            detail: Optional["ContentProviderRetrievePortTypeServiceOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )

            @dataclass
            class Detail:
                error_info: Optional[V52ErrorInfo] = field(
                    default=None,
                    metadata={
                        "name": "ErrorInfo",
                        "type": "Element",
                        "namespace": "http://www.travelport.com/schema/common_v52_0",
                    }
                )


@dataclass
class CreateTerminalSessionServicePortTypeServiceInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["CreateTerminalSessionServicePortTypeServiceInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        create_terminal_session_req: Optional[CreateTerminalSessionReq] = field(
            default=None,
            metadata={
                "name": "CreateTerminalSessionReq",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/terminal_v33_0",
            }
        )


@dataclass
class CreateTerminalSessionServicePortTypeServiceOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["CreateTerminalSessionServicePortTypeServiceOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        create_terminal_session_rsp: Optional[CreateTerminalSessionRsp] = field(
            default=None,
            metadata={
                "name": "CreateTerminalSessionRsp",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/terminal_v33_0",
            }
        )
        fault: Optional["CreateTerminalSessionServicePortTypeServiceOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            }
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            detail: Optional["CreateTerminalSessionServicePortTypeServiceOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )

            @dataclass
            class Detail:
                error_info: Optional[V33ErrorInfo] = field(
                    default=None,
                    metadata={
                        "name": "ErrorInfo",
                        "type": "Element",
                        "namespace": "http://www.travelport.com/schema/common_v33_0",
                    }
                )


@dataclass
class EmdissuancePortTypeServiceInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["EmdissuancePortTypeServiceInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        emdissuance_req: Optional[EmdissuanceReq] = field(
            default=None,
            metadata={
                "name": "EMDIssuanceReq",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/air_v52_0",
            }
        )


@dataclass
class EmdissuancePortTypeServiceOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["EmdissuancePortTypeServiceOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        emdissuance_rsp: Optional[EmdissuanceRsp] = field(
            default=None,
            metadata={
                "name": "EMDIssuanceRsp",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/air_v52_0",
            }
        )
        fault: Optional["EmdissuancePortTypeServiceOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            }
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            detail: Optional["EmdissuancePortTypeServiceOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )

            @dataclass
            class Detail:
                error_info: Optional[V52ErrorInfo] = field(
                    default=None,
                    metadata={
                        "name": "ErrorInfo",
                        "type": "Element",
                        "namespace": "http://www.travelport.com/schema/common_v52_0",
                    }
                )


@dataclass
class EmdretrievePortTypeServiceInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["EmdretrievePortTypeServiceInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        emdretrieve_req: Optional[EmdretrieveReq] = field(
            default=None,
            metadata={
                "name": "EMDRetrieveReq",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/air_v52_0",
            }
        )


@dataclass
class EmdretrievePortTypeServiceOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["EmdretrievePortTypeServiceOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        emdretrieve_rsp: Optional[EmdretrieveRsp] = field(
            default=None,
            metadata={
                "name": "EMDRetrieveRsp",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/air_v52_0",
            }
        )
        fault: Optional["EmdretrievePortTypeServiceOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            }
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            detail: Optional["EmdretrievePortTypeServiceOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )

            @dataclass
            class Detail:
                error_info: Optional[V52ErrorInfo] = field(
                    default=None,
                    metadata={
                        "name": "ErrorInfo",
                        "type": "Element",
                        "namespace": "http://www.travelport.com/schema/common_v52_0",
                    }
                )


@dataclass
class EndTerminalSessionServicePortTypeServiceInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["EndTerminalSessionServicePortTypeServiceInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        end_terminal_session_req: Optional[EndTerminalSessionReq] = field(
            default=None,
            metadata={
                "name": "EndTerminalSessionReq",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/terminal_v33_0",
            }
        )


@dataclass
class EndTerminalSessionServicePortTypeServiceOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["EndTerminalSessionServicePortTypeServiceOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        end_terminal_session_rsp: Optional[EndTerminalSessionRsp] = field(
            default=None,
            metadata={
                "name": "EndTerminalSessionRsp",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/terminal_v33_0",
            }
        )
        fault: Optional["EndTerminalSessionServicePortTypeServiceOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            }
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            detail: Optional["EndTerminalSessionServicePortTypeServiceOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )

            @dataclass
            class Detail:
                error_info: Optional[V33ErrorInfo] = field(
                    default=None,
                    metadata={
                        "name": "ErrorInfo",
                        "type": "Element",
                        "namespace": "http://www.travelport.com/schema/common_v33_0",
                    }
                )


@dataclass
class ExternalCacheAccessPortTypeServiceInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["ExternalCacheAccessPortTypeServiceInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        external_cache_access_req: Optional[ExternalCacheAccessReq] = field(
            default=None,
            metadata={
                "name": "ExternalCacheAccessReq",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/system_v32_0",
            }
        )


@dataclass
class ExternalCacheAccessPortTypeServiceOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["ExternalCacheAccessPortTypeServiceOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        external_cache_access_rsp: Optional[ExternalCacheAccessRsp] = field(
            default=None,
            metadata={
                "name": "ExternalCacheAccessRsp",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/system_v32_0",
            }
        )
        fault: Optional["ExternalCacheAccessPortTypeServiceOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            }
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            detail: Optional["ExternalCacheAccessPortTypeServiceOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )

            @dataclass
            class Detail:
                error_info: Optional[V52ErrorInfo] = field(
                    default=None,
                    metadata={
                        "name": "ErrorInfo",
                        "type": "Element",
                        "namespace": "http://www.travelport.com/schema/common_v52_0",
                    }
                )


@dataclass
class FindEmployeesOnFlightServicePortTypeServiceInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["FindEmployeesOnFlightServicePortTypeServiceInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        find_employees_on_flight_req: Optional[FindEmployeesOnFlightReq] = field(
            default=None,
            metadata={
                "name": "FindEmployeesOnFlightReq",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/util_v52_0",
            }
        )


@dataclass
class FindEmployeesOnFlightServicePortTypeServiceOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["FindEmployeesOnFlightServicePortTypeServiceOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        find_employees_on_flight_rsp: Optional[FindEmployeesOnFlightRsp] = field(
            default=None,
            metadata={
                "name": "FindEmployeesOnFlightRsp",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/util_v52_0",
            }
        )
        fault: Optional["FindEmployeesOnFlightServicePortTypeServiceOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            }
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            detail: Optional["FindEmployeesOnFlightServicePortTypeServiceOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )

            @dataclass
            class Detail:
                error_info: Optional[V52ErrorInfo] = field(
                    default=None,
                    metadata={
                        "name": "ErrorInfo",
                        "type": "Element",
                        "namespace": "http://www.travelport.com/schema/common_v52_0",
                    }
                )


@dataclass
class FlightDetailsPortTypeServiceInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["FlightDetailsPortTypeServiceInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        flight_details_req: Optional[FlightDetailsReq] = field(
            default=None,
            metadata={
                "name": "FlightDetailsReq",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/air_v52_0",
            }
        )


@dataclass
class FlightDetailsPortTypeServiceOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["FlightDetailsPortTypeServiceOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        flight_details_rsp: Optional[FlightDetailsRsp] = field(
            default=None,
            metadata={
                "name": "FlightDetailsRsp",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/air_v52_0",
            }
        )
        fault: Optional["FlightDetailsPortTypeServiceOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            }
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            detail: Optional["FlightDetailsPortTypeServiceOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )

            @dataclass
            class Detail:
                error_info: Optional[V52ErrorInfo] = field(
                    default=None,
                    metadata={
                        "name": "ErrorInfo",
                        "type": "Element",
                        "namespace": "http://www.travelport.com/schema/common_v52_0",
                    }
                )


@dataclass
class FlightInfoPortTypeServiceInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["FlightInfoPortTypeServiceInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        flight_information_req: Optional[FlightInformationReq] = field(
            default=None,
            metadata={
                "name": "FlightInformationReq",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/air_v52_0",
            }
        )


@dataclass
class FlightInfoPortTypeServiceOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["FlightInfoPortTypeServiceOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        flight_information_rsp: Optional[FlightInformationRsp] = field(
            default=None,
            metadata={
                "name": "FlightInformationRsp",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/air_v52_0",
            }
        )
        fault: Optional["FlightInfoPortTypeServiceOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            }
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            detail: Optional["FlightInfoPortTypeServiceOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )

            @dataclass
            class Detail:
                error_info: Optional[V52ErrorInfo] = field(
                    default=None,
                    metadata={
                        "name": "ErrorInfo",
                        "type": "Element",
                        "namespace": "http://www.travelport.com/schema/common_v52_0",
                    }
                )


@dataclass
class FlightTimeTablePortTypeServiceInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["FlightTimeTablePortTypeServiceInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        flight_time_table_req: Optional[FlightTimeTableReq] = field(
            default=None,
            metadata={
                "name": "FlightTimeTableReq",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/air_v52_0",
            }
        )


@dataclass
class FlightTimeTablePortTypeServiceOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["FlightTimeTablePortTypeServiceOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        flight_time_table_rsp: Optional[FlightTimeTableRsp] = field(
            default=None,
            metadata={
                "name": "FlightTimeTableRsp",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/air_v52_0",
            }
        )
        fault: Optional["FlightTimeTablePortTypeServiceOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            }
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            detail: Optional["FlightTimeTablePortTypeServiceOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )

            @dataclass
            class Detail:
                error_info: Optional[V52ErrorInfo] = field(
                    default=None,
                    metadata={
                        "name": "ErrorInfo",
                        "type": "Element",
                        "namespace": "http://www.travelport.com/schema/common_v52_0",
                    }
                )


@dataclass
class GdsEnterQueueServicePortTypeServiceInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["GdsEnterQueueServicePortTypeServiceInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        gds_enter_queue_req: Optional[GdsEnterQueueReq] = field(
            default=None,
            metadata={
                "name": "GdsEnterQueueReq",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/gdsQueue_v52_0",
            }
        )


@dataclass
class GdsEnterQueueServicePortTypeServiceOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["GdsEnterQueueServicePortTypeServiceOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        gds_enter_queue_rsp: Optional[GdsEnterQueueRsp] = field(
            default=None,
            metadata={
                "name": "GdsEnterQueueRsp",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/gdsQueue_v52_0",
            }
        )
        fault: Optional["GdsEnterQueueServicePortTypeServiceOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            }
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            detail: Optional["GdsEnterQueueServicePortTypeServiceOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )

            @dataclass
            class Detail:
                error_info: Optional[V52ErrorInfo] = field(
                    default=None,
                    metadata={
                        "name": "ErrorInfo",
                        "type": "Element",
                        "namespace": "http://www.travelport.com/schema/common_v52_0",
                    }
                )


@dataclass
class GdsExitQueueServicePortTypeServiceInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["GdsExitQueueServicePortTypeServiceInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        gds_exit_queue_req: Optional[GdsExitQueueReq] = field(
            default=None,
            metadata={
                "name": "GdsExitQueueReq",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/gdsQueue_v52_0",
            }
        )


@dataclass
class GdsExitQueueServicePortTypeServiceOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["GdsExitQueueServicePortTypeServiceOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        gds_exit_queue_rsp: Optional[GdsExitQueueRsp] = field(
            default=None,
            metadata={
                "name": "GdsExitQueueRsp",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/gdsQueue_v52_0",
            }
        )
        fault: Optional["GdsExitQueueServicePortTypeServiceOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            }
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            detail: Optional["GdsExitQueueServicePortTypeServiceOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )

            @dataclass
            class Detail:
                error_info: Optional[V52ErrorInfo] = field(
                    default=None,
                    metadata={
                        "name": "ErrorInfo",
                        "type": "Element",
                        "namespace": "http://www.travelport.com/schema/common_v52_0",
                    }
                )


@dataclass
class GdsNextOnQueueServicePortTypeServiceInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["GdsNextOnQueueServicePortTypeServiceInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        gds_next_on_queue_req: Optional[GdsNextOnQueueReq] = field(
            default=None,
            metadata={
                "name": "GdsNextOnQueueReq",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/gdsQueue_v52_0",
            }
        )


@dataclass
class GdsNextOnQueueServicePortTypeServiceOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["GdsNextOnQueueServicePortTypeServiceOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        gds_next_on_queue_rsp: Optional[GdsNextOnQueueRsp] = field(
            default=None,
            metadata={
                "name": "GdsNextOnQueueRsp",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/gdsQueue_v52_0",
            }
        )
        fault: Optional["GdsNextOnQueueServicePortTypeServiceOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            }
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            detail: Optional["GdsNextOnQueueServicePortTypeServiceOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )

            @dataclass
            class Detail:
                error_info: Optional[V52ErrorInfo] = field(
                    default=None,
                    metadata={
                        "name": "ErrorInfo",
                        "type": "Element",
                        "namespace": "http://www.travelport.com/schema/common_v52_0",
                    }
                )


@dataclass
class GdsQueueAgentListServicePortTypeServiceInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["GdsQueueAgentListServicePortTypeServiceInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        gds_queue_agent_list_req: Optional[GdsQueueAgentListReq] = field(
            default=None,
            metadata={
                "name": "GdsQueueAgentListReq",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/gdsQueue_v52_0",
            }
        )


@dataclass
class GdsQueueAgentListServicePortTypeServiceOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["GdsQueueAgentListServicePortTypeServiceOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        gds_queue_agent_list_rsp: Optional[GdsQueueAgentListRsp] = field(
            default=None,
            metadata={
                "name": "GdsQueueAgentListRsp",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/gdsQueue_v52_0",
            }
        )
        fault: Optional["GdsQueueAgentListServicePortTypeServiceOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            }
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            detail: Optional["GdsQueueAgentListServicePortTypeServiceOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )

            @dataclass
            class Detail:
                error_info: Optional[V52ErrorInfo] = field(
                    default=None,
                    metadata={
                        "name": "ErrorInfo",
                        "type": "Element",
                        "namespace": "http://www.travelport.com/schema/common_v52_0",
                    }
                )


@dataclass
class GdsQueueCountServicePortTypeServiceInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["GdsQueueCountServicePortTypeServiceInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        gds_queue_count_req: Optional[GdsQueueCountReq] = field(
            default=None,
            metadata={
                "name": "GdsQueueCountReq",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/gdsQueue_v52_0",
            }
        )


@dataclass
class GdsQueueCountServicePortTypeServiceOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["GdsQueueCountServicePortTypeServiceOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        gds_queue_count_rsp: Optional[GdsQueueCountRsp] = field(
            default=None,
            metadata={
                "name": "GdsQueueCountRsp",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/gdsQueue_v52_0",
            }
        )
        fault: Optional["GdsQueueCountServicePortTypeServiceOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            }
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            detail: Optional["GdsQueueCountServicePortTypeServiceOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )

            @dataclass
            class Detail:
                error_info: Optional[V52ErrorInfo] = field(
                    default=None,
                    metadata={
                        "name": "ErrorInfo",
                        "type": "Element",
                        "namespace": "http://www.travelport.com/schema/common_v52_0",
                    }
                )


@dataclass
class GdsQueueListServicePortTypeServiceInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["GdsQueueListServicePortTypeServiceInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        gds_queue_list_req: Optional[GdsQueueListReq] = field(
            default=None,
            metadata={
                "name": "GdsQueueListReq",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/gdsQueue_v52_0",
            }
        )


@dataclass
class GdsQueueListServicePortTypeServiceOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["GdsQueueListServicePortTypeServiceOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        gds_queue_list_rsp: Optional[GdsQueueListRsp] = field(
            default=None,
            metadata={
                "name": "GdsQueueListRsp",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/gdsQueue_v52_0",
            }
        )
        fault: Optional["GdsQueueListServicePortTypeServiceOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            }
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            detail: Optional["GdsQueueListServicePortTypeServiceOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )

            @dataclass
            class Detail:
                error_info: Optional[V52ErrorInfo] = field(
                    default=None,
                    metadata={
                        "name": "ErrorInfo",
                        "type": "Element",
                        "namespace": "http://www.travelport.com/schema/common_v52_0",
                    }
                )


@dataclass
class GdsQueuePlaceServicePortTypeServiceInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    header: Optional["GdsQueuePlaceServicePortTypeServiceInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        }
    )
    body: Optional["GdsQueuePlaceServicePortTypeServiceInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Header:
        supported_versions: Optional[SupportedVersions] = field(
            default=None,
            metadata={
                "name": "SupportedVersions",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/universal_v52_0",
            }
        )

    @dataclass
    class Body:
        gds_queue_place_req: Optional[GdsQueuePlaceReq] = field(
            default=None,
            metadata={
                "name": "GdsQueuePlaceReq",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/gdsQueue_v52_0",
            }
        )


@dataclass
class GdsQueuePlaceServicePortTypeServiceOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["GdsQueuePlaceServicePortTypeServiceOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        gds_queue_place_rsp: Optional[GdsQueuePlaceRsp] = field(
            default=None,
            metadata={
                "name": "GdsQueuePlaceRsp",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/gdsQueue_v52_0",
            }
        )
        fault: Optional["GdsQueuePlaceServicePortTypeServiceOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            }
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            detail: Optional["GdsQueuePlaceServicePortTypeServiceOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )

            @dataclass
            class Detail:
                error_info: Optional[V52ErrorInfo] = field(
                    default=None,
                    metadata={
                        "name": "ErrorInfo",
                        "type": "Element",
                        "namespace": "http://www.travelport.com/schema/common_v52_0",
                    }
                )


@dataclass
class GdsQueueRemoveServicePortTypeServiceInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["GdsQueueRemoveServicePortTypeServiceInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        gds_queue_remove_req: Optional[GdsQueueRemoveReq] = field(
            default=None,
            metadata={
                "name": "GdsQueueRemoveReq",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/gdsQueue_v52_0",
            }
        )


@dataclass
class GdsQueueRemoveServicePortTypeServiceOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["GdsQueueRemoveServicePortTypeServiceOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        gds_queue_remove_rsp: Optional[GdsQueueRemoveRsp] = field(
            default=None,
            metadata={
                "name": "GdsQueueRemoveRsp",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/gdsQueue_v52_0",
            }
        )
        fault: Optional["GdsQueueRemoveServicePortTypeServiceOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            }
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            detail: Optional["GdsQueueRemoveServicePortTypeServiceOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )

            @dataclass
            class Detail:
                error_info: Optional[V52ErrorInfo] = field(
                    default=None,
                    metadata={
                        "name": "ErrorInfo",
                        "type": "Element",
                        "namespace": "http://www.travelport.com/schema/common_v52_0",
                    }
                )


@dataclass
class HotelCancelServicePortTypeServiceInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    header: Optional["HotelCancelServicePortTypeServiceInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        }
    )
    body: Optional["HotelCancelServicePortTypeServiceInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Header:
        supported_versions: Optional[SupportedVersions] = field(
            default=None,
            metadata={
                "name": "SupportedVersions",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/universal_v52_0",
            }
        )

    @dataclass
    class Body:
        hotel_cancel_req: Optional[HotelCancelReq] = field(
            default=None,
            metadata={
                "name": "HotelCancelReq",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/universal_v52_0",
            }
        )


@dataclass
class HotelCancelServicePortTypeServiceOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["HotelCancelServicePortTypeServiceOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        hotel_cancel_rsp: Optional[HotelCancelRsp] = field(
            default=None,
            metadata={
                "name": "HotelCancelRsp",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/universal_v52_0",
            }
        )
        fault: Optional["HotelCancelServicePortTypeServiceOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            }
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            detail: Optional["HotelCancelServicePortTypeServiceOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )

            @dataclass
            class Detail:
                error_info: Optional[V52ErrorInfo] = field(
                    default=None,
                    metadata={
                        "name": "ErrorInfo",
                        "type": "Element",
                        "namespace": "http://www.travelport.com/schema/common_v52_0",
                    }
                )


@dataclass
class HotelDetailsServicePortTypeServiceInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["HotelDetailsServicePortTypeServiceInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        hotel_details_req: Optional[HotelDetailsReq] = field(
            default=None,
            metadata={
                "name": "HotelDetailsReq",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/hotel_v52_0",
            }
        )


@dataclass
class HotelDetailsServicePortTypeServiceOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["HotelDetailsServicePortTypeServiceOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        hotel_details_rsp: Optional[HotelDetailsRsp] = field(
            default=None,
            metadata={
                "name": "HotelDetailsRsp",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/hotel_v52_0",
            }
        )
        fault: Optional["HotelDetailsServicePortTypeServiceOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            }
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            detail: Optional["HotelDetailsServicePortTypeServiceOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )

            @dataclass
            class Detail:
                error_info: Optional[V52ErrorInfo] = field(
                    default=None,
                    metadata={
                        "name": "ErrorInfo",
                        "type": "Element",
                        "namespace": "http://www.travelport.com/schema/common_v52_0",
                    }
                )


@dataclass
class HotelKeywordsServicePortTypeServiceInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["HotelKeywordsServicePortTypeServiceInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        hotel_keyword_req: Optional[HotelKeywordReq] = field(
            default=None,
            metadata={
                "name": "HotelKeywordReq",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/hotel_v52_0",
            }
        )


@dataclass
class HotelKeywordsServicePortTypeServiceOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["HotelKeywordsServicePortTypeServiceOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        hotel_keyword_rsp: Optional[HotelKeywordRsp] = field(
            default=None,
            metadata={
                "name": "HotelKeywordRsp",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/hotel_v52_0",
            }
        )
        fault: Optional["HotelKeywordsServicePortTypeServiceOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            }
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            detail: Optional["HotelKeywordsServicePortTypeServiceOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )

            @dataclass
            class Detail:
                error_info: Optional[V52ErrorInfo] = field(
                    default=None,
                    metadata={
                        "name": "ErrorInfo",
                        "type": "Element",
                        "namespace": "http://www.travelport.com/schema/common_v52_0",
                    }
                )


@dataclass
class HotelMediaLinksServicePortTypeServiceInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["HotelMediaLinksServicePortTypeServiceInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        hotel_media_links_req: Optional[HotelMediaLinksReq] = field(
            default=None,
            metadata={
                "name": "HotelMediaLinksReq",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/hotel_v52_0",
            }
        )


@dataclass
class HotelMediaLinksServicePortTypeServiceOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["HotelMediaLinksServicePortTypeServiceOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        hotel_media_links_rsp: Optional[HotelMediaLinksRsp] = field(
            default=None,
            metadata={
                "name": "HotelMediaLinksRsp",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/hotel_v52_0",
            }
        )
        fault: Optional["HotelMediaLinksServicePortTypeServiceOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            }
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            detail: Optional["HotelMediaLinksServicePortTypeServiceOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )

            @dataclass
            class Detail:
                error_info: Optional[V52ErrorInfo] = field(
                    default=None,
                    metadata={
                        "name": "ErrorInfo",
                        "type": "Element",
                        "namespace": "http://www.travelport.com/schema/common_v52_0",
                    }
                )


@dataclass
class HotelReservationServicePortTypeServiceInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    header: Optional["HotelReservationServicePortTypeServiceInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        }
    )
    body: Optional["HotelReservationServicePortTypeServiceInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Header:
        supported_versions: Optional[SupportedVersions] = field(
            default=None,
            metadata={
                "name": "SupportedVersions",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/universal_v52_0",
            }
        )

    @dataclass
    class Body:
        hotel_create_reservation_req: Optional[HotelCreateReservationReq] = field(
            default=None,
            metadata={
                "name": "HotelCreateReservationReq",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/universal_v52_0",
            }
        )


@dataclass
class HotelReservationServicePortTypeServiceOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["HotelReservationServicePortTypeServiceOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        hotel_create_reservation_rsp: Optional[HotelCreateReservationRsp] = field(
            default=None,
            metadata={
                "name": "HotelCreateReservationRsp",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/universal_v52_0",
            }
        )
        fault: Optional["HotelReservationServicePortTypeServiceOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            }
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            detail: Optional["HotelReservationServicePortTypeServiceOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )

            @dataclass
            class Detail:
                error_info: Optional[V52ErrorInfo] = field(
                    default=None,
                    metadata={
                        "name": "ErrorInfo",
                        "type": "Element",
                        "namespace": "http://www.travelport.com/schema/common_v52_0",
                    }
                )
                price_match_error: Optional[PriceMatchError] = field(
                    default=None,
                    metadata={
                        "name": "PriceMatchError",
                        "type": "Element",
                        "namespace": "http://www.travelport.com/schema/common_v52_0",
                    }
                )


@dataclass
class HotelRetrieveServicePortTypeServiceInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["HotelRetrieveServicePortTypeServiceInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        hotel_retrieve_req: Optional[HotelRetrieveReq] = field(
            default=None,
            metadata={
                "name": "HotelRetrieveReq",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/hotel_v52_0",
            }
        )


@dataclass
class HotelRetrieveServicePortTypeServiceOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["HotelRetrieveServicePortTypeServiceOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        hotel_retrieve_rsp: Optional[HotelRetrieveRsp] = field(
            default=None,
            metadata={
                "name": "HotelRetrieveRsp",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/hotel_v52_0",
            }
        )
        fault: Optional["HotelRetrieveServicePortTypeServiceOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            }
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            detail: Optional["HotelRetrieveServicePortTypeServiceOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )

            @dataclass
            class Detail:
                error_info: Optional[V52ErrorInfo] = field(
                    default=None,
                    metadata={
                        "name": "ErrorInfo",
                        "type": "Element",
                        "namespace": "http://www.travelport.com/schema/common_v52_0",
                    }
                )


@dataclass
class HotelRulesServicePortTypeServiceInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["HotelRulesServicePortTypeServiceInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        hotel_rules_req: Optional[HotelRulesReq] = field(
            default=None,
            metadata={
                "name": "HotelRulesReq",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/hotel_v52_0",
            }
        )


@dataclass
class HotelRulesServicePortTypeServiceOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["HotelRulesServicePortTypeServiceOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        hotel_rules_rsp: Optional[HotelRulesRsp] = field(
            default=None,
            metadata={
                "name": "HotelRulesRsp",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/hotel_v52_0",
            }
        )
        fault: Optional["HotelRulesServicePortTypeServiceOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            }
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            detail: Optional["HotelRulesServicePortTypeServiceOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )

            @dataclass
            class Detail:
                error_info: Optional[V52ErrorInfo] = field(
                    default=None,
                    metadata={
                        "name": "ErrorInfo",
                        "type": "Element",
                        "namespace": "http://www.travelport.com/schema/common_v52_0",
                    }
                )


@dataclass
class HotelSearchServicePortTypeServiceInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["HotelSearchServicePortTypeServiceInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        hotel_search_availability_req: Optional[HotelSearchAvailabilityReq] = field(
            default=None,
            metadata={
                "name": "HotelSearchAvailabilityReq",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/hotel_v52_0",
            }
        )


@dataclass
class HotelSearchServicePortTypeServiceOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["HotelSearchServicePortTypeServiceOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        hotel_search_availability_rsp: Optional[HotelSearchAvailabilityRsp] = field(
            default=None,
            metadata={
                "name": "HotelSearchAvailabilityRsp",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/hotel_v52_0",
            }
        )
        fault: Optional["HotelSearchServicePortTypeServiceOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            }
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            detail: Optional["HotelSearchServicePortTypeServiceOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )

            @dataclass
            class Detail:
                error_info: Optional[V52ErrorInfo] = field(
                    default=None,
                    metadata={
                        "name": "ErrorInfo",
                        "type": "Element",
                        "namespace": "http://www.travelport.com/schema/common_v52_0",
                    }
                )


@dataclass
class HotelSuperShopperServicePortTypeServiceInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["HotelSuperShopperServicePortTypeServiceInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        hotel_super_shopper_req: Optional[HotelSuperShopperReq] = field(
            default=None,
            metadata={
                "name": "HotelSuperShopperReq",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/hotel_v52_0",
            }
        )


@dataclass
class HotelSuperShopperServicePortTypeServiceOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["HotelSuperShopperServicePortTypeServiceOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        hotel_super_shopper_rsp: Optional[HotelSuperShopperRsp] = field(
            default=None,
            metadata={
                "name": "HotelSuperShopperRsp",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/hotel_v52_0",
            }
        )
        fault: Optional["HotelSuperShopperServicePortTypeServiceOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            }
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            detail: Optional["HotelSuperShopperServicePortTypeServiceOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )

            @dataclass
            class Detail:
                error_info: Optional[V52ErrorInfo] = field(
                    default=None,
                    metadata={
                        "name": "ErrorInfo",
                        "type": "Element",
                        "namespace": "http://www.travelport.com/schema/common_v52_0",
                    }
                )


@dataclass
class HotelUpsellSearchServicePortTypeServiceInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["HotelUpsellSearchServicePortTypeServiceInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        hotel_upsell_details_req: Optional[HotelUpsellDetailsReq] = field(
            default=None,
            metadata={
                "name": "HotelUpsellDetailsReq",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/hotel_v52_0",
            }
        )


@dataclass
class HotelUpsellSearchServicePortTypeServiceOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["HotelUpsellSearchServicePortTypeServiceOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        hotel_upsell_details_rsp: Optional[HotelUpsellDetailsRsp] = field(
            default=None,
            metadata={
                "name": "HotelUpsellDetailsRsp",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/hotel_v52_0",
            }
        )
        fault: Optional["HotelUpsellSearchServicePortTypeServiceOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            }
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            detail: Optional["HotelUpsellSearchServicePortTypeServiceOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )

            @dataclass
            class Detail:
                error_info: Optional[V52ErrorInfo] = field(
                    default=None,
                    metadata={
                        "name": "ErrorInfo",
                        "type": "Element",
                        "namespace": "http://www.travelport.com/schema/common_v52_0",
                    }
                )


@dataclass
class McoCreateAgencyFeePortTypeServiceInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["McoCreateAgencyFeePortTypeServiceInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        create_agency_fee_mco_req: Optional[CreateAgencyFeeMcoReq] = field(
            default=None,
            metadata={
                "name": "CreateAgencyFeeMcoReq",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/util_v52_0",
            }
        )


@dataclass
class McoCreateAgencyFeePortTypeServiceOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["McoCreateAgencyFeePortTypeServiceOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        create_agency_fee_mco_rsp: Optional[CreateAgencyFeeMcoRsp] = field(
            default=None,
            metadata={
                "name": "CreateAgencyFeeMcoRsp",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/util_v52_0",
            }
        )
        fault: Optional["McoCreateAgencyFeePortTypeServiceOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            }
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            detail: Optional["McoCreateAgencyFeePortTypeServiceOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )

            @dataclass
            class Detail:
                error_info: Optional[V52ErrorInfo] = field(
                    default=None,
                    metadata={
                        "name": "ErrorInfo",
                        "type": "Element",
                        "namespace": "http://www.travelport.com/schema/common_v52_0",
                    }
                )


@dataclass
class McoSearchPortTypeServiceInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["McoSearchPortTypeServiceInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        mco_search_req: Optional[McoSearchReq] = field(
            default=None,
            metadata={
                "name": "McoSearchReq",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/util_v52_0",
            }
        )


@dataclass
class McoSearchPortTypeServiceOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["McoSearchPortTypeServiceOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        mco_search_rsp: Optional[McoSearchRsp] = field(
            default=None,
            metadata={
                "name": "McoSearchRsp",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/util_v52_0",
            }
        )
        fault: Optional["McoSearchPortTypeServiceOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            }
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            detail: Optional["McoSearchPortTypeServiceOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )

            @dataclass
            class Detail:
                error_info: Optional[V52ErrorInfo] = field(
                    default=None,
                    metadata={
                        "name": "ErrorInfo",
                        "type": "Element",
                        "namespace": "http://www.travelport.com/schema/common_v52_0",
                    }
                )


@dataclass
class McoVoidPortTypeServiceInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["McoVoidPortTypeServiceInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        mco_void_req: Optional[McoVoidReq] = field(
            default=None,
            metadata={
                "name": "McoVoidReq",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/util_v52_0",
            }
        )


@dataclass
class McoVoidPortTypeServiceOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["McoVoidPortTypeServiceOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        mco_void_rsp: Optional[McoVoidRsp] = field(
            default=None,
            metadata={
                "name": "McoVoidRsp",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/util_v52_0",
            }
        )
        fault: Optional["McoVoidPortTypeServiceOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            }
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            detail: Optional["McoVoidPortTypeServiceOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )

            @dataclass
            class Detail:
                error_info: Optional[V52ErrorInfo] = field(
                    default=None,
                    metadata={
                        "name": "ErrorInfo",
                        "type": "Element",
                        "namespace": "http://www.travelport.com/schema/common_v52_0",
                    }
                )


@dataclass
class MctCountPortTypeServiceInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["MctCountPortTypeServiceInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        mct_count_req: Optional[MctCountReq] = field(
            default=None,
            metadata={
                "name": "MctCountReq",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/util_v52_0",
            }
        )


@dataclass
class MctCountPortTypeServiceOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["MctCountPortTypeServiceOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        mct_count_rsp: Optional[MctCountRsp] = field(
            default=None,
            metadata={
                "name": "MctCountRsp",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/util_v52_0",
            }
        )
        fault: Optional["MctCountPortTypeServiceOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            }
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            detail: Optional["MctCountPortTypeServiceOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )

            @dataclass
            class Detail:
                error_info: Optional[V52ErrorInfo] = field(
                    default=None,
                    metadata={
                        "name": "ErrorInfo",
                        "type": "Element",
                        "namespace": "http://www.travelport.com/schema/common_v52_0",
                    }
                )


@dataclass
class MctLookupPortTypeServiceInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["MctLookupPortTypeServiceInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        mct_lookup_req: Optional[MctLookupReq] = field(
            default=None,
            metadata={
                "name": "MctLookupReq",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/util_v52_0",
            }
        )


@dataclass
class MctLookupPortTypeServiceOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["MctLookupPortTypeServiceOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        mct_lookup_rsp: Optional[MctLookupRsp] = field(
            default=None,
            metadata={
                "name": "MctLookupRsp",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/util_v52_0",
            }
        )
        fault: Optional["MctLookupPortTypeServiceOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            }
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            detail: Optional["MctLookupPortTypeServiceOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )

            @dataclass
            class Detail:
                error_info: Optional[V52ErrorInfo] = field(
                    default=None,
                    metadata={
                        "name": "ErrorInfo",
                        "type": "Element",
                        "namespace": "http://www.travelport.com/schema/common_v52_0",
                    }
                )


@dataclass
class PassiveCancelServicePortTypeServiceInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    header: Optional["PassiveCancelServicePortTypeServiceInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        }
    )
    body: Optional["PassiveCancelServicePortTypeServiceInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Header:
        supported_versions: Optional[SupportedVersions] = field(
            default=None,
            metadata={
                "name": "SupportedVersions",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/universal_v52_0",
            }
        )

    @dataclass
    class Body:
        passive_cancel_req: Optional[PassiveCancelReq] = field(
            default=None,
            metadata={
                "name": "PassiveCancelReq",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/universal_v52_0",
            }
        )


@dataclass
class PassiveCancelServicePortTypeServiceOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["PassiveCancelServicePortTypeServiceOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        passive_cancel_rsp: Optional[PassiveCancelRsp] = field(
            default=None,
            metadata={
                "name": "PassiveCancelRsp",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/universal_v52_0",
            }
        )
        fault: Optional["PassiveCancelServicePortTypeServiceOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            }
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            detail: Optional["PassiveCancelServicePortTypeServiceOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )

            @dataclass
            class Detail:
                error_info: Optional[V52ErrorInfo] = field(
                    default=None,
                    metadata={
                        "name": "ErrorInfo",
                        "type": "Element",
                        "namespace": "http://www.travelport.com/schema/common_v52_0",
                    }
                )


@dataclass
class PassiveReservationServicePortTypeServiceInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    header: Optional["PassiveReservationServicePortTypeServiceInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        }
    )
    body: Optional["PassiveReservationServicePortTypeServiceInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Header:
        supported_versions: Optional[SupportedVersions] = field(
            default=None,
            metadata={
                "name": "SupportedVersions",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/universal_v52_0",
            }
        )

    @dataclass
    class Body:
        passive_create_reservation_req: Optional[PassiveCreateReservationReq] = field(
            default=None,
            metadata={
                "name": "PassiveCreateReservationReq",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/universal_v52_0",
            }
        )


@dataclass
class PassiveReservationServicePortTypeServiceOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["PassiveReservationServicePortTypeServiceOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        passive_create_reservation_rsp: Optional[PassiveCreateReservationRsp] = field(
            default=None,
            metadata={
                "name": "PassiveCreateReservationRsp",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/universal_v52_0",
            }
        )
        fault: Optional["PassiveReservationServicePortTypeServiceOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            }
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            detail: Optional["PassiveReservationServicePortTypeServiceOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )

            @dataclass
            class Detail:
                error_info: Optional[V52ErrorInfo] = field(
                    default=None,
                    metadata={
                        "name": "ErrorInfo",
                        "type": "Element",
                        "namespace": "http://www.travelport.com/schema/common_v52_0",
                    }
                )


@dataclass
class ProfileChildSearchPortTypeServiceInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    header: Optional[object] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        }
    )
    body: Optional["ProfileChildSearchPortTypeServiceInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        profile_child_search_req: Optional[ProfileChildSearchReq] = field(
            default=None,
            metadata={
                "name": "ProfileChildSearchReq",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/sharedUprofile_v20_0",
            }
        )


@dataclass
class ProfileChildSearchPortTypeServiceOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["ProfileChildSearchPortTypeServiceOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        profile_child_search_rsp: Optional[ProfileChildSearchRsp] = field(
            default=None,
            metadata={
                "name": "ProfileChildSearchRsp",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/sharedUprofile_v20_0",
            }
        )
        fault: Optional["ProfileChildSearchPortTypeServiceOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            }
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            detail: Optional["ProfileChildSearchPortTypeServiceOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )

            @dataclass
            class Detail:
                error_info: Optional[V52ErrorInfo] = field(
                    default=None,
                    metadata={
                        "name": "ErrorInfo",
                        "type": "Element",
                        "namespace": "http://www.travelport.com/schema/common_v52_0",
                    }
                )


@dataclass
class ProfileCreateFieldPortTypeServiceInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    header: Optional[object] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        }
    )
    body: Optional["ProfileCreateFieldPortTypeServiceInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        profile_create_field_req: Optional[ProfileCreateFieldReq] = field(
            default=None,
            metadata={
                "name": "ProfileCreateFieldReq",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/sharedUprofile_v20_0",
            }
        )


@dataclass
class ProfileCreateFieldPortTypeServiceOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["ProfileCreateFieldPortTypeServiceOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        profile_create_field_rsp: Optional[ProfileCreateFieldRsp] = field(
            default=None,
            metadata={
                "name": "ProfileCreateFieldRsp",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/sharedUprofile_v20_0",
            }
        )
        fault: Optional["ProfileCreateFieldPortTypeServiceOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            }
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            detail: Optional["ProfileCreateFieldPortTypeServiceOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )

            @dataclass
            class Detail:
                error_info: Optional[V52ErrorInfo] = field(
                    default=None,
                    metadata={
                        "name": "ErrorInfo",
                        "type": "Element",
                        "namespace": "http://www.travelport.com/schema/common_v52_0",
                    }
                )


@dataclass
class ProfileCreateHierarchyLevelPortTypeServiceInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["ProfileCreateHierarchyLevelPortTypeServiceInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        profile_create_hierarchy_level_req: Optional[ProfileCreateHierarchyLevelReq] = field(
            default=None,
            metadata={
                "name": "ProfileCreateHierarchyLevelReq",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/uprofile_v37_0",
            }
        )


@dataclass
class ProfileCreateHierarchyLevelPortTypeServiceOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["ProfileCreateHierarchyLevelPortTypeServiceOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        profile_create_hierarchy_level_rsp: Optional[ProfileCreateHierarchyLevelRsp] = field(
            default=None,
            metadata={
                "name": "ProfileCreateHierarchyLevelRsp",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/uprofile_v37_0",
            }
        )
        fault: Optional["ProfileCreateHierarchyLevelPortTypeServiceOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            }
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            detail: Optional["ProfileCreateHierarchyLevelPortTypeServiceOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )

            @dataclass
            class Detail:
                error_info: Optional[V52ErrorInfo] = field(
                    default=None,
                    metadata={
                        "name": "ErrorInfo",
                        "type": "Element",
                        "namespace": "http://www.travelport.com/schema/common_v52_0",
                    }
                )


@dataclass
class ProfileCreatePortTypeServiceInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    header: Optional[object] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        }
    )
    body: Optional["ProfileCreatePortTypeServiceInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        profile_create_req: Optional[ProfileCreateReq] = field(
            default=None,
            metadata={
                "name": "ProfileCreateReq",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/sharedUprofile_v20_0",
            }
        )


@dataclass
class ProfileCreatePortTypeServiceOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["ProfileCreatePortTypeServiceOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        profile_create_rsp: Optional[ProfileCreateRsp] = field(
            default=None,
            metadata={
                "name": "ProfileCreateRsp",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/sharedUprofile_v20_0",
            }
        )
        fault: Optional["ProfileCreatePortTypeServiceOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            }
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            detail: Optional["ProfileCreatePortTypeServiceOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )

            @dataclass
            class Detail:
                error_info: Optional[V52ErrorInfo] = field(
                    default=None,
                    metadata={
                        "name": "ErrorInfo",
                        "type": "Element",
                        "namespace": "http://www.travelport.com/schema/common_v52_0",
                    }
                )


@dataclass
class ProfileCreateTagsPortTypeServiceInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    header: Optional[object] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        }
    )
    body: Optional["ProfileCreateTagsPortTypeServiceInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        profile_create_tags_req: Optional[ProfileCreateTagsReq] = field(
            default=None,
            metadata={
                "name": "ProfileCreateTagsReq",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/sharedUprofile_v20_0",
            }
        )


@dataclass
class ProfileCreateTagsPortTypeServiceOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["ProfileCreateTagsPortTypeServiceOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        profile_create_tags_rsp: Optional[ProfileCreateTagsRsp] = field(
            default=None,
            metadata={
                "name": "ProfileCreateTagsRsp",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/sharedUprofile_v20_0",
            }
        )
        fault: Optional["ProfileCreateTagsPortTypeServiceOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            }
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            detail: Optional["ProfileCreateTagsPortTypeServiceOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )

            @dataclass
            class Detail:
                error_info: Optional[V52ErrorInfo] = field(
                    default=None,
                    metadata={
                        "name": "ErrorInfo",
                        "type": "Element",
                        "namespace": "http://www.travelport.com/schema/common_v52_0",
                    }
                )


@dataclass
class ProfileDeleteHierarchyLevelPortTypeServiceInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["ProfileDeleteHierarchyLevelPortTypeServiceInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        profile_delete_hierarchy_level_req: Optional[ProfileDeleteHierarchyLevelReq] = field(
            default=None,
            metadata={
                "name": "ProfileDeleteHierarchyLevelReq",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/uprofile_v37_0",
            }
        )


@dataclass
class ProfileDeleteHierarchyLevelPortTypeServiceOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["ProfileDeleteHierarchyLevelPortTypeServiceOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        profile_delete_hierarchy_level_rsp: Optional[ProfileDeleteHierarchyLevelRsp] = field(
            default=None,
            metadata={
                "name": "ProfileDeleteHierarchyLevelRsp",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/uprofile_v37_0",
            }
        )
        fault: Optional["ProfileDeleteHierarchyLevelPortTypeServiceOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            }
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            detail: Optional["ProfileDeleteHierarchyLevelPortTypeServiceOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )

            @dataclass
            class Detail:
                error_info: Optional[V52ErrorInfo] = field(
                    default=None,
                    metadata={
                        "name": "ErrorInfo",
                        "type": "Element",
                        "namespace": "http://www.travelport.com/schema/common_v52_0",
                    }
                )
                profile_summary_error_info: Optional[ProfileSummaryErrorInfo] = field(
                    default=None,
                    metadata={
                        "name": "ProfileSummaryErrorInfo",
                        "type": "Element",
                        "namespace": "http://www.travelport.com/schema/sharedUprofile_v20_0",
                    }
                )


@dataclass
class ProfileDeletePortTypeServiceInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    header: Optional[object] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        }
    )
    body: Optional["ProfileDeletePortTypeServiceInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        profile_delete_req: Optional[ProfileDeleteReq] = field(
            default=None,
            metadata={
                "name": "ProfileDeleteReq",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/sharedUprofile_v20_0",
            }
        )


@dataclass
class ProfileDeletePortTypeServiceOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["ProfileDeletePortTypeServiceOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        profile_delete_rsp: Optional[ProfileDeleteRsp] = field(
            default=None,
            metadata={
                "name": "ProfileDeleteRsp",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/sharedUprofile_v20_0",
            }
        )
        fault: Optional["ProfileDeletePortTypeServiceOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            }
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            detail: Optional["ProfileDeletePortTypeServiceOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )

            @dataclass
            class Detail:
                error_info: Optional[V52ErrorInfo] = field(
                    default=None,
                    metadata={
                        "name": "ErrorInfo",
                        "type": "Element",
                        "namespace": "http://www.travelport.com/schema/common_v52_0",
                    }
                )


@dataclass
class ProfileDeleteTagPortTypeServiceInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    header: Optional[object] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        }
    )
    body: Optional["ProfileDeleteTagPortTypeServiceInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        profile_delete_tag_req: Optional[ProfileDeleteTagReq] = field(
            default=None,
            metadata={
                "name": "ProfileDeleteTagReq",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/sharedUprofile_v20_0",
            }
        )


@dataclass
class ProfileDeleteTagPortTypeServiceOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["ProfileDeleteTagPortTypeServiceOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        profile_delete_tag_rsp: Optional[ProfileDeleteTagRsp] = field(
            default=None,
            metadata={
                "name": "ProfileDeleteTagRsp",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/sharedUprofile_v20_0",
            }
        )
        fault: Optional["ProfileDeleteTagPortTypeServiceOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            }
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            detail: Optional["ProfileDeleteTagPortTypeServiceOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )

            @dataclass
            class Detail:
                error_info: Optional[V52ErrorInfo] = field(
                    default=None,
                    metadata={
                        "name": "ErrorInfo",
                        "type": "Element",
                        "namespace": "http://www.travelport.com/schema/common_v52_0",
                    }
                )
                profile_summary_error_info: Optional[ProfileSummaryErrorInfo] = field(
                    default=None,
                    metadata={
                        "name": "ProfileSummaryErrorInfo",
                        "type": "Element",
                        "namespace": "http://www.travelport.com/schema/sharedUprofile_v20_0",
                    }
                )


@dataclass
class ProfileModifyBridgeBranchesPortTypeServiceInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["ProfileModifyBridgeBranchesPortTypeServiceInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        profile_modify_bridge_branches_req: Optional[ProfileModifyBridgeBranchesReq] = field(
            default=None,
            metadata={
                "name": "ProfileModifyBridgeBranchesReq",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/uprofile_v37_0",
            }
        )


@dataclass
class ProfileModifyBridgeBranchesPortTypeServiceOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["ProfileModifyBridgeBranchesPortTypeServiceOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        profile_modify_bridge_branches_rsp: Optional[ProfileModifyBridgeBranchesRsp] = field(
            default=None,
            metadata={
                "name": "ProfileModifyBridgeBranchesRsp",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/uprofile_v37_0",
            }
        )
        fault: Optional["ProfileModifyBridgeBranchesPortTypeServiceOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            }
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            detail: Optional["ProfileModifyBridgeBranchesPortTypeServiceOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )

            @dataclass
            class Detail:
                error_info: Optional[V52ErrorInfo] = field(
                    default=None,
                    metadata={
                        "name": "ErrorInfo",
                        "type": "Element",
                        "namespace": "http://www.travelport.com/schema/common_v52_0",
                    }
                )


@dataclass
class ProfileModifyFieldPortTypeServiceInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    header: Optional[object] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        }
    )
    body: Optional["ProfileModifyFieldPortTypeServiceInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        profile_modify_field_req: Optional[ProfileModifyFieldReq] = field(
            default=None,
            metadata={
                "name": "ProfileModifyFieldReq",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/sharedUprofile_v20_0",
            }
        )


@dataclass
class ProfileModifyFieldPortTypeServiceOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["ProfileModifyFieldPortTypeServiceOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        profile_modify_field_rsp: Optional[ProfileModifyFieldRsp] = field(
            default=None,
            metadata={
                "name": "ProfileModifyFieldRsp",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/sharedUprofile_v20_0",
            }
        )
        fault: Optional["ProfileModifyFieldPortTypeServiceOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            }
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            detail: Optional["ProfileModifyFieldPortTypeServiceOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )

            @dataclass
            class Detail:
                error_info: Optional[V52ErrorInfo] = field(
                    default=None,
                    metadata={
                        "name": "ErrorInfo",
                        "type": "Element",
                        "namespace": "http://www.travelport.com/schema/common_v52_0",
                    }
                )


@dataclass
class ProfileModifyHierarchyLevelPortTypeServiceInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["ProfileModifyHierarchyLevelPortTypeServiceInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        profile_modify_hierarchy_level_req: Optional[ProfileModifyHierarchyLevelReq] = field(
            default=None,
            metadata={
                "name": "ProfileModifyHierarchyLevelReq",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/uprofile_v37_0",
            }
        )


@dataclass
class ProfileModifyHierarchyLevelPortTypeServiceOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["ProfileModifyHierarchyLevelPortTypeServiceOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        profile_modify_hierarchy_level_rsp: Optional[ProfileModifyHierarchyLevelRsp] = field(
            default=None,
            metadata={
                "name": "ProfileModifyHierarchyLevelRsp",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/uprofile_v37_0",
            }
        )
        fault: Optional["ProfileModifyHierarchyLevelPortTypeServiceOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            }
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            detail: Optional["ProfileModifyHierarchyLevelPortTypeServiceOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )

            @dataclass
            class Detail:
                error_info: Optional[V52ErrorInfo] = field(
                    default=None,
                    metadata={
                        "name": "ErrorInfo",
                        "type": "Element",
                        "namespace": "http://www.travelport.com/schema/common_v52_0",
                    }
                )
                profile_summary_error_info: Optional[ProfileSummaryErrorInfo] = field(
                    default=None,
                    metadata={
                        "name": "ProfileSummaryErrorInfo",
                        "type": "Element",
                        "namespace": "http://www.travelport.com/schema/sharedUprofile_v20_0",
                    }
                )


@dataclass
class ProfileModifyPortTypeServiceInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    header: Optional[object] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        }
    )
    body: Optional["ProfileModifyPortTypeServiceInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        profile_modify_req: Optional[ProfileModifyReq] = field(
            default=None,
            metadata={
                "name": "ProfileModifyReq",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/sharedUprofile_v20_0",
            }
        )


@dataclass
class ProfileModifyPortTypeServiceOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["ProfileModifyPortTypeServiceOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        profile_modify_rsp: Optional[ProfileModifyRsp] = field(
            default=None,
            metadata={
                "name": "ProfileModifyRsp",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/sharedUprofile_v20_0",
            }
        )
        fault: Optional["ProfileModifyPortTypeServiceOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            }
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            detail: Optional["ProfileModifyPortTypeServiceOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )

            @dataclass
            class Detail:
                error_info: Optional[V52ErrorInfo] = field(
                    default=None,
                    metadata={
                        "name": "ErrorInfo",
                        "type": "Element",
                        "namespace": "http://www.travelport.com/schema/common_v52_0",
                    }
                )


@dataclass
class ProfileModifyTagsPortTypeServiceInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    header: Optional[object] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        }
    )
    body: Optional["ProfileModifyTagsPortTypeServiceInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        profile_modify_tags_req: Optional[ProfileModifyTagsReq] = field(
            default=None,
            metadata={
                "name": "ProfileModifyTagsReq",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/sharedUprofile_v20_0",
            }
        )


@dataclass
class ProfileModifyTagsPortTypeServiceOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["ProfileModifyTagsPortTypeServiceOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        profile_modify_tags_rsp: Optional[ProfileModifyTagsRsp] = field(
            default=None,
            metadata={
                "name": "ProfileModifyTagsRsp",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/sharedUprofile_v20_0",
            }
        )
        fault: Optional["ProfileModifyTagsPortTypeServiceOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            }
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            detail: Optional["ProfileModifyTagsPortTypeServiceOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )

            @dataclass
            class Detail:
                error_info: Optional[V52ErrorInfo] = field(
                    default=None,
                    metadata={
                        "name": "ErrorInfo",
                        "type": "Element",
                        "namespace": "http://www.travelport.com/schema/common_v52_0",
                    }
                )


@dataclass
class ProfileModifyTemplatePortTypeServiceInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["ProfileModifyTemplatePortTypeServiceInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        profile_modify_template_req: Optional[ProfileModifyTemplateReq] = field(
            default=None,
            metadata={
                "name": "ProfileModifyTemplateReq",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/uprofile_v37_0",
            }
        )


@dataclass
class ProfileModifyTemplatePortTypeServiceOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["ProfileModifyTemplatePortTypeServiceOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        profile_modify_template_rsp: Optional[ProfileModifyTemplateRsp] = field(
            default=None,
            metadata={
                "name": "ProfileModifyTemplateRsp",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/uprofile_v37_0",
            }
        )
        fault: Optional["ProfileModifyTemplatePortTypeServiceOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            }
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            detail: Optional["ProfileModifyTemplatePortTypeServiceOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )

            @dataclass
            class Detail:
                error_info: Optional[V52ErrorInfo] = field(
                    default=None,
                    metadata={
                        "name": "ErrorInfo",
                        "type": "Element",
                        "namespace": "http://www.travelport.com/schema/common_v52_0",
                    }
                )


@dataclass
class ProfileRetrieveActionPortTypeServiceInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["ProfileRetrieveActionPortTypeServiceInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        profile_retrieve_action_req: Optional[ProfileRetrieveActionReq] = field(
            default=None,
            metadata={
                "name": "ProfileRetrieveActionReq",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/uprofile_v37_0",
            }
        )


@dataclass
class ProfileRetrieveActionPortTypeServiceOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["ProfileRetrieveActionPortTypeServiceOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        profile_retrieve_action_rsp: Optional[ProfileRetrieveActionRsp] = field(
            default=None,
            metadata={
                "name": "ProfileRetrieveActionRsp",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/uprofile_v37_0",
            }
        )
        fault: Optional["ProfileRetrieveActionPortTypeServiceOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            }
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            detail: Optional["ProfileRetrieveActionPortTypeServiceOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )

            @dataclass
            class Detail:
                error_info: Optional[V52ErrorInfo] = field(
                    default=None,
                    metadata={
                        "name": "ErrorInfo",
                        "type": "Element",
                        "namespace": "http://www.travelport.com/schema/common_v52_0",
                    }
                )


@dataclass
class ProfileRetrieveBridgeBranchesPortTypeServiceInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["ProfileRetrieveBridgeBranchesPortTypeServiceInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        profile_retrieve_bridge_branches_req: Optional[ProfileRetrieveBridgeBranchesReq] = field(
            default=None,
            metadata={
                "name": "ProfileRetrieveBridgeBranchesReq",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/uprofile_v37_0",
            }
        )


@dataclass
class ProfileRetrieveBridgeBranchesPortTypeServiceOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["ProfileRetrieveBridgeBranchesPortTypeServiceOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        profile_retrieve_bridge_branches_rsp: Optional[ProfileRetrieveBridgeBranchesRsp] = field(
            default=None,
            metadata={
                "name": "ProfileRetrieveBridgeBranchesRsp",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/uprofile_v37_0",
            }
        )
        fault: Optional["ProfileRetrieveBridgeBranchesPortTypeServiceOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            }
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            detail: Optional["ProfileRetrieveBridgeBranchesPortTypeServiceOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )

            @dataclass
            class Detail:
                error_info: Optional[V52ErrorInfo] = field(
                    default=None,
                    metadata={
                        "name": "ErrorInfo",
                        "type": "Element",
                        "namespace": "http://www.travelport.com/schema/common_v52_0",
                    }
                )


@dataclass
class ProfileRetrieveHierarchyPortTypeServiceInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["ProfileRetrieveHierarchyPortTypeServiceInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        profile_retrieve_hierarchy_req: Optional[ProfileRetrieveHierarchyReq] = field(
            default=None,
            metadata={
                "name": "ProfileRetrieveHierarchyReq",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/uprofile_v37_0",
            }
        )


@dataclass
class ProfileRetrieveHierarchyPortTypeServiceOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["ProfileRetrieveHierarchyPortTypeServiceOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        profile_retrieve_hierarchy_rsp: Optional[ProfileRetrieveHierarchyRsp] = field(
            default=None,
            metadata={
                "name": "ProfileRetrieveHierarchyRsp",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/uprofile_v37_0",
            }
        )
        fault: Optional["ProfileRetrieveHierarchyPortTypeServiceOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            }
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            detail: Optional["ProfileRetrieveHierarchyPortTypeServiceOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )

            @dataclass
            class Detail:
                error_info: Optional[V52ErrorInfo] = field(
                    default=None,
                    metadata={
                        "name": "ErrorInfo",
                        "type": "Element",
                        "namespace": "http://www.travelport.com/schema/common_v52_0",
                    }
                )


@dataclass
class ProfileRetrieveHistoryPortTypeServiceInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    header: Optional[object] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        }
    )
    body: Optional["ProfileRetrieveHistoryPortTypeServiceInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        profile_retrieve_history_req: Optional[ProfileRetrieveHistoryReq] = field(
            default=None,
            metadata={
                "name": "ProfileRetrieveHistoryReq",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/sharedUprofile_v20_0",
            }
        )


@dataclass
class ProfileRetrieveHistoryPortTypeServiceOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["ProfileRetrieveHistoryPortTypeServiceOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        profile_retrieve_history_rsp: Optional[ProfileRetrieveHistoryRsp] = field(
            default=None,
            metadata={
                "name": "ProfileRetrieveHistoryRsp",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/sharedUprofile_v20_0",
            }
        )
        fault: Optional["ProfileRetrieveHistoryPortTypeServiceOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            }
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            detail: Optional["ProfileRetrieveHistoryPortTypeServiceOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )

            @dataclass
            class Detail:
                error_info: Optional[V52ErrorInfo] = field(
                    default=None,
                    metadata={
                        "name": "ErrorInfo",
                        "type": "Element",
                        "namespace": "http://www.travelport.com/schema/common_v52_0",
                    }
                )


@dataclass
class ProfileRetrieveParentPortTypeServiceInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    header: Optional[object] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        }
    )
    body: Optional["ProfileRetrieveParentPortTypeServiceInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        profile_retrieve_parent_req: Optional[ProfileRetrieveParentReq] = field(
            default=None,
            metadata={
                "name": "ProfileRetrieveParentReq",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/sharedUprofile_v20_0",
            }
        )


@dataclass
class ProfileRetrieveParentPortTypeServiceOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["ProfileRetrieveParentPortTypeServiceOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        profile_retrieve_parent_rsp: Optional[ProfileRetrieveParentRsp] = field(
            default=None,
            metadata={
                "name": "ProfileRetrieveParentRsp",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/sharedUprofile_v20_0",
            }
        )
        fault: Optional["ProfileRetrieveParentPortTypeServiceOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            }
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            detail: Optional["ProfileRetrieveParentPortTypeServiceOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )

            @dataclass
            class Detail:
                error_info: Optional[V52ErrorInfo] = field(
                    default=None,
                    metadata={
                        "name": "ErrorInfo",
                        "type": "Element",
                        "namespace": "http://www.travelport.com/schema/common_v52_0",
                    }
                )


@dataclass
class ProfileRetrievePortTypeServiceInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    header: Optional[object] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        }
    )
    body: Optional["ProfileRetrievePortTypeServiceInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        profile_retrieve_req: Optional[ProfileRetrieveReq] = field(
            default=None,
            metadata={
                "name": "ProfileRetrieveReq",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/sharedUprofile_v20_0",
            }
        )


@dataclass
class ProfileRetrievePortTypeServiceOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["ProfileRetrievePortTypeServiceOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        profile_retrieve_rsp: Optional[ProfileRetrieveRsp] = field(
            default=None,
            metadata={
                "name": "ProfileRetrieveRsp",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/sharedUprofile_v20_0",
            }
        )
        fault: Optional["ProfileRetrievePortTypeServiceOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            }
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            detail: Optional["ProfileRetrievePortTypeServiceOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )

            @dataclass
            class Detail:
                error_info: Optional[V52ErrorInfo] = field(
                    default=None,
                    metadata={
                        "name": "ErrorInfo",
                        "type": "Element",
                        "namespace": "http://www.travelport.com/schema/common_v52_0",
                    }
                )


@dataclass
class ProfileRetrieveTemplatePortTypeServiceInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["ProfileRetrieveTemplatePortTypeServiceInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        profile_retrieve_template_req: Optional[ProfileRetrieveTemplateReq] = field(
            default=None,
            metadata={
                "name": "ProfileRetrieveTemplateReq",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/uprofile_v37_0",
            }
        )


@dataclass
class ProfileRetrieveTemplatePortTypeServiceOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["ProfileRetrieveTemplatePortTypeServiceOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        profile_retrieve_template_rsp: Optional[ProfileRetrieveTemplateRsp] = field(
            default=None,
            metadata={
                "name": "ProfileRetrieveTemplateRsp",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/uprofile_v37_0",
            }
        )
        fault: Optional["ProfileRetrieveTemplatePortTypeServiceOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            }
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            detail: Optional["ProfileRetrieveTemplatePortTypeServiceOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )

            @dataclass
            class Detail:
                error_info: Optional[V52ErrorInfo] = field(
                    default=None,
                    metadata={
                        "name": "ErrorInfo",
                        "type": "Element",
                        "namespace": "http://www.travelport.com/schema/common_v52_0",
                    }
                )


@dataclass
class ProfileSearchActionPortTypeServiceInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["ProfileSearchActionPortTypeServiceInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        profile_search_action_req: Optional[ProfileSearchActionReq] = field(
            default=None,
            metadata={
                "name": "ProfileSearchActionReq",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/uprofile_v37_0",
            }
        )


@dataclass
class ProfileSearchActionPortTypeServiceOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["ProfileSearchActionPortTypeServiceOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        profile_search_action_rsp: Optional[ProfileSearchActionRsp] = field(
            default=None,
            metadata={
                "name": "ProfileSearchActionRsp",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/uprofile_v37_0",
            }
        )
        fault: Optional["ProfileSearchActionPortTypeServiceOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            }
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            detail: Optional["ProfileSearchActionPortTypeServiceOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )

            @dataclass
            class Detail:
                error_info: Optional[V52ErrorInfo] = field(
                    default=None,
                    metadata={
                        "name": "ErrorInfo",
                        "type": "Element",
                        "namespace": "http://www.travelport.com/schema/common_v52_0",
                    }
                )


@dataclass
class ProfileSearchFieldPortTypeServiceInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    header: Optional[object] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        }
    )
    body: Optional["ProfileSearchFieldPortTypeServiceInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        profile_search_field_req: Optional[ProfileSearchFieldReq] = field(
            default=None,
            metadata={
                "name": "ProfileSearchFieldReq",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/sharedUprofile_v20_0",
            }
        )


@dataclass
class ProfileSearchFieldPortTypeServiceOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["ProfileSearchFieldPortTypeServiceOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        profile_search_field_rsp: Optional[ProfileSearchFieldRsp] = field(
            default=None,
            metadata={
                "name": "ProfileSearchFieldRsp",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/sharedUprofile_v20_0",
            }
        )
        fault: Optional["ProfileSearchFieldPortTypeServiceOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            }
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            detail: Optional["ProfileSearchFieldPortTypeServiceOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )

            @dataclass
            class Detail:
                error_info: Optional[V52ErrorInfo] = field(
                    default=None,
                    metadata={
                        "name": "ErrorInfo",
                        "type": "Element",
                        "namespace": "http://www.travelport.com/schema/common_v52_0",
                    }
                )


@dataclass
class ProfileSearchPortTypeServiceInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    header: Optional[object] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        }
    )
    body: Optional["ProfileSearchPortTypeServiceInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        profile_search_req: Optional[ProfileSearchReq] = field(
            default=None,
            metadata={
                "name": "ProfileSearchReq",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/sharedUprofile_v20_0",
            }
        )


@dataclass
class ProfileSearchPortTypeServiceOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["ProfileSearchPortTypeServiceOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        profile_search_rsp: Optional[ProfileSearchRsp] = field(
            default=None,
            metadata={
                "name": "ProfileSearchRsp",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/sharedUprofile_v20_0",
            }
        )
        fault: Optional["ProfileSearchPortTypeServiceOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            }
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            detail: Optional["ProfileSearchPortTypeServiceOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )

            @dataclass
            class Detail:
                error_info: Optional[V52ErrorInfo] = field(
                    default=None,
                    metadata={
                        "name": "ErrorInfo",
                        "type": "Element",
                        "namespace": "http://www.travelport.com/schema/common_v52_0",
                    }
                )


@dataclass
class ProfileSearchTagsPortTypeServiceInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    header: Optional[object] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        }
    )
    body: Optional["ProfileSearchTagsPortTypeServiceInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        profile_search_tags_req: Optional[ProfileSearchTagsReq] = field(
            default=None,
            metadata={
                "name": "ProfileSearchTagsReq",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/sharedUprofile_v20_0",
            }
        )


@dataclass
class ProfileSearchTagsPortTypeServiceOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["ProfileSearchTagsPortTypeServiceOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        profile_search_tags_rsp: Optional[ProfileSearchTagsRsp] = field(
            default=None,
            metadata={
                "name": "ProfileSearchTagsRsp",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/sharedUprofile_v20_0",
            }
        )
        fault: Optional["ProfileSearchTagsPortTypeServiceOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            }
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            detail: Optional["ProfileSearchTagsPortTypeServiceOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )

            @dataclass
            class Detail:
                error_info: Optional[V52ErrorInfo] = field(
                    default=None,
                    metadata={
                        "name": "ErrorInfo",
                        "type": "Element",
                        "namespace": "http://www.travelport.com/schema/common_v52_0",
                    }
                )


@dataclass
class ProviderReservationDisplayServicePortTypeServiceInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["ProviderReservationDisplayServicePortTypeServiceInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        provider_reservation_display_details_req: Optional[ProviderReservationDisplayDetailsReq] = field(
            default=None,
            metadata={
                "name": "ProviderReservationDisplayDetailsReq",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/universal_v52_0",
            }
        )


@dataclass
class ProviderReservationDisplayServicePortTypeServiceOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["ProviderReservationDisplayServicePortTypeServiceOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        provider_reservation_display_details_rsp: Optional[ProviderReservationDisplayDetailsRsp] = field(
            default=None,
            metadata={
                "name": "ProviderReservationDisplayDetailsRsp",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/universal_v52_0",
            }
        )
        fault: Optional["ProviderReservationDisplayServicePortTypeServiceOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            }
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            detail: Optional["ProviderReservationDisplayServicePortTypeServiceOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )

            @dataclass
            class Detail:
                error_info: Optional[V52ErrorInfo] = field(
                    default=None,
                    metadata={
                        "name": "ErrorInfo",
                        "type": "Element",
                        "namespace": "http://www.travelport.com/schema/common_v52_0",
                    }
                )


@dataclass
class ProviderReservationDivideServicePortTypeServiceInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["ProviderReservationDivideServicePortTypeServiceInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        provider_reservation_divide_req: Optional[ProviderReservationDivideReq] = field(
            default=None,
            metadata={
                "name": "ProviderReservationDivideReq",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/universal_v52_0",
            }
        )


@dataclass
class ProviderReservationDivideServicePortTypeServiceOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["ProviderReservationDivideServicePortTypeServiceOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        provider_reservation_divide_rsp: Optional[ProviderReservationDivideRsp] = field(
            default=None,
            metadata={
                "name": "ProviderReservationDivideRsp",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/universal_v52_0",
            }
        )
        fault: Optional["ProviderReservationDivideServicePortTypeServiceOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            }
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            detail: Optional["ProviderReservationDivideServicePortTypeServiceOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )

            @dataclass
            class Detail:
                error_info: Optional[V52ErrorInfo] = field(
                    default=None,
                    metadata={
                        "name": "ErrorInfo",
                        "type": "Element",
                        "namespace": "http://www.travelport.com/schema/common_v52_0",
                    }
                )


@dataclass
class RailAvailabilitySearchPortTypeServiceInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["RailAvailabilitySearchPortTypeServiceInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        rail_availability_search_req: Optional[RailAvailabilitySearchReq] = field(
            default=None,
            metadata={
                "name": "RailAvailabilitySearchReq",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/rail_v52_0",
            }
        )


@dataclass
class RailAvailabilitySearchPortTypeServiceOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["RailAvailabilitySearchPortTypeServiceOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        rail_availability_search_rsp: Optional[RailAvailabilitySearchRsp] = field(
            default=None,
            metadata={
                "name": "RailAvailabilitySearchRsp",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/rail_v52_0",
            }
        )
        fault: Optional["RailAvailabilitySearchPortTypeServiceOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            }
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            detail: Optional["RailAvailabilitySearchPortTypeServiceOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )

            @dataclass
            class Detail:
                error_info: Optional[V52ErrorInfo] = field(
                    default=None,
                    metadata={
                        "name": "ErrorInfo",
                        "type": "Element",
                        "namespace": "http://www.travelport.com/schema/common_v52_0",
                    }
                )


@dataclass
class RailCreateReservationPortTypeServiceInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["RailCreateReservationPortTypeServiceInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        rail_create_reservation_req: Optional[RailCreateReservationReq] = field(
            default=None,
            metadata={
                "name": "RailCreateReservationReq",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/universal_v52_0",
            }
        )


@dataclass
class RailCreateReservationPortTypeServiceOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["RailCreateReservationPortTypeServiceOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        rail_create_reservation_rsp: Optional[RailCreateReservationRsp] = field(
            default=None,
            metadata={
                "name": "RailCreateReservationRsp",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/universal_v52_0",
            }
        )
        fault: Optional["RailCreateReservationPortTypeServiceOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            }
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            detail: Optional["RailCreateReservationPortTypeServiceOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )

            @dataclass
            class Detail:
                error_info: Optional[V52ErrorInfo] = field(
                    default=None,
                    metadata={
                        "name": "ErrorInfo",
                        "type": "Element",
                        "namespace": "http://www.travelport.com/schema/common_v52_0",
                    }
                )


@dataclass
class RailExchangeCreateReservationPortTypeServiceInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["RailExchangeCreateReservationPortTypeServiceInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        rail_exchange_req: Optional[RailExchangeReq] = field(
            default=None,
            metadata={
                "name": "RailExchangeReq",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/rail_v52_0",
            }
        )


@dataclass
class RailExchangeCreateReservationPortTypeServiceOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["RailExchangeCreateReservationPortTypeServiceOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        rail_exchange_rsp: Optional[RailExchangeRsp] = field(
            default=None,
            metadata={
                "name": "RailExchangeRsp",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/rail_v52_0",
            }
        )
        fault: Optional["RailExchangeCreateReservationPortTypeServiceOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            }
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            detail: Optional["RailExchangeCreateReservationPortTypeServiceOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )

            @dataclass
            class Detail:
                error_info: Optional[V52ErrorInfo] = field(
                    default=None,
                    metadata={
                        "name": "ErrorInfo",
                        "type": "Element",
                        "namespace": "http://www.travelport.com/schema/common_v52_0",
                    }
                )


@dataclass
class RailExchangeQuotePortTypeServiceInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["RailExchangeQuotePortTypeServiceInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        rail_exchange_quote_req: Optional[RailExchangeQuoteReq] = field(
            default=None,
            metadata={
                "name": "RailExchangeQuoteReq",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/rail_v52_0",
            }
        )


@dataclass
class RailExchangeQuotePortTypeServiceOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["RailExchangeQuotePortTypeServiceOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        rail_exchange_quote_rsp: Optional[RailExchangeQuoteRsp] = field(
            default=None,
            metadata={
                "name": "RailExchangeQuoteRsp",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/rail_v52_0",
            }
        )
        fault: Optional["RailExchangeQuotePortTypeServiceOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            }
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            detail: Optional["RailExchangeQuotePortTypeServiceOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )

            @dataclass
            class Detail:
                error_info: Optional[V52ErrorInfo] = field(
                    default=None,
                    metadata={
                        "name": "ErrorInfo",
                        "type": "Element",
                        "namespace": "http://www.travelport.com/schema/common_v52_0",
                    }
                )


@dataclass
class RailRefundPortTypeServiceInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["RailRefundPortTypeServiceInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        rail_refund_req: Optional[RailRefundReq] = field(
            default=None,
            metadata={
                "name": "RailRefundReq",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/rail_v52_0",
            }
        )


@dataclass
class RailRefundPortTypeServiceOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["RailRefundPortTypeServiceOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        rail_refund_rsp: Optional[RailRefundRsp] = field(
            default=None,
            metadata={
                "name": "RailRefundRsp",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/rail_v52_0",
            }
        )
        fault: Optional["RailRefundPortTypeServiceOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            }
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            detail: Optional["RailRefundPortTypeServiceOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )

            @dataclass
            class Detail:
                error_info: Optional[V52ErrorInfo] = field(
                    default=None,
                    metadata={
                        "name": "ErrorInfo",
                        "type": "Element",
                        "namespace": "http://www.travelport.com/schema/common_v52_0",
                    }
                )


@dataclass
class RailRefundQuotePortTypeServiceInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["RailRefundQuotePortTypeServiceInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        rail_refund_quote_req: Optional[RailRefundQuoteReq] = field(
            default=None,
            metadata={
                "name": "RailRefundQuoteReq",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/rail_v52_0",
            }
        )


@dataclass
class RailRefundQuotePortTypeServiceOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["RailRefundQuotePortTypeServiceOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        rail_refund_quote_rsp: Optional[RailRefundQuoteRsp] = field(
            default=None,
            metadata={
                "name": "RailRefundQuoteRsp",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/rail_v52_0",
            }
        )
        fault: Optional["RailRefundQuotePortTypeServiceOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            }
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            detail: Optional["RailRefundQuotePortTypeServiceOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )

            @dataclass
            class Detail:
                error_info: Optional[V52ErrorInfo] = field(
                    default=None,
                    metadata={
                        "name": "ErrorInfo",
                        "type": "Element",
                        "namespace": "http://www.travelport.com/schema/common_v52_0",
                    }
                )


@dataclass
class RailSeatMapPortTypeServiceInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["RailSeatMapPortTypeServiceInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        rail_seat_map_req: Optional[RailSeatMapReq] = field(
            default=None,
            metadata={
                "name": "RailSeatMapReq",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/rail_v52_0",
            }
        )


@dataclass
class RailSeatMapPortTypeServiceOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["RailSeatMapPortTypeServiceOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        rail_seat_map_rsp: Optional[RailSeatMapRsp] = field(
            default=None,
            metadata={
                "name": "RailSeatMapRsp",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/rail_v52_0",
            }
        )
        fault: Optional["RailSeatMapPortTypeServiceOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            }
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            detail: Optional["RailSeatMapPortTypeServiceOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )

            @dataclass
            class Detail:
                error_info: Optional[V52ErrorInfo] = field(
                    default=None,
                    metadata={
                        "name": "ErrorInfo",
                        "type": "Element",
                        "namespace": "http://www.travelport.com/schema/common_v52_0",
                    }
                )


@dataclass
class ReferenceDataLookupPortTypeServiceInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["ReferenceDataLookupPortTypeServiceInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        reference_data_search_req: Optional[ReferenceDataSearchReq] = field(
            default=None,
            metadata={
                "name": "ReferenceDataSearchReq",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/util_v52_0",
            }
        )


@dataclass
class ReferenceDataLookupPortTypeServiceOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["ReferenceDataLookupPortTypeServiceOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        reference_data_search_rsp: Optional[ReferenceDataSearchRsp] = field(
            default=None,
            metadata={
                "name": "ReferenceDataSearchRsp",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/util_v52_0",
            }
        )
        fault: Optional["ReferenceDataLookupPortTypeServiceOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            }
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            detail: Optional["ReferenceDataLookupPortTypeServiceOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )

            @dataclass
            class Detail:
                error_info: Optional[V52ErrorInfo] = field(
                    default=None,
                    metadata={
                        "name": "ErrorInfo",
                        "type": "Element",
                        "namespace": "http://www.travelport.com/schema/common_v52_0",
                    }
                )


@dataclass
class ReferenceDataRetrievePortTypeServiceInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["ReferenceDataRetrievePortTypeServiceInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        reference_data_retrieve_req: Optional[ReferenceDataRetrieveReq] = field(
            default=None,
            metadata={
                "name": "ReferenceDataRetrieveReq",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/util_v52_0",
            }
        )


@dataclass
class ReferenceDataRetrievePortTypeServiceOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["ReferenceDataRetrievePortTypeServiceOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        reference_data_retrieve_rsp: Optional[ReferenceDataRetrieveRsp] = field(
            default=None,
            metadata={
                "name": "ReferenceDataRetrieveRsp",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/util_v52_0",
            }
        )
        fault: Optional["ReferenceDataRetrievePortTypeServiceOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            }
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            detail: Optional["ReferenceDataRetrievePortTypeServiceOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )

            @dataclass
            class Detail:
                error_info: Optional[V52ErrorInfo] = field(
                    default=None,
                    metadata={
                        "name": "ErrorInfo",
                        "type": "Element",
                        "namespace": "http://www.travelport.com/schema/common_v52_0",
                    }
                )


@dataclass
class ReferenceDataUpdatePortTypeServiceInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["ReferenceDataUpdatePortTypeServiceInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        reference_data_update_req: Optional[ReferenceDataUpdateReq] = field(
            default=None,
            metadata={
                "name": "ReferenceDataUpdateReq",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/util_v52_0",
            }
        )


@dataclass
class ReferenceDataUpdatePortTypeServiceOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["ReferenceDataUpdatePortTypeServiceOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        reference_data_update_rsp: Optional[ReferenceDataUpdateRsp] = field(
            default=None,
            metadata={
                "name": "ReferenceDataUpdateRsp",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/util_v52_0",
            }
        )
        fault: Optional["ReferenceDataUpdatePortTypeServiceOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            }
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            detail: Optional["ReferenceDataUpdatePortTypeServiceOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )

            @dataclass
            class Detail:
                error_info: Optional[V52ErrorInfo] = field(
                    default=None,
                    metadata={
                        "name": "ErrorInfo",
                        "type": "Element",
                        "namespace": "http://www.travelport.com/schema/common_v52_0",
                    }
                )


@dataclass
class ReportRetrievePortTypeServiceInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["ReportRetrievePortTypeServiceInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        mir_report_retrieve_req: Optional[MirReportRetrieveReq] = field(
            default=None,
            metadata={
                "name": "MirReportRetrieveReq",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/util_v52_0",
            }
        )


@dataclass
class ReportRetrievePortTypeServiceOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["ReportRetrievePortTypeServiceOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        mir_report_retrieve_rsp: Optional[MirReportRetrieveRsp] = field(
            default=None,
            metadata={
                "name": "MirReportRetrieveRsp",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/util_v52_0",
            }
        )
        fault: Optional["ReportRetrievePortTypeServiceOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            }
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            detail: Optional["ReportRetrievePortTypeServiceOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )

            @dataclass
            class Detail:
                error_info: Optional[V52ErrorInfo] = field(
                    default=None,
                    metadata={
                        "name": "ErrorInfo",
                        "type": "Element",
                        "namespace": "http://www.travelport.com/schema/common_v52_0",
                    }
                )


@dataclass
class SavedTripCreateServicePortTypeServiceInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    header: Optional["SavedTripCreateServicePortTypeServiceInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        }
    )
    body: Optional["SavedTripCreateServicePortTypeServiceInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Header:
        supported_versions: Optional[SupportedVersions] = field(
            default=None,
            metadata={
                "name": "SupportedVersions",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/universal_v52_0",
            }
        )

    @dataclass
    class Body:
        saved_trip_create_req: Optional[SavedTripCreateReq] = field(
            default=None,
            metadata={
                "name": "SavedTripCreateReq",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/universal_v52_0",
            }
        )


@dataclass
class SavedTripCreateServicePortTypeServiceOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["SavedTripCreateServicePortTypeServiceOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        saved_trip_create_rsp: Optional[SavedTripCreateRsp] = field(
            default=None,
            metadata={
                "name": "SavedTripCreateRsp",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/universal_v52_0",
            }
        )
        fault: Optional["SavedTripCreateServicePortTypeServiceOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            }
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            detail: Optional["SavedTripCreateServicePortTypeServiceOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )

            @dataclass
            class Detail:
                error_info: Optional[V52ErrorInfo] = field(
                    default=None,
                    metadata={
                        "name": "ErrorInfo",
                        "type": "Element",
                        "namespace": "http://www.travelport.com/schema/common_v52_0",
                    }
                )


@dataclass
class SavedTripDeleteServicePortTypeServiceInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    header: Optional["SavedTripDeleteServicePortTypeServiceInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        }
    )
    body: Optional["SavedTripDeleteServicePortTypeServiceInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Header:
        supported_versions: Optional[SupportedVersions] = field(
            default=None,
            metadata={
                "name": "SupportedVersions",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/universal_v52_0",
            }
        )

    @dataclass
    class Body:
        saved_trip_delete_req: Optional[SavedTripDeleteReq] = field(
            default=None,
            metadata={
                "name": "SavedTripDeleteReq",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/universal_v52_0",
            }
        )


@dataclass
class SavedTripDeleteServicePortTypeServiceOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["SavedTripDeleteServicePortTypeServiceOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        saved_trip_delete_rsp: Optional[SavedTripDeleteRsp] = field(
            default=None,
            metadata={
                "name": "SavedTripDeleteRsp",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/universal_v52_0",
            }
        )
        fault: Optional["SavedTripDeleteServicePortTypeServiceOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            }
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            detail: Optional["SavedTripDeleteServicePortTypeServiceOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )

            @dataclass
            class Detail:
                error_info: Optional[V52ErrorInfo] = field(
                    default=None,
                    metadata={
                        "name": "ErrorInfo",
                        "type": "Element",
                        "namespace": "http://www.travelport.com/schema/common_v52_0",
                    }
                )


@dataclass
class SavedTripModifyServicePortTypeServiceInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    header: Optional["SavedTripModifyServicePortTypeServiceInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        }
    )
    body: Optional["SavedTripModifyServicePortTypeServiceInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Header:
        supported_versions: Optional[SupportedVersions] = field(
            default=None,
            metadata={
                "name": "SupportedVersions",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/universal_v52_0",
            }
        )

    @dataclass
    class Body:
        saved_trip_modify_req: Optional[SavedTripModifyReq] = field(
            default=None,
            metadata={
                "name": "SavedTripModifyReq",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/universal_v52_0",
            }
        )


@dataclass
class SavedTripModifyServicePortTypeServiceOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["SavedTripModifyServicePortTypeServiceOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        saved_trip_modify_rsp: Optional[SavedTripModifyRsp] = field(
            default=None,
            metadata={
                "name": "SavedTripModifyRsp",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/universal_v52_0",
            }
        )
        fault: Optional["SavedTripModifyServicePortTypeServiceOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            }
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            detail: Optional["SavedTripModifyServicePortTypeServiceOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )

            @dataclass
            class Detail:
                error_info: Optional[V52ErrorInfo] = field(
                    default=None,
                    metadata={
                        "name": "ErrorInfo",
                        "type": "Element",
                        "namespace": "http://www.travelport.com/schema/common_v52_0",
                    }
                )


@dataclass
class SavedTripRetrieveServicePortTypeServiceInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    header: Optional["SavedTripRetrieveServicePortTypeServiceInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        }
    )
    body: Optional["SavedTripRetrieveServicePortTypeServiceInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Header:
        supported_versions: Optional[SupportedVersions] = field(
            default=None,
            metadata={
                "name": "SupportedVersions",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/universal_v52_0",
            }
        )

    @dataclass
    class Body:
        saved_trip_retrieve_req: Optional[SavedTripRetrieveReq] = field(
            default=None,
            metadata={
                "name": "SavedTripRetrieveReq",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/universal_v52_0",
            }
        )


@dataclass
class SavedTripRetrieveServicePortTypeServiceOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["SavedTripRetrieveServicePortTypeServiceOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        saved_trip_retrieve_rsp: Optional[SavedTripRetrieveRsp] = field(
            default=None,
            metadata={
                "name": "SavedTripRetrieveRsp",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/universal_v52_0",
            }
        )
        fault: Optional["SavedTripRetrieveServicePortTypeServiceOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            }
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            detail: Optional["SavedTripRetrieveServicePortTypeServiceOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )

            @dataclass
            class Detail:
                error_info: Optional[V52ErrorInfo] = field(
                    default=None,
                    metadata={
                        "name": "ErrorInfo",
                        "type": "Element",
                        "namespace": "http://www.travelport.com/schema/common_v52_0",
                    }
                )


@dataclass
class SavedTripSearchServicePortTypeServiceInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    header: Optional["SavedTripSearchServicePortTypeServiceInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        }
    )
    body: Optional["SavedTripSearchServicePortTypeServiceInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Header:
        supported_versions: Optional[SupportedVersions] = field(
            default=None,
            metadata={
                "name": "SupportedVersions",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/universal_v52_0",
            }
        )

    @dataclass
    class Body:
        saved_trip_search_req: Optional[SavedTripSearchReq] = field(
            default=None,
            metadata={
                "name": "SavedTripSearchReq",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/universal_v52_0",
            }
        )


@dataclass
class SavedTripSearchServicePortTypeServiceOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["SavedTripSearchServicePortTypeServiceOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        saved_trip_search_rsp: Optional[SavedTripSearchRsp] = field(
            default=None,
            metadata={
                "name": "SavedTripSearchRsp",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/universal_v52_0",
            }
        )
        fault: Optional["SavedTripSearchServicePortTypeServiceOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            }
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            detail: Optional["SavedTripSearchServicePortTypeServiceOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )

            @dataclass
            class Detail:
                error_info: Optional[V52ErrorInfo] = field(
                    default=None,
                    metadata={
                        "name": "ErrorInfo",
                        "type": "Element",
                        "namespace": "http://www.travelport.com/schema/common_v52_0",
                    }
                )


@dataclass
class SeatMapPortTypeServiceInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    header: Optional["SeatMapPortTypeServiceInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        }
    )
    body: Optional["SeatMapPortTypeServiceInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Header:
        session_context: Optional[SessionContext] = field(
            default=None,
            metadata={
                "name": "SessionContext",
                "type": "Element",
                "namespace": "http://www.travelport.com/soa/common/security/SessionContext_v1",
            }
        )

    @dataclass
    class Body:
        seat_map_req: Optional[SeatMapReq] = field(
            default=None,
            metadata={
                "name": "SeatMapReq",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/air_v52_0",
            }
        )


@dataclass
class SeatMapPortTypeServiceOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["SeatMapPortTypeServiceOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        seat_map_rsp: Optional[SeatMapRsp] = field(
            default=None,
            metadata={
                "name": "SeatMapRsp",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/air_v52_0",
            }
        )
        fault: Optional["SeatMapPortTypeServiceOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            }
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            detail: Optional["SeatMapPortTypeServiceOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )

            @dataclass
            class Detail:
                error_info: Optional[V52ErrorInfo] = field(
                    default=None,
                    metadata={
                        "name": "ErrorInfo",
                        "type": "Element",
                        "namespace": "http://www.travelport.com/schema/common_v52_0",
                    }
                )


@dataclass
class SingleProfileMigrationPortTypeServiceInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    header: Optional[object] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        }
    )
    body: Optional["SingleProfileMigrationPortTypeServiceInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        single_profile_migration_req: Optional[SingleProfileMigrationReq] = field(
            default=None,
            metadata={
                "name": "SingleProfileMigrationReq",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/sharedUprofile_v20_0",
            }
        )


@dataclass
class SingleProfileMigrationPortTypeServiceOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["SingleProfileMigrationPortTypeServiceOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        single_profile_migration_rsp: Optional[SingleProfileMigrationRsp] = field(
            default=None,
            metadata={
                "name": "SingleProfileMigrationRsp",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/sharedUprofile_v20_0",
            }
        )
        fault: Optional["SingleProfileMigrationPortTypeServiceOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            }
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            detail: Optional["SingleProfileMigrationPortTypeServiceOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )

            @dataclass
            class Detail:
                error_info: Optional[V52ErrorInfo] = field(
                    default=None,
                    metadata={
                        "name": "ErrorInfo",
                        "type": "Element",
                        "namespace": "http://www.travelport.com/schema/common_v52_0",
                    }
                )


@dataclass
class SystemInfoPortTypeServiceInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["SystemInfoPortTypeServiceInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        system_info_req: Optional[SystemInfoReq] = field(
            default=None,
            metadata={
                "name": "SystemInfoReq",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/system_v32_0",
            }
        )


@dataclass
class SystemInfoPortTypeServiceOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["SystemInfoPortTypeServiceOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        system_info_rsp: Optional[SystemInfoRsp] = field(
            default=None,
            metadata={
                "name": "SystemInfoRsp",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/system_v32_0",
            }
        )
        fault: Optional["SystemInfoPortTypeServiceOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            }
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            detail: Optional["SystemInfoPortTypeServiceOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )

            @dataclass
            class Detail:
                error_info: Optional[V52ErrorInfo] = field(
                    default=None,
                    metadata={
                        "name": "ErrorInfo",
                        "type": "Element",
                        "namespace": "http://www.travelport.com/schema/common_v52_0",
                    }
                )


@dataclass
class SystemPingPortTypeServiceInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["SystemPingPortTypeServiceInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        ping_req: Optional[PingReq] = field(
            default=None,
            metadata={
                "name": "PingReq",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/system_v32_0",
            }
        )


@dataclass
class SystemPingPortTypeServiceOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["SystemPingPortTypeServiceOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        ping_rsp: Optional[PingRsp] = field(
            default=None,
            metadata={
                "name": "PingRsp",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/system_v32_0",
            }
        )
        fault: Optional["SystemPingPortTypeServiceOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            }
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            detail: Optional["SystemPingPortTypeServiceOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )

            @dataclass
            class Detail:
                error_info: Optional[V52ErrorInfo] = field(
                    default=None,
                    metadata={
                        "name": "ErrorInfo",
                        "type": "Element",
                        "namespace": "http://www.travelport.com/schema/common_v52_0",
                    }
                )


@dataclass
class SystemTimePortTypeServiceInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["SystemTimePortTypeServiceInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        time_req: Optional[TimeReq] = field(
            default=None,
            metadata={
                "name": "TimeReq",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/system_v32_0",
            }
        )


@dataclass
class SystemTimePortTypeServiceOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["SystemTimePortTypeServiceOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        time_rsp: Optional[TimeRsp] = field(
            default=None,
            metadata={
                "name": "TimeRsp",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/system_v32_0",
            }
        )
        fault: Optional["SystemTimePortTypeServiceOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            }
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            detail: Optional["SystemTimePortTypeServiceOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )

            @dataclass
            class Detail:
                error_info: Optional[V52ErrorInfo] = field(
                    default=None,
                    metadata={
                        "name": "ErrorInfo",
                        "type": "Element",
                        "namespace": "http://www.travelport.com/schema/common_v52_0",
                    }
                )


@dataclass
class TerminalServicePortTypeServiceInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["TerminalServicePortTypeServiceInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        terminal_req: Optional[TerminalReq] = field(
            default=None,
            metadata={
                "name": "TerminalReq",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/terminal_v33_0",
            }
        )


@dataclass
class TerminalServicePortTypeServiceOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["TerminalServicePortTypeServiceOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        terminal_rsp: Optional[TerminalRsp] = field(
            default=None,
            metadata={
                "name": "TerminalRsp",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/terminal_v33_0",
            }
        )
        fault: Optional["TerminalServicePortTypeServiceOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            }
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            detail: Optional["TerminalServicePortTypeServiceOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )

            @dataclass
            class Detail:
                error_info: Optional[V33ErrorInfo] = field(
                    default=None,
                    metadata={
                        "name": "ErrorInfo",
                        "type": "Element",
                        "namespace": "http://www.travelport.com/schema/common_v33_0",
                    }
                )


@dataclass
class UimetaDataCreatePortTypeServiceInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    header: Optional[object] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        }
    )
    body: Optional["UimetaDataCreatePortTypeServiceInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        uimeta_data_create_req: Optional[UimetaDataCreateReq] = field(
            default=None,
            metadata={
                "name": "UIMetaDataCreateReq",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/sharedUprofile_v20_0",
            }
        )


@dataclass
class UimetaDataCreatePortTypeServiceOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["UimetaDataCreatePortTypeServiceOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        uimeta_data_create_rsp: Optional[UimetaDataCreateRsp] = field(
            default=None,
            metadata={
                "name": "UIMetaDataCreateRsp",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/sharedUprofile_v20_0",
            }
        )
        fault: Optional["UimetaDataCreatePortTypeServiceOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            }
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            detail: Optional["UimetaDataCreatePortTypeServiceOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )

            @dataclass
            class Detail:
                error_info: Optional[V52ErrorInfo] = field(
                    default=None,
                    metadata={
                        "name": "ErrorInfo",
                        "type": "Element",
                        "namespace": "http://www.travelport.com/schema/common_v52_0",
                    }
                )


@dataclass
class UimetaDataDeletePortTypeServiceInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    header: Optional[object] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        }
    )
    body: Optional["UimetaDataDeletePortTypeServiceInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        uimeta_data_delete_req: Optional[UimetaDataDeleteReq] = field(
            default=None,
            metadata={
                "name": "UIMetaDataDeleteReq",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/sharedUprofile_v20_0",
            }
        )


@dataclass
class UimetaDataDeletePortTypeServiceOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["UimetaDataDeletePortTypeServiceOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        uimeta_data_delete_rsp: Optional[UimetaDataDeleteRsp] = field(
            default=None,
            metadata={
                "name": "UIMetaDataDeleteRsp",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/sharedUprofile_v20_0",
            }
        )
        fault: Optional["UimetaDataDeletePortTypeServiceOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            }
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            detail: Optional["UimetaDataDeletePortTypeServiceOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )

            @dataclass
            class Detail:
                error_info: Optional[V52ErrorInfo] = field(
                    default=None,
                    metadata={
                        "name": "ErrorInfo",
                        "type": "Element",
                        "namespace": "http://www.travelport.com/schema/common_v52_0",
                    }
                )


@dataclass
class UimetaDataModifyPortTypeServiceInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    header: Optional[object] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        }
    )
    body: Optional["UimetaDataModifyPortTypeServiceInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        uimeta_data_modify_req: Optional[UimetaDataModifyReq] = field(
            default=None,
            metadata={
                "name": "UIMetaDataModifyReq",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/sharedUprofile_v20_0",
            }
        )


@dataclass
class UimetaDataModifyPortTypeServiceOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["UimetaDataModifyPortTypeServiceOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        uimeta_data_modify_rsp: Optional[UimetaDataModifyRsp] = field(
            default=None,
            metadata={
                "name": "UIMetaDataModifyRsp",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/sharedUprofile_v20_0",
            }
        )
        fault: Optional["UimetaDataModifyPortTypeServiceOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            }
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            detail: Optional["UimetaDataModifyPortTypeServiceOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )

            @dataclass
            class Detail:
                error_info: Optional[V52ErrorInfo] = field(
                    default=None,
                    metadata={
                        "name": "ErrorInfo",
                        "type": "Element",
                        "namespace": "http://www.travelport.com/schema/common_v52_0",
                    }
                )


@dataclass
class UimetaDataRetrievePortTypeServiceInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    header: Optional[object] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        }
    )
    body: Optional["UimetaDataRetrievePortTypeServiceInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        uimeta_data_retrieve_req: Optional[UimetaDataRetrieveReq] = field(
            default=None,
            metadata={
                "name": "UIMetaDataRetrieveReq",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/sharedUprofile_v20_0",
            }
        )


@dataclass
class UimetaDataRetrievePortTypeServiceOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["UimetaDataRetrievePortTypeServiceOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        uimeta_data_retrieve_rsp: Optional[UimetaDataRetrieveRsp] = field(
            default=None,
            metadata={
                "name": "UIMetaDataRetrieveRsp",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/sharedUprofile_v20_0",
            }
        )
        fault: Optional["UimetaDataRetrievePortTypeServiceOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            }
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            detail: Optional["UimetaDataRetrievePortTypeServiceOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )

            @dataclass
            class Detail:
                error_info: Optional[V52ErrorInfo] = field(
                    default=None,
                    metadata={
                        "name": "ErrorInfo",
                        "type": "Element",
                        "namespace": "http://www.travelport.com/schema/common_v52_0",
                    }
                )


@dataclass
class UniversalRecordCancelServicePortTypeServiceInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["UniversalRecordCancelServicePortTypeServiceInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        universal_record_cancel_req: Optional[UniversalRecordCancelReq] = field(
            default=None,
            metadata={
                "name": "UniversalRecordCancelReq",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/universal_v52_0",
            }
        )


@dataclass
class UniversalRecordCancelServicePortTypeServiceOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["UniversalRecordCancelServicePortTypeServiceOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        universal_record_cancel_rsp: Optional[UniversalRecordCancelRsp] = field(
            default=None,
            metadata={
                "name": "UniversalRecordCancelRsp",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/universal_v52_0",
            }
        )
        fault: Optional["UniversalRecordCancelServicePortTypeServiceOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            }
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            detail: Optional["UniversalRecordCancelServicePortTypeServiceOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )

            @dataclass
            class Detail:
                error_info: Optional[V52ErrorInfo] = field(
                    default=None,
                    metadata={
                        "name": "ErrorInfo",
                        "type": "Element",
                        "namespace": "http://www.travelport.com/schema/common_v52_0",
                    }
                )


@dataclass
class UniversalRecordHistorySearchPortTypeServiceInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    header: Optional["UniversalRecordHistorySearchPortTypeServiceInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        }
    )
    body: Optional["UniversalRecordHistorySearchPortTypeServiceInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Header:
        supported_versions: Optional[SupportedVersions] = field(
            default=None,
            metadata={
                "name": "SupportedVersions",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/universal_v52_0",
            }
        )

    @dataclass
    class Body:
        universal_record_history_search_req: Optional[UniversalRecordHistorySearchReq] = field(
            default=None,
            metadata={
                "name": "UniversalRecordHistorySearchReq",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/universal_v52_0",
            }
        )


@dataclass
class UniversalRecordHistorySearchPortTypeServiceOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["UniversalRecordHistorySearchPortTypeServiceOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        universal_record_history_search_rsp: Optional[UniversalRecordHistorySearchRsp] = field(
            default=None,
            metadata={
                "name": "UniversalRecordHistorySearchRsp",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/universal_v52_0",
            }
        )
        fault: Optional["UniversalRecordHistorySearchPortTypeServiceOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            }
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            detail: Optional["UniversalRecordHistorySearchPortTypeServiceOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )

            @dataclass
            class Detail:
                error_info: Optional[V52ErrorInfo] = field(
                    default=None,
                    metadata={
                        "name": "ErrorInfo",
                        "type": "Element",
                        "namespace": "http://www.travelport.com/schema/common_v52_0",
                    }
                )


@dataclass
class UniversalRecordImportServicePortTypeServiceInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    header: Optional["UniversalRecordImportServicePortTypeServiceInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        }
    )
    body: Optional["UniversalRecordImportServicePortTypeServiceInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Header:
        supported_versions: Optional[SupportedVersions] = field(
            default=None,
            metadata={
                "name": "SupportedVersions",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/universal_v52_0",
            }
        )

    @dataclass
    class Body:
        universal_record_import_req: Optional[UniversalRecordImportReq] = field(
            default=None,
            metadata={
                "name": "UniversalRecordImportReq",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/universal_v52_0",
            }
        )


@dataclass
class UniversalRecordImportServicePortTypeServiceOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["UniversalRecordImportServicePortTypeServiceOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        universal_record_import_rsp: Optional[UniversalRecordImportRsp] = field(
            default=None,
            metadata={
                "name": "UniversalRecordImportRsp",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/universal_v52_0",
            }
        )
        fault: Optional["UniversalRecordImportServicePortTypeServiceOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            }
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            detail: Optional["UniversalRecordImportServicePortTypeServiceOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )

            @dataclass
            class Detail:
                error_info: Optional[V52ErrorInfo] = field(
                    default=None,
                    metadata={
                        "name": "ErrorInfo",
                        "type": "Element",
                        "namespace": "http://www.travelport.com/schema/common_v52_0",
                    }
                )


@dataclass
class UniversalRecordModifyServicePortTypeServiceInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    header: Optional["UniversalRecordModifyServicePortTypeServiceInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        }
    )
    body: Optional["UniversalRecordModifyServicePortTypeServiceInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Header:
        session_context: Optional[SessionContext] = field(
            default=None,
            metadata={
                "name": "SessionContext",
                "type": "Element",
                "namespace": "http://www.travelport.com/soa/common/security/SessionContext_v1",
            }
        )
        supported_versions: Optional[SupportedVersions] = field(
            default=None,
            metadata={
                "name": "SupportedVersions",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/universal_v52_0",
            }
        )

    @dataclass
    class Body:
        universal_record_modify_req: Optional[UniversalRecordModifyReq] = field(
            default=None,
            metadata={
                "name": "UniversalRecordModifyReq",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/universal_v52_0",
            }
        )


@dataclass
class UniversalRecordRetrieveServicePortTypeServiceInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    header: Optional["UniversalRecordRetrieveServicePortTypeServiceInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        }
    )
    body: Optional["UniversalRecordRetrieveServicePortTypeServiceInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Header:
        session_context: Optional[SessionContext] = field(
            default=None,
            metadata={
                "name": "SessionContext",
                "type": "Element",
                "namespace": "http://www.travelport.com/soa/common/security/SessionContext_v1",
            }
        )
        supported_versions: Optional[SupportedVersions] = field(
            default=None,
            metadata={
                "name": "SupportedVersions",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/universal_v52_0",
            }
        )

    @dataclass
    class Body:
        universal_record_retrieve_req: Optional[UniversalRecordRetrieveReq] = field(
            default=None,
            metadata={
                "name": "UniversalRecordRetrieveReq",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/universal_v52_0",
            }
        )


@dataclass
class UniversalRecordRetrieveServicePortTypeServiceOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["UniversalRecordRetrieveServicePortTypeServiceOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        universal_record_retrieve_rsp: Optional[UniversalRecordRetrieveRsp] = field(
            default=None,
            metadata={
                "name": "UniversalRecordRetrieveRsp",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/universal_v52_0",
            }
        )
        fault: Optional["UniversalRecordRetrieveServicePortTypeServiceOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            }
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            detail: Optional["UniversalRecordRetrieveServicePortTypeServiceOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )

            @dataclass
            class Detail:
                error_info: Optional[V52ErrorInfo] = field(
                    default=None,
                    metadata={
                        "name": "ErrorInfo",
                        "type": "Element",
                        "namespace": "http://www.travelport.com/schema/common_v52_0",
                    }
                )
                universal_record_error_info: Optional[UniversalRecordErrorInfo] = field(
                    default=None,
                    metadata={
                        "name": "UniversalRecordErrorInfo",
                        "type": "Element",
                        "namespace": "http://www.travelport.com/schema/universal_v52_0",
                    }
                )


@dataclass
class UniversalRecordSearchServicePortTypeServiceInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["UniversalRecordSearchServicePortTypeServiceInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        universal_record_search_req: Optional[UniversalRecordSearchReq] = field(
            default=None,
            metadata={
                "name": "UniversalRecordSearchReq",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/universal_v52_0",
            }
        )


@dataclass
class UniversalRecordSearchServicePortTypeServiceOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["UniversalRecordSearchServicePortTypeServiceOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        universal_record_search_rsp: Optional[UniversalRecordSearchRsp] = field(
            default=None,
            metadata={
                "name": "UniversalRecordSearchRsp",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/universal_v52_0",
            }
        )
        fault: Optional["UniversalRecordSearchServicePortTypeServiceOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            }
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            detail: Optional["UniversalRecordSearchServicePortTypeServiceOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )

            @dataclass
            class Detail:
                error_info: Optional[V52ErrorInfo] = field(
                    default=None,
                    metadata={
                        "name": "ErrorInfo",
                        "type": "Element",
                        "namespace": "http://www.travelport.com/schema/common_v52_0",
                    }
                )


@dataclass
class UpsellAdminPortTypeServiceInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["UpsellAdminPortTypeServiceInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        upsell_admin_req: Optional[UpsellAdminReq] = field(
            default=None,
            metadata={
                "name": "UpsellAdminReq",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/util_v52_0",
            }
        )


@dataclass
class UpsellAdminPortTypeServiceOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["UpsellAdminPortTypeServiceOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        upsell_admin_rsp: Optional[UpsellAdminRsp] = field(
            default=None,
            metadata={
                "name": "UpsellAdminRsp",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/util_v52_0",
            }
        )
        fault: Optional["UpsellAdminPortTypeServiceOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            }
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            detail: Optional["UpsellAdminPortTypeServiceOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )

            @dataclass
            class Detail:
                error_info: Optional[V52ErrorInfo] = field(
                    default=None,
                    metadata={
                        "name": "ErrorInfo",
                        "type": "Element",
                        "namespace": "http://www.travelport.com/schema/common_v52_0",
                    }
                )


@dataclass
class UpsellAdminSearchPortTypeServiceInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["UpsellAdminSearchPortTypeServiceInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        upsell_search_req: Optional[UpsellSearchReq] = field(
            default=None,
            metadata={
                "name": "UpsellSearchReq",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/util_v52_0",
            }
        )


@dataclass
class UpsellAdminSearchPortTypeServiceOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["UpsellAdminSearchPortTypeServiceOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        upsell_search_rsp: Optional[UpsellSearchRsp] = field(
            default=None,
            metadata={
                "name": "UpsellSearchRsp",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/util_v52_0",
            }
        )
        fault: Optional["UpsellAdminSearchPortTypeServiceOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            }
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            detail: Optional["UpsellAdminSearchPortTypeServiceOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )

            @dataclass
            class Detail:
                error_info: Optional[V52ErrorInfo] = field(
                    default=None,
                    metadata={
                        "name": "ErrorInfo",
                        "type": "Element",
                        "namespace": "http://www.travelport.com/schema/common_v52_0",
                    }
                )


@dataclass
class UtilCreditCardAuthPortTypeServiceInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["UtilCreditCardAuthPortTypeServiceInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        credit_card_auth_req: Optional[CreditCardAuthReq] = field(
            default=None,
            metadata={
                "name": "CreditCardAuthReq",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/util_v52_0",
            }
        )


@dataclass
class UtilCreditCardAuthPortTypeServiceOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["UtilCreditCardAuthPortTypeServiceOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        credit_card_auth_rsp: Optional[CreditCardAuthRsp] = field(
            default=None,
            metadata={
                "name": "CreditCardAuthRsp",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/util_v52_0",
            }
        )
        fault: Optional["UtilCreditCardAuthPortTypeServiceOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            }
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            detail: Optional["UtilCreditCardAuthPortTypeServiceOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )

            @dataclass
            class Detail:
                error_info: Optional[V52ErrorInfo] = field(
                    default=None,
                    metadata={
                        "name": "ErrorInfo",
                        "type": "Element",
                        "namespace": "http://www.travelport.com/schema/common_v52_0",
                    }
                )


@dataclass
class UtilCurrencyConversionPortTypeServiceInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["UtilCurrencyConversionPortTypeServiceInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        currency_conversion_req: Optional[CurrencyConversionReq] = field(
            default=None,
            metadata={
                "name": "CurrencyConversionReq",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/util_v52_0",
            }
        )


@dataclass
class UtilCurrencyConversionPortTypeServiceOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["UtilCurrencyConversionPortTypeServiceOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        currency_conversion_rsp: Optional[CurrencyConversionRsp] = field(
            default=None,
            metadata={
                "name": "CurrencyConversionRsp",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/util_v52_0",
            }
        )
        fault: Optional["UtilCurrencyConversionPortTypeServiceOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            }
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            detail: Optional["UtilCurrencyConversionPortTypeServiceOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )

            @dataclass
            class Detail:
                error_info: Optional[V52ErrorInfo] = field(
                    default=None,
                    metadata={
                        "name": "ErrorInfo",
                        "type": "Element",
                        "namespace": "http://www.travelport.com/schema/common_v52_0",
                    }
                )


@dataclass
class VehicleCancelServicePortTypeServiceInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    header: Optional["VehicleCancelServicePortTypeServiceInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        }
    )
    body: Optional["VehicleCancelServicePortTypeServiceInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Header:
        supported_versions: Optional[SupportedVersions] = field(
            default=None,
            metadata={
                "name": "SupportedVersions",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/universal_v52_0",
            }
        )

    @dataclass
    class Body:
        vehicle_cancel_req: Optional[VehicleCancelReq] = field(
            default=None,
            metadata={
                "name": "VehicleCancelReq",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/universal_v52_0",
            }
        )


@dataclass
class VehicleCancelServicePortTypeServiceOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["VehicleCancelServicePortTypeServiceOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        vehicle_cancel_rsp: Optional[VehicleCancelRsp] = field(
            default=None,
            metadata={
                "name": "VehicleCancelRsp",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/universal_v52_0",
            }
        )
        fault: Optional["VehicleCancelServicePortTypeServiceOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            }
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            detail: Optional["VehicleCancelServicePortTypeServiceOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )

            @dataclass
            class Detail:
                error_info: Optional[V52ErrorInfo] = field(
                    default=None,
                    metadata={
                        "name": "ErrorInfo",
                        "type": "Element",
                        "namespace": "http://www.travelport.com/schema/common_v52_0",
                    }
                )


@dataclass
class VehicleKeywordsServicePortTypeServiceInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["VehicleKeywordsServicePortTypeServiceInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        vehicle_keyword_req: Optional[VehicleKeywordReq] = field(
            default=None,
            metadata={
                "name": "VehicleKeywordReq",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/vehicle_v52_0",
            }
        )


@dataclass
class VehicleKeywordsServicePortTypeServiceOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["VehicleKeywordsServicePortTypeServiceOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        vehicle_keyword_rsp: Optional[VehicleKeywordRsp] = field(
            default=None,
            metadata={
                "name": "VehicleKeywordRsp",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/vehicle_v52_0",
            }
        )
        fault: Optional["VehicleKeywordsServicePortTypeServiceOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            }
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            detail: Optional["VehicleKeywordsServicePortTypeServiceOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )

            @dataclass
            class Detail:
                error_info: Optional[V52ErrorInfo] = field(
                    default=None,
                    metadata={
                        "name": "ErrorInfo",
                        "type": "Element",
                        "namespace": "http://www.travelport.com/schema/common_v52_0",
                    }
                )


@dataclass
class VehicleLocationDetailServicePortTypeServiceInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    header: Optional["VehicleLocationDetailServicePortTypeServiceInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        }
    )
    body: Optional["VehicleLocationDetailServicePortTypeServiceInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Header:
        session_context: Optional[SessionContext] = field(
            default=None,
            metadata={
                "name": "SessionContext",
                "type": "Element",
                "namespace": "http://www.travelport.com/soa/common/security/SessionContext_v1",
            }
        )

    @dataclass
    class Body:
        vehicle_location_detail_req: Optional[VehicleLocationDetailReq] = field(
            default=None,
            metadata={
                "name": "VehicleLocationDetailReq",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/vehicle_v52_0",
            }
        )


@dataclass
class VehicleLocationDetailServicePortTypeServiceOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["VehicleLocationDetailServicePortTypeServiceOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        vehicle_location_detail_rsp: Optional[VehicleLocationDetailRsp] = field(
            default=None,
            metadata={
                "name": "VehicleLocationDetailRsp",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/vehicle_v52_0",
            }
        )
        fault: Optional["VehicleLocationDetailServicePortTypeServiceOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            }
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            detail: Optional["VehicleLocationDetailServicePortTypeServiceOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )

            @dataclass
            class Detail:
                error_info: Optional[V52ErrorInfo] = field(
                    default=None,
                    metadata={
                        "name": "ErrorInfo",
                        "type": "Element",
                        "namespace": "http://www.travelport.com/schema/common_v52_0",
                    }
                )


@dataclass
class VehicleLocationServicePortTypeServiceInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["VehicleLocationServicePortTypeServiceInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        vehicle_location_req: Optional[VehicleLocationReq] = field(
            default=None,
            metadata={
                "name": "VehicleLocationReq",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/vehicle_v52_0",
            }
        )


@dataclass
class VehicleLocationServicePortTypeServiceOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["VehicleLocationServicePortTypeServiceOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        vehicle_location_rsp: Optional[VehicleLocationRsp] = field(
            default=None,
            metadata={
                "name": "VehicleLocationRsp",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/vehicle_v52_0",
            }
        )
        fault: Optional["VehicleLocationServicePortTypeServiceOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            }
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            detail: Optional["VehicleLocationServicePortTypeServiceOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )

            @dataclass
            class Detail:
                error_info: Optional[V52ErrorInfo] = field(
                    default=None,
                    metadata={
                        "name": "ErrorInfo",
                        "type": "Element",
                        "namespace": "http://www.travelport.com/schema/common_v52_0",
                    }
                )


@dataclass
class VehicleMediaLinksServicePortTypeServiceInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["VehicleMediaLinksServicePortTypeServiceInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        vehicle_media_links_req: Optional[VehicleMediaLinksReq] = field(
            default=None,
            metadata={
                "name": "VehicleMediaLinksReq",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/vehicle_v52_0",
            }
        )


@dataclass
class VehicleMediaLinksServicePortTypeServiceOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["VehicleMediaLinksServicePortTypeServiceOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        vehicle_media_links_rsp: Optional[VehicleMediaLinksRsp] = field(
            default=None,
            metadata={
                "name": "VehicleMediaLinksRsp",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/vehicle_v52_0",
            }
        )
        fault: Optional["VehicleMediaLinksServicePortTypeServiceOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            }
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            detail: Optional["VehicleMediaLinksServicePortTypeServiceOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )

            @dataclass
            class Detail:
                error_info: Optional[V52ErrorInfo] = field(
                    default=None,
                    metadata={
                        "name": "ErrorInfo",
                        "type": "Element",
                        "namespace": "http://www.travelport.com/schema/common_v52_0",
                    }
                )


@dataclass
class VehicleReservationServicePortTypeServiceInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    header: Optional["VehicleReservationServicePortTypeServiceInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        }
    )
    body: Optional["VehicleReservationServicePortTypeServiceInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Header:
        supported_versions: Optional[SupportedVersions] = field(
            default=None,
            metadata={
                "name": "SupportedVersions",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/universal_v52_0",
            }
        )

    @dataclass
    class Body:
        vehicle_create_reservation_req: Optional[VehicleCreateReservationReq] = field(
            default=None,
            metadata={
                "name": "VehicleCreateReservationReq",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/universal_v52_0",
            }
        )


@dataclass
class VehicleReservationServicePortTypeServiceOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["VehicleReservationServicePortTypeServiceOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        vehicle_create_reservation_rsp: Optional[VehicleCreateReservationRsp] = field(
            default=None,
            metadata={
                "name": "VehicleCreateReservationRsp",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/universal_v52_0",
            }
        )
        fault: Optional["VehicleReservationServicePortTypeServiceOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            }
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            detail: Optional["VehicleReservationServicePortTypeServiceOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )

            @dataclass
            class Detail:
                error_info: Optional[V52ErrorInfo] = field(
                    default=None,
                    metadata={
                        "name": "ErrorInfo",
                        "type": "Element",
                        "namespace": "http://www.travelport.com/schema/common_v52_0",
                    }
                )
                price_match_error: Optional[PriceMatchError] = field(
                    default=None,
                    metadata={
                        "name": "PriceMatchError",
                        "type": "Element",
                        "namespace": "http://www.travelport.com/schema/common_v52_0",
                    }
                )


@dataclass
class VehicleRetrieveServicePortTypeServiceInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["VehicleRetrieveServicePortTypeServiceInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        vehicle_retrieve_req: Optional[VehicleRetrieveReq] = field(
            default=None,
            metadata={
                "name": "VehicleRetrieveReq",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/vehicle_v52_0",
            }
        )


@dataclass
class VehicleRetrieveServicePortTypeServiceOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["VehicleRetrieveServicePortTypeServiceOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        vehicle_retrieve_rsp: Optional[VehicleRetrieveRsp] = field(
            default=None,
            metadata={
                "name": "VehicleRetrieveRsp",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/vehicle_v52_0",
            }
        )
        fault: Optional["VehicleRetrieveServicePortTypeServiceOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            }
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            detail: Optional["VehicleRetrieveServicePortTypeServiceOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )

            @dataclass
            class Detail:
                error_info: Optional[V52ErrorInfo] = field(
                    default=None,
                    metadata={
                        "name": "ErrorInfo",
                        "type": "Element",
                        "namespace": "http://www.travelport.com/schema/common_v52_0",
                    }
                )


@dataclass
class VehicleRulesServicePortTypeServiceInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["VehicleRulesServicePortTypeServiceInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        vehicle_rules_req: Optional[VehicleRulesReq] = field(
            default=None,
            metadata={
                "name": "VehicleRulesReq",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/vehicle_v52_0",
            }
        )


@dataclass
class VehicleRulesServicePortTypeServiceOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["VehicleRulesServicePortTypeServiceOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        vehicle_rules_rsp: Optional[VehicleRulesRsp] = field(
            default=None,
            metadata={
                "name": "VehicleRulesRsp",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/vehicle_v52_0",
            }
        )
        fault: Optional["VehicleRulesServicePortTypeServiceOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            }
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            detail: Optional["VehicleRulesServicePortTypeServiceOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )

            @dataclass
            class Detail:
                error_info: Optional[V52ErrorInfo] = field(
                    default=None,
                    metadata={
                        "name": "ErrorInfo",
                        "type": "Element",
                        "namespace": "http://www.travelport.com/schema/common_v52_0",
                    }
                )


@dataclass
class VehicleSearchServicePortTypeServiceInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["VehicleSearchServicePortTypeServiceInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        vehicle_search_availability_req: Optional[VehicleSearchAvailabilityReq] = field(
            default=None,
            metadata={
                "name": "VehicleSearchAvailabilityReq",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/vehicle_v52_0",
            }
        )


@dataclass
class VehicleSearchServicePortTypeServiceOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["VehicleSearchServicePortTypeServiceOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        vehicle_search_availability_rsp: Optional[VehicleSearchAvailabilityRsp] = field(
            default=None,
            metadata={
                "name": "VehicleSearchAvailabilityRsp",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/vehicle_v52_0",
            }
        )
        fault: Optional["VehicleSearchServicePortTypeServiceOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            }
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            detail: Optional["VehicleSearchServicePortTypeServiceOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )

            @dataclass
            class Detail:
                error_info: Optional[V52ErrorInfo] = field(
                    default=None,
                    metadata={
                        "name": "ErrorInfo",
                        "type": "Element",
                        "namespace": "http://www.travelport.com/schema/common_v52_0",
                    }
                )


@dataclass
class VehicleUpsellSearchServicePortTypeServiceInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["VehicleUpsellSearchServicePortTypeServiceInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        vehicle_upsell_search_availability_req: Optional[VehicleUpsellSearchAvailabilityReq] = field(
            default=None,
            metadata={
                "name": "VehicleUpsellSearchAvailabilityReq",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/vehicle_v52_0",
            }
        )


@dataclass
class VehicleUpsellSearchServicePortTypeServiceOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["VehicleUpsellSearchServicePortTypeServiceOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        vehicle_upsell_search_availability_rsp: Optional[VehicleUpsellSearchAvailabilityRsp] = field(
            default=None,
            metadata={
                "name": "VehicleUpsellSearchAvailabilityRsp",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/vehicle_v52_0",
            }
        )
        fault: Optional["VehicleUpsellSearchServicePortTypeServiceOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            }
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            detail: Optional["VehicleUpsellSearchServicePortTypeServiceOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )

            @dataclass
            class Detail:
                error_info: Optional[V52ErrorInfo] = field(
                    default=None,
                    metadata={
                        "name": "ErrorInfo",
                        "type": "Element",
                        "namespace": "http://www.travelport.com/schema/common_v52_0",
                    }
                )


@dataclass
class ApisrequirementsList:
    """
    The shared object list of APISRequirements.
    """
    class Meta:
        name = "APISRequirementsList"
        namespace = "http://www.travelport.com/schema/air_v52_0"

    apisrequirements: List[Apisrequirements] = field(
        default_factory=list,
        metadata={
            "name": "APISRequirements",
            "type": "Element",
            "min_occurs": 1,
            "max_occurs": 999,
        }
    )


@dataclass
class AirExchangeBundle:
    """
    Bundle exchange, pricing, and penalty information for one ticket number Used
    both in request and response.

    :ivar air_exchange_info:
    :ivar air_pricing_info_ref:
    :ivar tax_info:
    :ivar penalty: Only used within an AirExchangeQuoteRsp
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    air_exchange_info: Optional[AirExchangeInfo] = field(
        default=None,
        metadata={
            "name": "AirExchangeInfo",
            "type": "Element",
            "namespace": "http://www.travelport.com/schema/common_v52_0",
            "required": True,
        }
    )
    air_pricing_info_ref: List[AirPricingInfoRef] = field(
        default_factory=list,
        metadata={
            "name": "AirPricingInfoRef",
            "type": "Element",
            "max_occurs": 999,
        }
    )
    tax_info: List[TaxInfo] = field(
        default_factory=list,
        metadata={
            "name": "TaxInfo",
            "type": "Element",
            "max_occurs": 999,
        }
    )
    penalty: List[CommonPenalty] = field(
        default_factory=list,
        metadata={
            "name": "Penalty",
            "type": "Element",
            "namespace": "http://www.travelport.com/schema/common_v52_0",
            "max_occurs": 999,
        }
    )


@dataclass
class AirFareRulesModifier:
    """
    The modifiers for Air Fare Rules.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    air_fare_rule_category: List[AirFareRuleCategory] = field(
        default_factory=list,
        metadata={
            "name": "AirFareRuleCategory",
            "type": "Element",
            "max_occurs": 999,
        }
    )


@dataclass
class AirItineraryDetails:
    """
    Itinerary details containing brand details.

    :ivar air_segment_details:
    :ivar passenger_details:
    :ivar key: Air itinerary details key
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    air_segment_details: List[AirSegmentDetails] = field(
        default_factory=list,
        metadata={
            "name": "AirSegmentDetails",
            "type": "Element",
            "min_occurs": 1,
            "max_occurs": 16,
        }
    )
    passenger_details: List[PassengerDetails] = field(
        default_factory=list,
        metadata={
            "name": "PassengerDetails",
            "type": "Element",
            "min_occurs": 1,
            "max_occurs": 15,
        }
    )
    key: Optional[str] = field(
        default=None,
        metadata={
            "name": "Key",
            "type": "Attribute",
            "required": True,
        }
    )


@dataclass
class AirLegModifiers:
    """
    :ivar permitted_cabins:
    :ivar preferred_cabins:
    :ivar permitted_carriers:
    :ivar prohibited_carriers:
    :ivar preferred_carriers:
    :ivar permitted_connection_points: This is the container to specify
        all permitted connection points. Applicable for 1G/1V/1P.
    :ivar prohibited_connection_points: This is the container to specify
        all prohibited connection points. Applicable for 1G/1V/1P.
    :ivar preferred_connection_points: This is the container to specify
        all preferred connection points. Applicable for 1G/1V only.
    :ivar permitted_booking_codes: This is the container to specify all
        permitted booking codes
    :ivar preferred_booking_codes:
    :ivar preferred_alliances:
    :ivar prohibited_booking_codes: This is the container to specify all
        prohibited booking codes
    :ivar disfavored_alliances:
    :ivar flight_type:
    :ivar anchor_flight_data:
    :ivar prohibit_overnight_layovers: If true, excludes connections if
        arrival time of first flight and departure time of second flight
        is on 2 different calendar days. When used in conjunction with
        MaxConnectionTime, it would exclude all connections if the
        connecting flights wait time exceeds the time specified in
        MaxConnectionTime.
    :ivar max_connection_time:
    :ivar return_first_available_only: If it is true then it will search
        for first available for the booking code designated or any
        booking code in same cabin.
    :ivar allow_direct_access: If it is true request will be sent
        directly to the carrier.
    :ivar prohibit_multi_airport_connection: Indicates whether to
        restrict multi-airport connections
    :ivar prefer_non_stop: When non-stops are preferred, the
        distribution of search results should skew heavily toward non-
        stop flights while still returning some one stop flights for
        comparison and price competitiveness. The search request will
        ‘boost' the preference towards non-stops. If true then Non Stop
        flights will be preferred.
    :ivar order_by: Indicates whether to sort by Journey Time,
        Deparature Time or Arrival Time
    :ivar max_journey_time: Maximum Journey Time for this leg (in hours)
        0-99. Supported Providers 1G,1V.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    permitted_cabins: Optional[PermittedCabins] = field(
        default=None,
        metadata={
            "name": "PermittedCabins",
            "type": "Element",
        }
    )
    preferred_cabins: Optional[PreferredCabins] = field(
        default=None,
        metadata={
            "name": "PreferredCabins",
            "type": "Element",
        }
    )
    permitted_carriers: Optional[PermittedCarriers] = field(
        default=None,
        metadata={
            "name": "PermittedCarriers",
            "type": "Element",
        }
    )
    prohibited_carriers: Optional[ProhibitedCarriers] = field(
        default=None,
        metadata={
            "name": "ProhibitedCarriers",
            "type": "Element",
        }
    )
    preferred_carriers: Optional[PreferredCarriers] = field(
        default=None,
        metadata={
            "name": "PreferredCarriers",
            "type": "Element",
        }
    )
    permitted_connection_points: Optional["AirLegModifiers.PermittedConnectionPoints"] = field(
        default=None,
        metadata={
            "name": "PermittedConnectionPoints",
            "type": "Element",
        }
    )
    prohibited_connection_points: Optional["AirLegModifiers.ProhibitedConnectionPoints"] = field(
        default=None,
        metadata={
            "name": "ProhibitedConnectionPoints",
            "type": "Element",
        }
    )
    preferred_connection_points: Optional["AirLegModifiers.PreferredConnectionPoints"] = field(
        default=None,
        metadata={
            "name": "PreferredConnectionPoints",
            "type": "Element",
        }
    )
    permitted_booking_codes: Optional["AirLegModifiers.PermittedBookingCodes"] = field(
        default=None,
        metadata={
            "name": "PermittedBookingCodes",
            "type": "Element",
        }
    )
    preferred_booking_codes: Optional[PreferredBookingCodes] = field(
        default=None,
        metadata={
            "name": "PreferredBookingCodes",
            "type": "Element",
        }
    )
    preferred_alliances: Optional["AirLegModifiers.PreferredAlliances"] = field(
        default=None,
        metadata={
            "name": "PreferredAlliances",
            "type": "Element",
        }
    )
    prohibited_booking_codes: Optional["AirLegModifiers.ProhibitedBookingCodes"] = field(
        default=None,
        metadata={
            "name": "ProhibitedBookingCodes",
            "type": "Element",
        }
    )
    disfavored_alliances: Optional["AirLegModifiers.DisfavoredAlliances"] = field(
        default=None,
        metadata={
            "name": "DisfavoredAlliances",
            "type": "Element",
        }
    )
    flight_type: Optional[FlightType] = field(
        default=None,
        metadata={
            "name": "FlightType",
            "type": "Element",
        }
    )
    anchor_flight_data: Optional[TypeAnchorFlightData] = field(
        default=None,
        metadata={
            "name": "AnchorFlightData",
            "type": "Element",
        }
    )
    prohibit_overnight_layovers: bool = field(
        default=False,
        metadata={
            "name": "ProhibitOvernightLayovers",
            "type": "Attribute",
        }
    )
    max_connection_time: Optional[int] = field(
        default=None,
        metadata={
            "name": "MaxConnectionTime",
            "type": "Attribute",
        }
    )
    return_first_available_only: Optional[bool] = field(
        default=None,
        metadata={
            "name": "ReturnFirstAvailableOnly",
            "type": "Attribute",
        }
    )
    allow_direct_access: bool = field(
        default=False,
        metadata={
            "name": "AllowDirectAccess",
            "type": "Attribute",
        }
    )
    prohibit_multi_airport_connection: Optional[bool] = field(
        default=None,
        metadata={
            "name": "ProhibitMultiAirportConnection",
            "type": "Attribute",
        }
    )
    prefer_non_stop: bool = field(
        default=False,
        metadata={
            "name": "PreferNonStop",
            "type": "Attribute",
        }
    )
    order_by: Optional[AirLegModifiersOrderBy] = field(
        default=None,
        metadata={
            "name": "OrderBy",
            "type": "Attribute",
        }
    )
    max_journey_time: Optional[int] = field(
        default=None,
        metadata={
            "name": "MaxJourneyTime",
            "type": "Attribute",
            "min_inclusive": 0,
            "max_inclusive": 99,
        }
    )

    @dataclass
    class PermittedConnectionPoints:
        connection_point: List[ConnectionPoint] = field(
            default_factory=list,
            metadata={
                "name": "ConnectionPoint",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/common_v52_0",
                "min_occurs": 1,
                "max_occurs": 999,
            }
        )

    @dataclass
    class ProhibitedConnectionPoints:
        connection_point: List[ConnectionPoint] = field(
            default_factory=list,
            metadata={
                "name": "ConnectionPoint",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/common_v52_0",
                "min_occurs": 1,
                "max_occurs": 999,
            }
        )

    @dataclass
    class PreferredConnectionPoints:
        connection_point: List[ConnectionPoint] = field(
            default_factory=list,
            metadata={
                "name": "ConnectionPoint",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/common_v52_0",
                "min_occurs": 1,
                "max_occurs": 99,
            }
        )

    @dataclass
    class PermittedBookingCodes:
        booking_code: List[BookingCode] = field(
            default_factory=list,
            metadata={
                "name": "BookingCode",
                "type": "Element",
                "min_occurs": 1,
                "max_occurs": 999,
            }
        )

    @dataclass
    class PreferredAlliances:
        alliance: List[Alliance] = field(
            default_factory=list,
            metadata={
                "name": "Alliance",
                "type": "Element",
                "min_occurs": 1,
                "max_occurs": 999,
            }
        )

    @dataclass
    class ProhibitedBookingCodes:
        booking_code: List[BookingCode] = field(
            default_factory=list,
            metadata={
                "name": "BookingCode",
                "type": "Element",
                "min_occurs": 1,
                "max_occurs": 999,
            }
        )

    @dataclass
    class DisfavoredAlliances:
        alliance: List[Alliance] = field(
            default_factory=list,
            metadata={
                "name": "Alliance",
                "type": "Element",
                "min_occurs": 1,
                "max_occurs": 999,
            }
        )


@dataclass
class AirRefundBundle:
    """
    Bundle refund, pricing, and penalty information for one ticket number Used both
    in request and response.

    :ivar air_refund_info:
    :ivar name:
    :ivar tax_info:
    :ivar waiver_code:
    :ivar ticket_number:
    :ivar ptc: Specifies the passenger type code for 1P
    :ivar refund_type: Specifies whether this bundle was auto or
        manually generated
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    air_refund_info: Optional[AirRefundInfo] = field(
        default=None,
        metadata={
            "name": "AirRefundInfo",
            "type": "Element",
            "required": True,
        }
    )
    name: List[Name] = field(
        default_factory=list,
        metadata={
            "name": "Name",
            "type": "Element",
            "namespace": "http://www.travelport.com/schema/common_v52_0",
            "max_occurs": 999,
        }
    )
    tax_info: List[TaxInfo] = field(
        default_factory=list,
        metadata={
            "name": "TaxInfo",
            "type": "Element",
            "min_occurs": 1,
            "max_occurs": 999,
        }
    )
    waiver_code: Optional[WaiverCode] = field(
        default=None,
        metadata={
            "name": "WaiverCode",
            "type": "Element",
        }
    )
    ticket_number: Optional[str] = field(
        default=None,
        metadata={
            "name": "TicketNumber",
            "type": "Attribute",
        }
    )
    ptc: Optional[object] = field(
        default=None,
        metadata={
            "name": "PTC",
            "type": "Attribute",
        }
    )
    refund_type: Optional[AirRefundBundleRefundType] = field(
        default=None,
        metadata={
            "name": "RefundType",
            "type": "Attribute",
        }
    )


@dataclass
class AirSearchModifiers:
    """
    Controls and switches for the Air Search request.

    :ivar disfavored_providers:
    :ivar preferred_providers:
    :ivar disfavored_carriers:
    :ivar permitted_carriers:
    :ivar prohibited_carriers:
    :ivar preferred_carriers:
    :ivar permitted_cabins:
    :ivar preferred_cabins:
    :ivar preferred_alliances:
    :ivar disfavored_alliances:
    :ivar permitted_booking_codes: This is the container to specify all
        permitted booking codes
    :ivar preferred_booking_codes:
    :ivar prohibited_booking_codes: This is the container to specify all
        prohibited booking codes
    :ivar flight_type:
    :ivar max_layover_duration: This is the maximum duration the layover
        may have for each trip in the request. Supported providers 1P.
    :ivar native_search_modifier: Container for Native command
        modifiers. Providers supported : 1P
    :ivar distance_type:
    :ivar include_flight_details:
    :ivar allow_change_of_airport:
    :ivar prohibit_overnight_layovers: If true, excludes connections if
        arrival time of first flight and departure time of second flight
        is on 2 different calendar days. When used in conjunction with
        MaxConnectionTime, it would exclude all connections if the
        connecting flights wait time exceeds the time specified in
        MaxConnectionTime.
    :ivar max_solutions: The maximum number of solutions to return.
        Decreasing this number
    :ivar max_connection_time: The maximum anount of time (in minutes)
        that a solution can contain for connections between flights.
    :ivar search_weekends: A value of true indicates that search should
        be expanded to include weekend combinations, if applicable.
    :ivar include_extra_solutions: If true, indicates that search should
        be made for returning more solutions, if available. For example,
        for certain providers, premium members may have the facility to
        get more solutions. This attribute may have to be combined with
        other applicable modifiers (like SearchWeekends) to return more
        results.
    :ivar prohibit_multi_airport_connection: Indicates whether to
        restrict multi-airport connections
    :ivar prefer_non_stop: When non-stops are preferred, the
        distribution of search results should skew heavily toward non-
        stop flights while still returning some one stop flights for
        comparison and price competitiveness. The search request will
        ‘boost' the preference towards non-stops. If true then Non Stop
        flights will be preferred.
    :ivar order_by: Indicates whether to sort by Journey Time,
        Deparature Time or Arrival Time. Applicable to air availability
        only.
    :ivar exclude_open_jaw_airport: This option ensures that travel
        into/out of each location will be into/out of the same airport
        of that location. Values are true or false. Default value is
        'false'. If value is true then open jaws are exclude. If false
        the open jaws are included. The supported providers: 1P
    :ivar exclude_ground_transportation: Indicates whether to allow the
        user to exclude ground transportation or not. Default value is
        'false'. If value is true then ground transportations are
        excluded. If false then ground transportations are included. The
        supported providers: 1P
    :ivar max_journey_time: Maximum Journey Time for all legs (in hours)
        0-99. For LFS Supported Providers are 1G,1V,1P. For AirAvail
        Supported Providers are 1G,1V.
    :ivar jet_service_only: Restricts results to Jet service flights
        only.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    disfavored_providers: Optional["AirSearchModifiers.DisfavoredProviders"] = field(
        default=None,
        metadata={
            "name": "DisfavoredProviders",
            "type": "Element",
        }
    )
    preferred_providers: Optional["AirSearchModifiers.PreferredProviders"] = field(
        default=None,
        metadata={
            "name": "PreferredProviders",
            "type": "Element",
        }
    )
    disfavored_carriers: Optional["AirSearchModifiers.DisfavoredCarriers"] = field(
        default=None,
        metadata={
            "name": "DisfavoredCarriers",
            "type": "Element",
        }
    )
    permitted_carriers: Optional[PermittedCarriers] = field(
        default=None,
        metadata={
            "name": "PermittedCarriers",
            "type": "Element",
        }
    )
    prohibited_carriers: Optional[ProhibitedCarriers] = field(
        default=None,
        metadata={
            "name": "ProhibitedCarriers",
            "type": "Element",
        }
    )
    preferred_carriers: Optional[PreferredCarriers] = field(
        default=None,
        metadata={
            "name": "PreferredCarriers",
            "type": "Element",
        }
    )
    permitted_cabins: Optional[PermittedCabins] = field(
        default=None,
        metadata={
            "name": "PermittedCabins",
            "type": "Element",
        }
    )
    preferred_cabins: Optional[PreferredCabins] = field(
        default=None,
        metadata={
            "name": "PreferredCabins",
            "type": "Element",
        }
    )
    preferred_alliances: Optional["AirSearchModifiers.PreferredAlliances"] = field(
        default=None,
        metadata={
            "name": "PreferredAlliances",
            "type": "Element",
        }
    )
    disfavored_alliances: Optional["AirSearchModifiers.DisfavoredAlliances"] = field(
        default=None,
        metadata={
            "name": "DisfavoredAlliances",
            "type": "Element",
        }
    )
    permitted_booking_codes: Optional["AirSearchModifiers.PermittedBookingCodes"] = field(
        default=None,
        metadata={
            "name": "PermittedBookingCodes",
            "type": "Element",
        }
    )
    preferred_booking_codes: Optional[PreferredBookingCodes] = field(
        default=None,
        metadata={
            "name": "PreferredBookingCodes",
            "type": "Element",
        }
    )
    prohibited_booking_codes: Optional["AirSearchModifiers.ProhibitedBookingCodes"] = field(
        default=None,
        metadata={
            "name": "ProhibitedBookingCodes",
            "type": "Element",
        }
    )
    flight_type: Optional[FlightType] = field(
        default=None,
        metadata={
            "name": "FlightType",
            "type": "Element",
        }
    )
    max_layover_duration: Optional[MaxLayoverDurationType] = field(
        default=None,
        metadata={
            "name": "MaxLayoverDuration",
            "type": "Element",
        }
    )
    native_search_modifier: Optional[TypeNativeSearchModifier] = field(
        default=None,
        metadata={
            "name": "NativeSearchModifier",
            "type": "Element",
        }
    )
    distance_type: TypeDistance = field(
        default=TypeDistance.MI,
        metadata={
            "name": "DistanceType",
            "type": "Attribute",
        }
    )
    include_flight_details: bool = field(
        default=True,
        metadata={
            "name": "IncludeFlightDetails",
            "type": "Attribute",
        }
    )
    allow_change_of_airport: bool = field(
        default=True,
        metadata={
            "name": "AllowChangeOfAirport",
            "type": "Attribute",
        }
    )
    prohibit_overnight_layovers: bool = field(
        default=False,
        metadata={
            "name": "ProhibitOvernightLayovers",
            "type": "Attribute",
        }
    )
    max_solutions: Optional[int] = field(
        default=None,
        metadata={
            "name": "MaxSolutions",
            "type": "Attribute",
        }
    )
    max_connection_time: Optional[int] = field(
        default=None,
        metadata={
            "name": "MaxConnectionTime",
            "type": "Attribute",
        }
    )
    search_weekends: Optional[bool] = field(
        default=None,
        metadata={
            "name": "SearchWeekends",
            "type": "Attribute",
        }
    )
    include_extra_solutions: Optional[bool] = field(
        default=None,
        metadata={
            "name": "IncludeExtraSolutions",
            "type": "Attribute",
        }
    )
    prohibit_multi_airport_connection: Optional[bool] = field(
        default=None,
        metadata={
            "name": "ProhibitMultiAirportConnection",
            "type": "Attribute",
        }
    )
    prefer_non_stop: bool = field(
        default=False,
        metadata={
            "name": "PreferNonStop",
            "type": "Attribute",
        }
    )
    order_by: Optional[AirSearchModifiersOrderBy] = field(
        default=None,
        metadata={
            "name": "OrderBy",
            "type": "Attribute",
        }
    )
    exclude_open_jaw_airport: bool = field(
        default=False,
        metadata={
            "name": "ExcludeOpenJawAirport",
            "type": "Attribute",
        }
    )
    exclude_ground_transportation: bool = field(
        default=False,
        metadata={
            "name": "ExcludeGroundTransportation",
            "type": "Attribute",
        }
    )
    max_journey_time: Optional[int] = field(
        default=None,
        metadata={
            "name": "MaxJourneyTime",
            "type": "Attribute",
            "min_inclusive": 0,
            "max_inclusive": 99,
        }
    )
    jet_service_only: Optional[bool] = field(
        default=None,
        metadata={
            "name": "JetServiceOnly",
            "type": "Attribute",
        }
    )

    @dataclass
    class DisfavoredProviders:
        provider: List[Provider] = field(
            default_factory=list,
            metadata={
                "name": "Provider",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/common_v52_0",
                "min_occurs": 1,
                "max_occurs": 999,
            }
        )

    @dataclass
    class PreferredProviders:
        provider: List[Provider] = field(
            default_factory=list,
            metadata={
                "name": "Provider",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/common_v52_0",
                "min_occurs": 1,
                "max_occurs": 999,
            }
        )

    @dataclass
    class DisfavoredCarriers:
        carrier: List[Carrier] = field(
            default_factory=list,
            metadata={
                "name": "Carrier",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/common_v52_0",
                "min_occurs": 1,
                "max_occurs": 999,
            }
        )

    @dataclass
    class PreferredAlliances:
        alliance: List[Alliance] = field(
            default_factory=list,
            metadata={
                "name": "Alliance",
                "type": "Element",
                "min_occurs": 1,
                "max_occurs": 999,
            }
        )

    @dataclass
    class DisfavoredAlliances:
        alliance: List[Alliance] = field(
            default_factory=list,
            metadata={
                "name": "Alliance",
                "type": "Element",
                "min_occurs": 1,
                "max_occurs": 999,
            }
        )

    @dataclass
    class PermittedBookingCodes:
        booking_code: List[BookingCode] = field(
            default_factory=list,
            metadata={
                "name": "BookingCode",
                "type": "Element",
                "min_occurs": 1,
                "max_occurs": 999,
            }
        )

    @dataclass
    class ProhibitedBookingCodes:
        booking_code: List[BookingCode] = field(
            default_factory=list,
            metadata={
                "name": "BookingCode",
                "type": "Element",
                "min_occurs": 1,
                "max_occurs": 999,
            }
        )


@dataclass
class AlternateLocationDistanceList:
    """
    Provides the Distance Information between Original Search Airports or City to
    Alternate Search Airports.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    alternate_location_distance: List[AlternateLocationDistance] = field(
        default_factory=list,
        metadata={
            "name": "AlternateLocationDistance",
            "type": "Element",
            "min_occurs": 1,
            "max_occurs": 999,
        }
    )


@dataclass
class AlternateRoute:
    """
    Information about this Alternate Route component.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    leg: List[Leg] = field(
        default_factory=list,
        metadata={
            "name": "Leg",
            "type": "Element",
            "min_occurs": 1,
            "max_occurs": 999,
        }
    )
    key: Optional[str] = field(
        default=None,
        metadata={
            "name": "Key",
            "type": "Attribute",
            "required": True,
        }
    )


@dataclass
class AuditData:
    """
    Container for Pricing Audit Data.For providers 1P.

    :ivar tax_info:
    :ivar key:
    :ivar total_price: The total price for this entity including base
        price and all taxes.
    :ivar base_price: Represents the base price for this entity. This
        does not include any taxes or surcharges.
    :ivar approximate_total_price: The Converted total price in Default
        Currency for this entity including base price and all taxes.
    :ivar approximate_base_price: The Converted base price in Default
        Currency for this entity. This does not include any taxes or
        surcharges.
    :ivar equivalent_base_price: Represents the base price in the
        related currency for this entity. This does not include any
        taxes or surcharges.
    :ivar taxes: The aggregated amount of all the taxes that are
        associated with this entity. See the associated TaxInfo array
        for a breakdown of the individual taxes.
    :ivar fees: The aggregated amount of all the fees that are
        associated with this entity. See the associated FeeInfo array
        for a breakdown of the individual fees.
    :ivar services: The total cost for all optional services.
    :ivar approximate_taxes: The Converted tax amount in Default
        Currency.
    :ivar approximate_fees: The Converted fee amount in Default
        Currency.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    tax_info: List[TaxInfo] = field(
        default_factory=list,
        metadata={
            "name": "TaxInfo",
            "type": "Element",
            "max_occurs": 999,
        }
    )
    key: Optional[str] = field(
        default=None,
        metadata={
            "name": "Key",
            "type": "Attribute",
        }
    )
    total_price: Optional[str] = field(
        default=None,
        metadata={
            "name": "TotalPrice",
            "type": "Attribute",
        }
    )
    base_price: Optional[str] = field(
        default=None,
        metadata={
            "name": "BasePrice",
            "type": "Attribute",
        }
    )
    approximate_total_price: Optional[str] = field(
        default=None,
        metadata={
            "name": "ApproximateTotalPrice",
            "type": "Attribute",
        }
    )
    approximate_base_price: Optional[str] = field(
        default=None,
        metadata={
            "name": "ApproximateBasePrice",
            "type": "Attribute",
        }
    )
    equivalent_base_price: Optional[str] = field(
        default=None,
        metadata={
            "name": "EquivalentBasePrice",
            "type": "Attribute",
        }
    )
    taxes: Optional[str] = field(
        default=None,
        metadata={
            "name": "Taxes",
            "type": "Attribute",
        }
    )
    fees: Optional[str] = field(
        default=None,
        metadata={
            "name": "Fees",
            "type": "Attribute",
        }
    )
    services: Optional[str] = field(
        default=None,
        metadata={
            "name": "Services",
            "type": "Attribute",
        }
    )
    approximate_taxes: Optional[str] = field(
        default=None,
        metadata={
            "name": "ApproximateTaxes",
            "type": "Attribute",
        }
    )
    approximate_fees: Optional[str] = field(
        default=None,
        metadata={
            "name": "ApproximateFees",
            "type": "Attribute",
        }
    )


@dataclass
class BaggageAllowance:
    """
    Free Baggage Allowance.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    number_of_pieces: Optional[int] = field(
        default=None,
        metadata={
            "name": "NumberOfPieces",
            "type": "Element",
        }
    )
    max_weight: Optional[TypeWeight] = field(
        default=None,
        metadata={
            "name": "MaxWeight",
            "type": "Element",
        }
    )


@dataclass
class BaggageRestriction:
    """
    Information related to  Baggage restriction rules .
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    dimension: List[Dimension] = field(
        default_factory=list,
        metadata={
            "name": "Dimension",
            "type": "Element",
            "max_occurs": 999,
        }
    )
    max_weight: List[TypeUnitOfMeasure] = field(
        default_factory=list,
        metadata={
            "name": "MaxWeight",
            "type": "Element",
            "max_occurs": 999,
        }
    )
    text_info: List[TextInfo] = field(
        default_factory=list,
        metadata={
            "name": "TextInfo",
            "type": "Element",
            "max_occurs": 999,
        }
    )


@dataclass
class BookingRules:
    """
    Rules related to pre pay booking.

    :ivar booking_rules_fare_reference:
    :ivar rule_info: Pre pay booking rule information
    :ivar restriction: Booking restrictions for associated pre pay
        account
    :ivar document_required: Detail about required documents for this
        pre pay id
    :ivar gender_dob_required: Vendor populates if gender/DOB data is
        required in book.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    booking_rules_fare_reference: List[BookingRulesFareReference] = field(
        default_factory=list,
        metadata={
            "name": "BookingRulesFareReference",
            "type": "Element",
            "max_occurs": 999,
        }
    )
    rule_info: List["BookingRules.RuleInfo"] = field(
        default_factory=list,
        metadata={
            "name": "RuleInfo",
            "type": "Element",
            "max_occurs": 999,
        }
    )
    restriction: List[Restriction] = field(
        default_factory=list,
        metadata={
            "name": "Restriction",
            "type": "Element",
            "max_occurs": 999,
        }
    )
    document_required: List[DocumentRequired] = field(
        default_factory=list,
        metadata={
            "name": "DocumentRequired",
            "type": "Element",
            "max_occurs": 999,
        }
    )
    gender_dob_required: Optional[bool] = field(
        default=None,
        metadata={
            "name": "GenderDobRequired",
            "type": "Attribute",
        }
    )

    @dataclass
    class RuleInfo:
        charges_rules: Optional[ChargesRules] = field(
            default=None,
            metadata={
                "name": "ChargesRules",
                "type": "Element",
            }
        )


@dataclass
class BrandingInfo:
    """Branding information for the Ancillary Service.

    Returned in Seat Map only.  Providers: 1G, 1V, 1P, ACH

    :ivar price_range: The price range of the Ancillary Service.
        Providers: 1G, 1V, 1P, ACH
    :ivar text:
    :ivar title: The additional titles associated to the brand or
        optional service. Providers: ACH, 1G, 1V, 1P
    :ivar image_location:
    :ivar service_group:
    :ivar air_segment_ref: Specifies the AirSegment the branding
        information is for. Providers: ACH, 1G, 1V, 1P
    :ivar key:
    :ivar service_sub_code: The Service Sub Code of the Ancillary
        Service.  Providers: 1G, 1V, 1P, ACH
    :ivar external_service_name: The external name of the Ancillary
        Service.  Providers: 1G, 1V, 1P, ACH
    :ivar service_type: The type of Ancillary Service.  Providers: 1G,
        1V, 1P, ACH
    :ivar commercial_name: The commercial name of the Ancillary Service.
        Providers: 1G, 1V, 1P, ACH
    :ivar chargeable: Indicates if the optional service is not offered,
        is available for a charge, or is included in the brand.
        Providers: 1G, 1V, 1P, ACH
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    price_range: List[PriceRange] = field(
        default_factory=list,
        metadata={
            "name": "PriceRange",
            "type": "Element",
            "max_occurs": 5,
        }
    )
    text: List[Text] = field(
        default_factory=list,
        metadata={
            "name": "Text",
            "type": "Element",
            "max_occurs": 99,
        }
    )
    title: List[Title] = field(
        default_factory=list,
        metadata={
            "name": "Title",
            "type": "Element",
            "max_occurs": 2,
        }
    )
    image_location: List[ImageLocation] = field(
        default_factory=list,
        metadata={
            "name": "ImageLocation",
            "type": "Element",
            "max_occurs": 3,
        }
    )
    service_group: Optional[ServiceGroup] = field(
        default=None,
        metadata={
            "name": "ServiceGroup",
            "type": "Element",
        }
    )
    air_segment_ref: List[CommonTypeSegmentRef] = field(
        default_factory=list,
        metadata={
            "name": "AirSegmentRef",
            "type": "Element",
            "min_occurs": 1,
            "max_occurs": 99,
        }
    )
    key: Optional[str] = field(
        default=None,
        metadata={
            "name": "Key",
            "type": "Attribute",
        }
    )
    service_sub_code: Optional[str] = field(
        default=None,
        metadata={
            "name": "ServiceSubCode",
            "type": "Attribute",
        }
    )
    external_service_name: Optional[str] = field(
        default=None,
        metadata={
            "name": "ExternalServiceName",
            "type": "Attribute",
        }
    )
    service_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "ServiceType",
            "type": "Attribute",
        }
    )
    commercial_name: Optional[str] = field(
        default=None,
        metadata={
            "name": "CommercialName",
            "type": "Attribute",
            "required": True,
        }
    )
    chargeable: Optional[str] = field(
        default=None,
        metadata={
            "name": "Chargeable",
            "type": "Attribute",
        }
    )


@dataclass
class BundledServices:
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    bundled_service: List[BundledService] = field(
        default_factory=list,
        metadata={
            "name": "BundledService",
            "type": "Element",
            "max_occurs": 16,
        }
    )


@dataclass
class Connection:
    """
    Flight Connection Information.

    :ivar fare_note:
    :ivar change_of_plane: Indicates the traveler must change planes
        between flights.
    :ivar change_of_terminal: Indicates the traveler must change
        terminals between flights.
    :ivar change_of_airport: Indicates the traveler must change airports
        between flights.
    :ivar stop_over: Indicates that there is a significant delay between
        flights (usually 12 hours or more)
    :ivar min_connection_time: The minimum time needed to connect
        between the two different destinations.
    :ivar duration: The actual duration (in minutes) between flights.
    :ivar segment_index: The sequential AirSegment number that this
        connection information applies to.
    :ivar flight_details_index: The sequential FlightDetails number that
        this connection information applies to.
    :ivar include_stop_over_to_fare_quote: The field determines to quote
        fares with or without stop overs,the values can be
        NoStopOver,StopOver and IgnoreSegment.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    fare_note: Optional[FareNote] = field(
        default=None,
        metadata={
            "name": "FareNote",
            "type": "Element",
        }
    )
    change_of_plane: bool = field(
        default=False,
        metadata={
            "name": "ChangeOfPlane",
            "type": "Attribute",
        }
    )
    change_of_terminal: bool = field(
        default=False,
        metadata={
            "name": "ChangeOfTerminal",
            "type": "Attribute",
        }
    )
    change_of_airport: bool = field(
        default=False,
        metadata={
            "name": "ChangeOfAirport",
            "type": "Attribute",
        }
    )
    stop_over: bool = field(
        default=False,
        metadata={
            "name": "StopOver",
            "type": "Attribute",
        }
    )
    min_connection_time: Optional[int] = field(
        default=None,
        metadata={
            "name": "MinConnectionTime",
            "type": "Attribute",
        }
    )
    duration: Optional[int] = field(
        default=None,
        metadata={
            "name": "Duration",
            "type": "Attribute",
        }
    )
    segment_index: Optional[int] = field(
        default=None,
        metadata={
            "name": "SegmentIndex",
            "type": "Attribute",
        }
    )
    flight_details_index: Optional[int] = field(
        default=None,
        metadata={
            "name": "FlightDetailsIndex",
            "type": "Attribute",
        }
    )
    include_stop_over_to_fare_quote: Optional[TypeIgnoreStopOver] = field(
        default=None,
        metadata={
            "name": "IncludeStopOverToFareQuote",
            "type": "Attribute",
        }
    )


@dataclass
class DetailedBillingInformation:
    """
    Container to send Detailed Billing Information for ticketing.

    :ivar form_of_payment_ref:
    :ivar air_pricing_info_ref: Returns related air pricing infos.
    :ivar billing_detail_item:
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    form_of_payment_ref: Optional[FormOfPaymentRef] = field(
        default=None,
        metadata={
            "name": "FormOfPaymentRef",
            "type": "Element",
            "namespace": "http://www.travelport.com/schema/common_v52_0",
        }
    )
    air_pricing_info_ref: List[AirPricingInfoRef] = field(
        default_factory=list,
        metadata={
            "name": "AirPricingInfoRef",
            "type": "Element",
            "min_occurs": 1,
            "max_occurs": 999,
        }
    )
    billing_detail_item: List[BillingDetailItem] = field(
        default_factory=list,
        metadata={
            "name": "BillingDetailItem",
            "type": "Element",
            "min_occurs": 1,
            "max_occurs": 999,
        }
    )


@dataclass
class DocumentSelect:
    """
    Allows an agency to select the documents to produce for the itinerary.

    :ivar back_office_hand_off:
    :ivar itinerary:
    :ivar issue_ticket_only: Set to true to alter system default of
        itinerary,ticket and back office.
    :ivar issue_electronic_ticket: Set to true for electronic tickets.
    :ivar fax_indicator: Set to true for providing fax details.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    back_office_hand_off: Optional[BackOfficeHandOff] = field(
        default=None,
        metadata={
            "name": "BackOfficeHandOff",
            "type": "Element",
        }
    )
    itinerary: Optional[Itinerary] = field(
        default=None,
        metadata={
            "name": "Itinerary",
            "type": "Element",
        }
    )
    issue_ticket_only: Optional[bool] = field(
        default=None,
        metadata={
            "name": "IssueTicketOnly",
            "type": "Attribute",
        }
    )
    issue_electronic_ticket: Optional[bool] = field(
        default=None,
        metadata={
            "name": "IssueElectronicTicket",
            "type": "Attribute",
        }
    )
    fax_indicator: Optional[bool] = field(
        default=None,
        metadata={
            "name": "FaxIndicator",
            "type": "Attribute",
        }
    )


@dataclass
class EmdpricingInfo:
    """Fare related information for these electronic miscellaneous documents.

    Supported providers are 1G/1V/1P
    """
    class Meta:
        name = "EMDPricingInfo"
        namespace = "http://www.travelport.com/schema/air_v52_0"

    tax_info: List[TaxInfo] = field(
        default_factory=list,
        metadata={
            "name": "TaxInfo",
            "type": "Element",
            "max_occurs": 999,
        }
    )
    base_fare: Optional[str] = field(
        default=None,
        metadata={
            "name": "BaseFare",
            "type": "Attribute",
        }
    )
    total_fare: Optional[str] = field(
        default=None,
        metadata={
            "name": "TotalFare",
            "type": "Attribute",
        }
    )
    total_tax: Optional[str] = field(
        default=None,
        metadata={
            "name": "TotalTax",
            "type": "Attribute",
        }
    )
    equiv_fare: Optional[str] = field(
        default=None,
        metadata={
            "name": "EquivFare",
            "type": "Attribute",
        }
    )


@dataclass
class Emdsummary:
    """EMD summary information.

    Supported providers are 1G/1V/1P

    :ivar emdcoupon: The coupon information for the EMD issued.
    :ivar number: EMD Number
    :ivar primary_document_indicator: Indicates whether the EMD is a
        primary EMD.
    :ivar in_conjunction_with: Returns the number of the Primary EMD, if
        this EMD is a conjunctive EMD
    :ivar associated_ticket_number: This number indicates the e-Ticket
        number associated with this EMD
    :ivar plating_carrier: Plating carrier code for which this EMD is
        issued
    :ivar issue_date: Issue Date for this EMD
    :ivar key: System generated Key
    :ivar el_stat: This attribute is used to show the action results of
        an element. Possible values are "A" (when elements have been
        added to the UR) and "M" (when existing elements have been
        modified). Response only.
    :ivar key_override: If a duplicate key is found where we are adding
        elements in some cases like URAdd, then instead of erroring out
        set this attribute to true.
    """
    class Meta:
        name = "EMDSummary"
        namespace = "http://www.travelport.com/schema/air_v52_0"

    emdcoupon: List[Emdcoupon] = field(
        default_factory=list,
        metadata={
            "name": "EMDCoupon",
            "type": "Element",
            "max_occurs": 999,
        }
    )
    number: Optional[str] = field(
        default=None,
        metadata={
            "name": "Number",
            "type": "Attribute",
            "required": True,
            "length": 13,
        }
    )
    primary_document_indicator: Optional[bool] = field(
        default=None,
        metadata={
            "name": "PrimaryDocumentIndicator",
            "type": "Attribute",
        }
    )
    in_conjunction_with: Optional[str] = field(
        default=None,
        metadata={
            "name": "InConjunctionWith",
            "type": "Attribute",
            "length": 13,
        }
    )
    associated_ticket_number: Optional[str] = field(
        default=None,
        metadata={
            "name": "AssociatedTicketNumber",
            "type": "Attribute",
            "length": 13,
        }
    )
    plating_carrier: Optional[str] = field(
        default=None,
        metadata={
            "name": "PlatingCarrier",
            "type": "Attribute",
            "length": 2,
        }
    )
    issue_date: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "IssueDate",
            "type": "Attribute",
        }
    )
    key: Optional[str] = field(
        default=None,
        metadata={
            "name": "Key",
            "type": "Attribute",
        }
    )
    el_stat: Optional[TypeElementStatus] = field(
        default=None,
        metadata={
            "name": "ElStat",
            "type": "Attribute",
        }
    )
    key_override: Optional[bool] = field(
        default=None,
        metadata={
            "name": "KeyOverride",
            "type": "Attribute",
        }
    )


@dataclass
class ElectronicMiscDocument:
    """Electronic miscellaneous document.

    Supported providers are 1G/1V/1P

    :ivar emdcoupon: The coupon information for the EMD issued.
    :ivar number: EMD Number
    :ivar primary_document_indicator: Indicates whether the EMD is a
        primary EMD.
    :ivar in_conjunction_with: Returns the number of the Primary EMD, if
        this EMD is a conjunctive EMD
    :ivar associated_ticket_number: This number indicates the e-Ticket
        number associated with this EMD
    :ivar plating_carrier: Plating carrier code for which this EMD is
        issued
    :ivar issue_date: Issue Date for this EMD
    :ivar status: Status of the EMD calculated on the basis of coupon
        status. Possible values Open, Void, Refunded, Exchanged,
        Irregular Operations,Airport Control, Checked In, Flown/Used,
        Boarded/Lifted, Suspended, Unknown
    :ivar key: System generated Key
    :ivar el_stat: This attribute is used to show the action results of
        an element. Possible values are "A" (when elements have been
        added to the UR) and "M" (when existing elements have been
        modified). Response only.
    :ivar key_override: If a duplicate key is found where we are adding
        elements in some cases like URAdd, then instead of erroring out
        set this attribute to true.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    emdcoupon: List[Emdcoupon] = field(
        default_factory=list,
        metadata={
            "name": "EMDCoupon",
            "type": "Element",
            "min_occurs": 1,
            "max_occurs": 999,
        }
    )
    number: Optional[str] = field(
        default=None,
        metadata={
            "name": "Number",
            "type": "Attribute",
            "required": True,
            "length": 13,
        }
    )
    primary_document_indicator: Optional[bool] = field(
        default=None,
        metadata={
            "name": "PrimaryDocumentIndicator",
            "type": "Attribute",
        }
    )
    in_conjunction_with: Optional[str] = field(
        default=None,
        metadata={
            "name": "InConjunctionWith",
            "type": "Attribute",
            "length": 13,
        }
    )
    associated_ticket_number: Optional[str] = field(
        default=None,
        metadata={
            "name": "AssociatedTicketNumber",
            "type": "Attribute",
            "length": 13,
        }
    )
    plating_carrier: Optional[str] = field(
        default=None,
        metadata={
            "name": "PlatingCarrier",
            "type": "Attribute",
            "length": 2,
        }
    )
    issue_date: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "IssueDate",
            "type": "Attribute",
        }
    )
    status: Optional[str] = field(
        default=None,
        metadata={
            "name": "Status",
            "type": "Attribute",
        }
    )
    key: Optional[str] = field(
        default=None,
        metadata={
            "name": "Key",
            "type": "Attribute",
        }
    )
    el_stat: Optional[TypeElementStatus] = field(
        default=None,
        metadata={
            "name": "ElStat",
            "type": "Attribute",
        }
    )
    key_override: Optional[bool] = field(
        default=None,
        metadata={
            "name": "KeyOverride",
            "type": "Attribute",
        }
    )


@dataclass
class EmbargoInfo(BaseBaggageAllowanceInfo):
    """
    Information related to Embargo.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"


@dataclass
class Enumeration:
    """
    Provides the capability to group the results into differnt trip type and
    diversification strategies.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    solution_group: List[SolutionGroup] = field(
        default_factory=list,
        metadata={
            "name": "SolutionGroup",
            "type": "Element",
            "min_occurs": 1,
            "max_occurs": 999,
        }
    )


@dataclass
class ExchangeEligibilityInfo:
    """
    :ivar exchange_penalty_info:
    :ivar eligible_fares: Identifies which fares are eligible for
        Exchange
    :ivar refundable_fares: Fares eligible for refund: All, Some, None
    :ivar passed_automation_checks: Indicates whether the itinerary
        passed initial validation for automated exchange
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    exchange_penalty_info: List[ExchangePenaltyInfo] = field(
        default_factory=list,
        metadata={
            "name": "ExchangePenaltyInfo",
            "type": "Element",
            "max_occurs": 999,
        }
    )
    eligible_fares: Optional[str] = field(
        default=None,
        metadata={
            "name": "EligibleFares",
            "type": "Attribute",
        }
    )
    refundable_fares: Optional[str] = field(
        default=None,
        metadata={
            "name": "RefundableFares",
            "type": "Attribute",
        }
    )
    passed_automation_checks: Optional[bool] = field(
        default=None,
        metadata={
            "name": "PassedAutomationChecks",
            "type": "Attribute",
        }
    )


@dataclass
class ExpertSolution:
    """
    Information about Expert Solution Route component retrieved from Knowledge
    Base.

    :ivar leg_price:
    :ivar key:
    :ivar total_price: The Total Price for the Solution.
    :ivar approximate_total_price: The Converted Total Price in Agency's
        Default Currency Value
    :ivar created_date: The Date on which this solution was created
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    leg_price: List[LegPrice] = field(
        default_factory=list,
        metadata={
            "name": "LegPrice",
            "type": "Element",
            "min_occurs": 1,
            "max_occurs": 999,
        }
    )
    key: Optional[str] = field(
        default=None,
        metadata={
            "name": "Key",
            "type": "Attribute",
            "required": True,
        }
    )
    total_price: Optional[str] = field(
        default=None,
        metadata={
            "name": "TotalPrice",
            "type": "Attribute",
        }
    )
    approximate_total_price: Optional[str] = field(
        default=None,
        metadata={
            "name": "ApproximateTotalPrice",
            "type": "Attribute",
        }
    )
    created_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "CreatedDate",
            "type": "Attribute",
            "required": True,
        }
    )


@dataclass
class Facility:
    """
    The facility definition for a part of a row or a seat map.

    :ivar characteristic:
    :ivar remark:
    :ivar passenger_seat_price:
    :ivar tax_info: Tax information related to seat price. This is
        presently populated for MCH and ACH content. Applicable
        providers are MCH/ACH
    :ivar emd:
    :ivar service_data:
    :ivar tour_code:
    :ivar type_value: The type of facility
    :ivar seat_code: If a seat type, the seat identifier
    :ivar availability: If a seat type, the availability of the seat
    :ivar seat_price: The price of the seat, if applicable.
    :ivar paid: Set to True if either SeatPrice or GroupSeatPrice are
        returned.
    :ivar service_sub_code: The service subcode associated with the
        Facility
    :ivar ssrcode: The SSR Code associated with the Facility
    :ivar issuance_reason: A one-letter RFIC value filed by the airline
        in each Optional Service will be mapped to this attribute. RFIC
        is IATA Reason for Issuance Code. Possible codes are A (Air
        transportation),B (Surface Transportation),C(Bagage),
        D(Financial Impact),E(Airport
        Services),F(Merchandise),G(Inflight Services),I (Individual
        Airline use).
    :ivar base_seat_price: Price of the seats excluding Taxes.
    :ivar taxes: Tax amount for the seat price.
    :ivar quantity: The number of units availed for each optional
        service (e.g. 2 baggage availed will be specified as 2 in
        quantity for optional service BAGGAGE)
    :ivar sequence_number: The sequence number associated with the
        OptionalService
    :ivar inclusive_of_tax: Identifies if the service was filed with a
        fee that is inclusive of tax.
    :ivar interline_settlement_allowed: Identifies if the interline
        settlement is allowed in service .
    :ivar geography_specification: Sector, Portion, Journey.
    :ivar source: The Source of the optional service. The source can be
        ACH, MCE, or MCH.
    :ivar optional_service_ref: References the OptionalService for the
        Row/Facility. Providers: ACH, 1G, 1V, 1P
    :ivar seat_information_ref: Specifies the seat information for the
        seat. Providers: ACH, 1G, 1V, 1P
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    characteristic: List[Characteristic] = field(
        default_factory=list,
        metadata={
            "name": "Characteristic",
            "type": "Element",
            "max_occurs": 999,
        }
    )
    remark: List[Remark] = field(
        default_factory=list,
        metadata={
            "name": "Remark",
            "type": "Element",
            "namespace": "http://www.travelport.com/schema/common_v52_0",
            "max_occurs": 999,
        }
    )
    passenger_seat_price: List[PassengerSeatPrice] = field(
        default_factory=list,
        metadata={
            "name": "PassengerSeatPrice",
            "type": "Element",
            "max_occurs": 999,
        }
    )
    tax_info: List[TaxInfo] = field(
        default_factory=list,
        metadata={
            "name": "TaxInfo",
            "type": "Element",
            "max_occurs": 999,
        }
    )
    emd: Optional[Emd] = field(
        default=None,
        metadata={
            "name": "EMD",
            "type": "Element",
        }
    )
    service_data: List[ServiceData] = field(
        default_factory=list,
        metadata={
            "name": "ServiceData",
            "type": "Element",
            "namespace": "http://www.travelport.com/schema/common_v52_0",
            "max_occurs": 999,
        }
    )
    tour_code: Optional[TourCode] = field(
        default=None,
        metadata={
            "name": "TourCode",
            "type": "Element",
        }
    )
    type_value: Optional[TypeFacility] = field(
        default=None,
        metadata={
            "name": "Type",
            "type": "Attribute",
            "required": True,
        }
    )
    seat_code: Optional[str] = field(
        default=None,
        metadata={
            "name": "SeatCode",
            "type": "Attribute",
        }
    )
    availability: Optional[TypeSeatAvailability] = field(
        default=None,
        metadata={
            "name": "Availability",
            "type": "Attribute",
        }
    )
    seat_price: Optional[str] = field(
        default=None,
        metadata={
            "name": "SeatPrice",
            "type": "Attribute",
        }
    )
    paid: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Paid",
            "type": "Attribute",
        }
    )
    service_sub_code: Optional[str] = field(
        default=None,
        metadata={
            "name": "ServiceSubCode",
            "type": "Attribute",
            "max_length": 3,
        }
    )
    ssrcode: Optional[str] = field(
        default=None,
        metadata={
            "name": "SSRCode",
            "type": "Attribute",
            "min_length": 4,
            "max_length": 4,
        }
    )
    issuance_reason: Optional[str] = field(
        default=None,
        metadata={
            "name": "IssuanceReason",
            "type": "Attribute",
            "min_length": 1,
            "max_length": 1,
        }
    )
    base_seat_price: Optional[str] = field(
        default=None,
        metadata={
            "name": "BaseSeatPrice",
            "type": "Attribute",
        }
    )
    taxes: Optional[str] = field(
        default=None,
        metadata={
            "name": "Taxes",
            "type": "Attribute",
        }
    )
    quantity: Optional[int] = field(
        default=None,
        metadata={
            "name": "Quantity",
            "type": "Attribute",
        }
    )
    sequence_number: Optional[int] = field(
        default=None,
        metadata={
            "name": "SequenceNumber",
            "type": "Attribute",
        }
    )
    inclusive_of_tax: Optional[bool] = field(
        default=None,
        metadata={
            "name": "InclusiveOfTax",
            "type": "Attribute",
        }
    )
    interline_settlement_allowed: Optional[bool] = field(
        default=None,
        metadata={
            "name": "InterlineSettlementAllowed",
            "type": "Attribute",
        }
    )
    geography_specification: Optional[str] = field(
        default=None,
        metadata={
            "name": "GeographySpecification",
            "type": "Attribute",
        }
    )
    source: Optional[str] = field(
        default=None,
        metadata={
            "name": "Source",
            "type": "Attribute",
        }
    )
    optional_service_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "OptionalServiceRef",
            "type": "Attribute",
        }
    )
    seat_information_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "SeatInformationRef",
            "type": "Attribute",
        }
    )


@dataclass
class FareNoteList:
    """
    The shared object list of Notes.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    fare_note: List[FareNote] = field(
        default_factory=list,
        metadata={
            "name": "FareNote",
            "type": "Element",
            "max_occurs": 999,
        }
    )


@dataclass
class FareRemarkList:
    """
    The shared object list of FareInfos.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    fare_remark: List[FareRemark] = field(
        default_factory=list,
        metadata={
            "name": "FareRemark",
            "type": "Element",
            "min_occurs": 1,
            "max_occurs": 999,
        }
    )


@dataclass
class FareRestriction:
    """
    Fare Restriction.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    fare_restriction_days_of_week: List[FareRestrictionDaysOfWeek] = field(
        default_factory=list,
        metadata={
            "name": "FareRestrictionDaysOfWeek",
            "type": "Element",
            "max_occurs": 3,
        }
    )
    fare_restriction_date: List[FareRestrictionDate] = field(
        default_factory=list,
        metadata={
            "name": "FareRestrictionDate",
            "type": "Element",
            "max_occurs": 999,
        }
    )
    fare_restriction_sale_date: Optional[FareRestrictionSaleDate] = field(
        default=None,
        metadata={
            "name": "FareRestrictionSaleDate",
            "type": "Element",
        }
    )
    fare_restriction_seasonal: List[FareRestrictionSeasonal] = field(
        default_factory=list,
        metadata={
            "name": "FareRestrictionSeasonal",
            "type": "Element",
            "max_occurs": 999,
        }
    )
    fare_restrictiontype: Optional[TypeFareRestrictionType] = field(
        default=None,
        metadata={
            "name": "FareRestrictiontype",
            "type": "Attribute",
        }
    )


@dataclass
class FareRulesFilter:
    """Fare Rules Filter about this fare component.

    Applicable Providers are 1P,1G,1V.

    :ivar refundability: Refundability/Penalty Fare Rules about this
        fare component.
    :ivar latest_ticketing_time: For Future Use
    :ivar chg: For Penalties
    :ivar min: For Minimum Stay
    :ivar max: For Maximum Stay
    :ivar adv: For Advance Res/Tkt
    :ivar oth: Other
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    refundability: Optional["FareRulesFilter.Refundability"] = field(
        default=None,
        metadata={
            "name": "Refundability",
            "type": "Element",
        }
    )
    latest_ticketing_time: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "LatestTicketingTime",
            "type": "Element",
        }
    )
    chg: Optional[Chgtype] = field(
        default=None,
        metadata={
            "name": "CHG",
            "type": "Element",
        }
    )
    min: Optional[Mintype] = field(
        default=None,
        metadata={
            "name": "MIN",
            "type": "Element",
        }
    )
    max: Optional[Maxtype] = field(
        default=None,
        metadata={
            "name": "MAX",
            "type": "Element",
        }
    )
    adv: Optional[Advtype] = field(
        default=None,
        metadata={
            "name": "ADV",
            "type": "Element",
        }
    )
    oth: Optional[Othtype] = field(
        default=None,
        metadata={
            "name": "OTH",
            "type": "Element",
        }
    )

    @dataclass
    class Refundability:
        """
        :ivar value: Currently returned: FullyRefundable (1G,1V),
            RefundableWithPenalty (1G,1V), Refundable (1P),
            NonRefundable (1G,1V,1P).Refundable.
        """
        value: Optional[str] = field(
            default=None,
            metadata={
                "name": "Value",
                "type": "Attribute",
                "required": True,
            }
        )


@dataclass
class FaxDetails:
    """
    The Fax Details Information.

    :ivar phone_number: Send type as Fax for fax number.
    :ivar term_conditions: Term and Conditions for the fax .
    :ivar remark:
    :ivar include_cover_sheet: Specifies whether to include a cover page
        with fax or not.
    :ivar to: To address.
    :ivar from_value: From address.
    :ivar dept_billing_code: Department billing code.
    :ivar invoice_number: Invoice number.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    phone_number: Optional[PhoneNumber] = field(
        default=None,
        metadata={
            "name": "PhoneNumber",
            "type": "Element",
            "namespace": "http://www.travelport.com/schema/common_v52_0",
            "required": True,
        }
    )
    term_conditions: Optional[TermConditions] = field(
        default=None,
        metadata={
            "name": "TermConditions",
            "type": "Element",
        }
    )
    remark: List[Remark] = field(
        default_factory=list,
        metadata={
            "name": "Remark",
            "type": "Element",
            "namespace": "http://www.travelport.com/schema/common_v52_0",
            "max_occurs": 999,
        }
    )
    include_cover_sheet: Optional[bool] = field(
        default=None,
        metadata={
            "name": "IncludeCoverSheet",
            "type": "Attribute",
        }
    )
    to: Optional[str] = field(
        default=None,
        metadata={
            "name": "To",
            "type": "Attribute",
        }
    )
    from_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "From",
            "type": "Attribute",
        }
    )
    dept_billing_code: Optional[str] = field(
        default=None,
        metadata={
            "name": "DeptBillingCode",
            "type": "Attribute",
        }
    )
    invoice_number: Optional[str] = field(
        default=None,
        metadata={
            "name": "InvoiceNumber",
            "type": "Attribute",
        }
    )


@dataclass
class FlightInfoDetail:
    """
    :ivar codeshare_info:
    :ivar meals:
    :ivar in_flight_services:
    :ivar variance:
    :ivar origin: The IATA location code for this origination of this
        entity.
    :ivar destination: The IATA location code for this destination of
        this entity.
    :ivar scheduled_departure_time: The date and time at which this
        entity is scheduled to depart. This does not include time zone
        information since it can be derived from the origin location.
    :ivar scheduled_arrival_time: The date and time at which this entity
        is scheduled to arrive at the destination. This does not include
        time zone information since it can be derived from the origin
        location.
    :ivar travel_time: Total time spent (minutes) traveling including
        flight time and ground time.
    :ivar eticketability: Identifies if this particular segment is
        E-Ticketable
    :ivar equipment:
    :ivar origin_terminal:
    :ivar origin_gate: To be used to display origin flight gate number
    :ivar destination_terminal:
    :ivar destination_gate: To be used to display destination flight
        gate number
    :ivar automated_checkin: “True” indicates that the flight allows
        automated check-in. The default is “False”.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    codeshare_info: Optional[CodeshareInfo] = field(
        default=None,
        metadata={
            "name": "CodeshareInfo",
            "type": "Element",
        }
    )
    meals: List[TypeMealService] = field(
        default_factory=list,
        metadata={
            "name": "Meals",
            "type": "Element",
            "max_occurs": 999,
        }
    )
    in_flight_services: List[str] = field(
        default_factory=list,
        metadata={
            "name": "InFlightServices",
            "type": "Element",
            "max_occurs": 999,
        }
    )
    variance: List[Variance] = field(
        default_factory=list,
        metadata={
            "name": "Variance",
            "type": "Element",
            "max_occurs": 999,
        }
    )
    origin: Optional[str] = field(
        default=None,
        metadata={
            "name": "Origin",
            "type": "Attribute",
            "required": True,
            "length": 3,
            "white_space": "collapse",
        }
    )
    destination: Optional[str] = field(
        default=None,
        metadata={
            "name": "Destination",
            "type": "Attribute",
            "required": True,
            "length": 3,
            "white_space": "collapse",
        }
    )
    scheduled_departure_time: Optional[str] = field(
        default=None,
        metadata={
            "name": "ScheduledDepartureTime",
            "type": "Attribute",
        }
    )
    scheduled_arrival_time: Optional[str] = field(
        default=None,
        metadata={
            "name": "ScheduledArrivalTime",
            "type": "Attribute",
        }
    )
    travel_time: Optional[int] = field(
        default=None,
        metadata={
            "name": "TravelTime",
            "type": "Attribute",
        }
    )
    eticketability: Optional[TypeEticketability] = field(
        default=None,
        metadata={
            "name": "ETicketability",
            "type": "Attribute",
        }
    )
    equipment: Optional[str] = field(
        default=None,
        metadata={
            "name": "Equipment",
            "type": "Attribute",
            "length": 3,
        }
    )
    origin_terminal: Optional[str] = field(
        default=None,
        metadata={
            "name": "OriginTerminal",
            "type": "Attribute",
        }
    )
    origin_gate: Optional[str] = field(
        default=None,
        metadata={
            "name": "OriginGate",
            "type": "Attribute",
            "max_length": 6,
        }
    )
    destination_terminal: Optional[str] = field(
        default=None,
        metadata={
            "name": "DestinationTerminal",
            "type": "Attribute",
        }
    )
    destination_gate: Optional[str] = field(
        default=None,
        metadata={
            "name": "DestinationGate",
            "type": "Attribute",
            "max_length": 6,
        }
    )
    automated_checkin: bool = field(
        default=False,
        metadata={
            "name": "AutomatedCheckin",
            "type": "Attribute",
        }
    )


@dataclass
class FlightTimeTableCriteria:
    """
    Flight Time Table Search Criteria.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    general_time_table: Optional[GeneralTimeTable] = field(
        default=None,
        metadata={
            "name": "GeneralTimeTable",
            "type": "Element",
        }
    )
    specific_time_table: Optional[SpecificTimeTable] = field(
        default=None,
        metadata={
            "name": "SpecificTimeTable",
            "type": "Element",
        }
    )


@dataclass
class IssuanceModifiers:
    """
    General modifiers supported for EMD Issuance.Supported providers are 1V/1G/1P.

    :ivar form_of_payment_ref: Reference to FormOfPayment present in the
        UR to be used for EMD issuance.
    :ivar form_of_payment: FormOfPayment information to be used for EMD
        issuance.
    :ivar customer_receipt_info: Information about customer receipt via
        email.
    :ivar emdendorsement: Endorsement details to be used during EMD
        issuance.
    :ivar emdcommission: Commission information to be used for EMD
        issuance.
    :ivar plating_carrier: Plating carrier code for which this EMD is
        issued.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    form_of_payment_ref: Optional[FormOfPaymentRef] = field(
        default=None,
        metadata={
            "name": "FormOfPaymentRef",
            "type": "Element",
            "namespace": "http://www.travelport.com/schema/common_v52_0",
        }
    )
    form_of_payment: Optional[FormOfPayment] = field(
        default=None,
        metadata={
            "name": "FormOfPayment",
            "type": "Element",
            "namespace": "http://www.travelport.com/schema/common_v52_0",
        }
    )
    customer_receipt_info: Optional[CustomerReceiptInfo] = field(
        default=None,
        metadata={
            "name": "CustomerReceiptInfo",
            "type": "Element",
        }
    )
    emdendorsement: Optional[str] = field(
        default=None,
        metadata={
            "name": "EMDEndorsement",
            "type": "Element",
            "min_length": 1,
            "max_length": 255,
        }
    )
    emdcommission: Optional[Emdcommission] = field(
        default=None,
        metadata={
            "name": "EMDCommission",
            "type": "Element",
        }
    )
    plating_carrier: Optional[str] = field(
        default=None,
        metadata={
            "name": "PlatingCarrier",
            "type": "Attribute",
            "length": 2,
        }
    )


@dataclass
class PassengerType(TypePassengerType):
    """
    The passenger type details associated to a fare.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    fare_guarantee_info: Optional[FareGuaranteeInfo] = field(
        default=None,
        metadata={
            "name": "FareGuaranteeInfo",
            "type": "Element",
        }
    )


@dataclass
class PenaltyFareInformation:
    """
    :ivar penalty_info: Penalty Limit if requested.
    :ivar prohibit_penalty_fares: Indicates whether user wants penalty
        fares to be returned.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    penalty_info: Optional[TypeFarePenalty] = field(
        default=None,
        metadata={
            "name": "PenaltyInfo",
            "type": "Element",
        }
    )
    prohibit_penalty_fares: Optional[bool] = field(
        default=None,
        metadata={
            "name": "ProhibitPenaltyFares",
            "type": "Attribute",
            "required": True,
        }
    )


@dataclass
class PrePayCustomer:
    """
    Detailed customer information for searching pre pay profiles.

    :ivar person_name:
    :ivar email: Customer email detail
    :ivar address: Customer address detail
    :ivar related_traveler: Travelers related to this pre pay id
    :ivar loyalty_card: Customer loyalty card detail
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    person_name: Optional[PersonName] = field(
        default=None,
        metadata={
            "name": "PersonName",
            "type": "Element",
        }
    )
    email: List[Email] = field(
        default_factory=list,
        metadata={
            "name": "Email",
            "type": "Element",
            "namespace": "http://www.travelport.com/schema/common_v52_0",
            "max_occurs": 999,
        }
    )
    address: List[TypeStructuredAddress] = field(
        default_factory=list,
        metadata={
            "name": "Address",
            "type": "Element",
            "max_occurs": 999,
        }
    )
    related_traveler: List[RelatedTraveler] = field(
        default_factory=list,
        metadata={
            "name": "RelatedTraveler",
            "type": "Element",
            "max_occurs": 999,
        }
    )
    loyalty_card: List[LoyaltyCard] = field(
        default_factory=list,
        metadata={
            "name": "LoyaltyCard",
            "type": "Element",
            "namespace": "http://www.travelport.com/schema/common_v52_0",
            "max_occurs": 999,
        }
    )


@dataclass
class PrePayPriceInfo:
    """
    Pricing detail for the Pre Pay Account.

    :ivar tax_info: Detailed tax information for the pre pay account
    :ivar base_fare:
    :ivar total_fare:
    :ivar total_tax:
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    tax_info: List[TaxInfo] = field(
        default_factory=list,
        metadata={
            "name": "TaxInfo",
            "type": "Element",
            "max_occurs": 999,
        }
    )
    base_fare: Optional[str] = field(
        default=None,
        metadata={
            "name": "BaseFare",
            "type": "Attribute",
        }
    )
    total_fare: Optional[str] = field(
        default=None,
        metadata={
            "name": "TotalFare",
            "type": "Attribute",
        }
    )
    total_tax: Optional[str] = field(
        default=None,
        metadata={
            "name": "TotalTax",
            "type": "Attribute",
        }
    )


@dataclass
class RepricingModifiers:
    """Used for rapid reprice to provide additional options for the reprice.

    Providers: 1G/1V/1P/1S/1A

    :ivar private_fare_options: Public and/or Private Fares requested
        for pricing.            Currently supported: AccountCodeOnly,
        PrivateFaresOnly, PublicPrivateFaresOnly.
    :ivar fare_type:
    :ivar fare_ticket_designator:
    :ivar override_currency:
    :ivar air_segment_pricing_modifiers:
    :ivar withhold_tax_code: Used to request tax withholding for the tax
        code specified. Providers supported 1G/1P
    :ivar price_class_of_service: Values allowed are ClassBooked or
        LowestClass. This tells how to price the new itinerary.
    :ivar create_date: This is either today’s date or the date the
        repriced itinerary was created
    :ivar reissue_loc_city_code: This is the city code of the reissue
        location
    :ivar reissue_loc_country_code: This is the country code of the
        reissue location
    :ivar bulk_ticket: Set to true and the itinerary is/will be a bulk
        ticket. Set to false and the itinerary being repriced will not
        be a bulk ticket.
    :ivar account_code: May be used in conjunction with
        PrivateFareOptions
    :ivar penalty_as_tax_code: Used to request that the penalty be
        applied as a tax, to the tax code specified. Providers supported
        1G/1P
    :ivar air_pricing_solution_ref: A reference to a AirPricingSolution.
        Providers: 1G, 1V, 1P.
    :ivar penalty_to_fare: Will add the change fee/penalty amount to the
        total fare amount. Supported Providers: 1P
    :ivar price_ptconly: A value of true forces the price for the PTC
        even if that fare is not the lowest fare for the passenger.
    :ivar brand_details: Set to true full brand details will be
        returned.
    :ivar brand_modifier: A value of MaintainBrand will maintain the
        brand from the original ticket if applicable.
    :ivar jet_service_only: Request flights that are jet service only.
        Available in AirExchangeMultiQuoteReq only.
    :ivar time_window: A value of Time Window is optional. Available in
        AirExchangeMultiQuoteReq only.
    :ivar flight_type: Type of flights to be returned. Values are
        'NonStop', 'Direct', 'SingleConnection' and 'NoRestrictions'.
        Available in AirExchangeMultiQuoteReq only.
    :ivar multi_airport_search: A value of Multi Airport Search
        Indicator is optional. Available in AirExchangeMultiQuoteReq
        only.
    :ivar connection_point: A value of Connection City Code is optional.
        Available in AirExchangeMultiQuoteReq only.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    private_fare_options: Optional[str] = field(
        default=None,
        metadata={
            "name": "PrivateFareOptions",
            "type": "Element",
            "max_length": 50,
        }
    )
    fare_type: List[FareType] = field(
        default_factory=list,
        metadata={
            "name": "FareType",
            "type": "Element",
            "max_occurs": 100,
        }
    )
    fare_ticket_designator: Optional[FareTicketDesignator] = field(
        default=None,
        metadata={
            "name": "FareTicketDesignator",
            "type": "Element",
        }
    )
    override_currency: Optional["RepricingModifiers.OverrideCurrency"] = field(
        default=None,
        metadata={
            "name": "OverrideCurrency",
            "type": "Element",
        }
    )
    air_segment_pricing_modifiers: List[AirSegmentPricingModifiers] = field(
        default_factory=list,
        metadata={
            "name": "AirSegmentPricingModifiers",
            "type": "Element",
            "max_occurs": 999,
        }
    )
    withhold_tax_code: List[str] = field(
        default_factory=list,
        metadata={
            "name": "WithholdTaxCode",
            "type": "Element",
            "max_occurs": 4,
            "length": 2,
        }
    )
    price_class_of_service: Optional[TypePriceClassOfService] = field(
        default=None,
        metadata={
            "name": "PriceClassOfService",
            "type": "Attribute",
        }
    )
    create_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "CreateDate",
            "type": "Attribute",
        }
    )
    reissue_loc_city_code: Optional[str] = field(
        default=None,
        metadata={
            "name": "ReissueLocCityCode",
            "type": "Attribute",
            "length": 3,
        }
    )
    reissue_loc_country_code: Optional[str] = field(
        default=None,
        metadata={
            "name": "ReissueLocCountryCode",
            "type": "Attribute",
            "length": 2,
        }
    )
    bulk_ticket: bool = field(
        default=False,
        metadata={
            "name": "BulkTicket",
            "type": "Attribute",
        }
    )
    account_code: Optional[str] = field(
        default=None,
        metadata={
            "name": "AccountCode",
            "type": "Attribute",
        }
    )
    penalty_as_tax_code: Optional[str] = field(
        default=None,
        metadata={
            "name": "PenaltyAsTaxCode",
            "type": "Attribute",
            "length": 2,
        }
    )
    air_pricing_solution_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "AirPricingSolutionRef",
            "type": "Attribute",
        }
    )
    penalty_to_fare: Optional[bool] = field(
        default=None,
        metadata={
            "name": "PenaltyToFare",
            "type": "Attribute",
        }
    )
    price_ptconly: bool = field(
        default=False,
        metadata={
            "name": "PricePTCOnly",
            "type": "Attribute",
        }
    )
    brand_details: bool = field(
        default=False,
        metadata={
            "name": "BrandDetails",
            "type": "Attribute",
        }
    )
    brand_modifier: Optional[str] = field(
        default=None,
        metadata={
            "name": "BrandModifier",
            "type": "Attribute",
        }
    )
    jet_service_only: bool = field(
        default=False,
        metadata={
            "name": "JetServiceOnly",
            "type": "Attribute",
        }
    )
    time_window: Optional[int] = field(
        default=None,
        metadata={
            "name": "TimeWindow",
            "type": "Attribute",
            "min_inclusive": 1,
            "max_inclusive": 12,
        }
    )
    flight_type: RepricingModifiersFlightType = field(
        default=RepricingModifiersFlightType.DIRECT,
        metadata={
            "name": "FlightType",
            "type": "Attribute",
        }
    )
    multi_airport_search: bool = field(
        default=True,
        metadata={
            "name": "MultiAirportSearch",
            "type": "Attribute",
        }
    )
    connection_point: Optional[str] = field(
        default=None,
        metadata={
            "name": "ConnectionPoint",
            "type": "Attribute",
            "length": 3,
            "white_space": "collapse",
        }
    )

    @dataclass
    class OverrideCurrency:
        currency_code: Optional[str] = field(
            default=None,
            metadata={
                "name": "CurrencyCode",
                "type": "Attribute",
                "length": 3,
            }
        )
        country_code: Optional[str] = field(
            default=None,
            metadata={
                "name": "CountryCode",
                "type": "Attribute",
                "length": 2,
            }
        )


@dataclass
class Route:
    """
    Information about this Route component.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    leg: List[Leg] = field(
        default_factory=list,
        metadata={
            "name": "Leg",
            "type": "Element",
            "min_occurs": 1,
            "max_occurs": 999,
        }
    )
    key: Optional[str] = field(
        default=None,
        metadata={
            "name": "Key",
            "type": "Attribute",
            "required": True,
        }
    )


@dataclass
class RuleLengthOfStay:
    """
    Container for rules providing minimum and maximum stay requirements.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    minimum_stay: Optional[TypeRestrictionLengthOfStay] = field(
        default=None,
        metadata={
            "name": "MinimumStay",
            "type": "Element",
        }
    )
    maximum_stay: Optional[TypeRestrictionLengthOfStay] = field(
        default=None,
        metadata={
            "name": "MaximumStay",
            "type": "Element",
        }
    )


@dataclass
class TcrexchangeBundle:
    """
    Bundle exchange, pricing, and penalty information for one ticketless carrier
    reservation Used in AirExchangeReq request and AirExchangeQuoteRsp response.

    :ivar air_exchange_info:
    :ivar air_pricing_info_ref:
    :ivar fee_info:
    :ivar tax_info: Itinerary level taxes
    :ivar penalty: Only used within an AirExchangeQuoteRsp
    :ivar tcrnumber: The identifying number for a Ticketless Air
        Reservation.
    """
    class Meta:
        name = "TCRExchangeBundle"
        namespace = "http://www.travelport.com/schema/air_v52_0"

    air_exchange_info: Optional[AirExchangeInfo] = field(
        default=None,
        metadata={
            "name": "AirExchangeInfo",
            "type": "Element",
            "namespace": "http://www.travelport.com/schema/common_v52_0",
            "required": True,
        }
    )
    air_pricing_info_ref: List[AirPricingInfoRef] = field(
        default_factory=list,
        metadata={
            "name": "AirPricingInfoRef",
            "type": "Element",
            "min_occurs": 1,
            "max_occurs": 999,
        }
    )
    fee_info: List[FeeInfo] = field(
        default_factory=list,
        metadata={
            "name": "FeeInfo",
            "type": "Element",
            "max_occurs": 999,
        }
    )
    tax_info: List[TaxInfo] = field(
        default_factory=list,
        metadata={
            "name": "TaxInfo",
            "type": "Element",
            "max_occurs": 999,
        }
    )
    penalty: List[CommonPenalty] = field(
        default_factory=list,
        metadata={
            "name": "Penalty",
            "type": "Element",
            "namespace": "http://www.travelport.com/schema/common_v52_0",
            "max_occurs": 999,
        }
    )
    tcrnumber: Optional[str] = field(
        default=None,
        metadata={
            "name": "TCRNumber",
            "type": "Attribute",
            "required": True,
        }
    )


@dataclass
class Ticket:
    """
    The ticket that resulted from an air booking.

    :ivar coupon:
    :ivar ticket_endorsement:
    :ivar tour_code:
    :ivar exchanged_ticket_info:
    :ivar key:
    :ivar ticket_number:
    :ivar ticket_status:
    :ivar el_stat: This attribute is used to show the action results of
        an element. Possible values are "A" (when elements have been
        added to the UR) and "M" (when existing elements have been
        modified). Response only.
    :ivar key_override: If a duplicate key is found where we are adding
        elements in some cases like URAdd, then instead of erroring out
        set this attribute to true.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    coupon: List[Coupon] = field(
        default_factory=list,
        metadata={
            "name": "Coupon",
            "type": "Element",
            "min_occurs": 1,
            "max_occurs": 4,
        }
    )
    ticket_endorsement: List[TicketEndorsement] = field(
        default_factory=list,
        metadata={
            "name": "TicketEndorsement",
            "type": "Element",
            "max_occurs": 6,
        }
    )
    tour_code: List[TourCode] = field(
        default_factory=list,
        metadata={
            "name": "TourCode",
            "type": "Element",
            "max_occurs": 999,
        }
    )
    exchanged_ticket_info: List[ExchangedTicketInfo] = field(
        default_factory=list,
        metadata={
            "name": "ExchangedTicketInfo",
            "type": "Element",
            "max_occurs": 999,
        }
    )
    key: Optional[str] = field(
        default=None,
        metadata={
            "name": "Key",
            "type": "Attribute",
        }
    )
    ticket_number: Optional[str] = field(
        default=None,
        metadata={
            "name": "TicketNumber",
            "type": "Attribute",
            "required": True,
            "length": 13,
        }
    )
    ticket_status: Optional[TypeTicketStatus] = field(
        default=None,
        metadata={
            "name": "TicketStatus",
            "type": "Attribute",
        }
    )
    el_stat: Optional[TypeElementStatus] = field(
        default=None,
        metadata={
            "name": "ElStat",
            "type": "Attribute",
        }
    )
    key_override: Optional[bool] = field(
        default=None,
        metadata={
            "name": "KeyOverride",
            "type": "Attribute",
        }
    )


@dataclass
class TicketInfo:
    """
    :ivar name:
    :ivar conjuncted_ticket_info:
    :ivar exchanged_ticket_info:
    :ivar number:
    :ivar iatanumber:
    :ivar ticket_issue_date:
    :ivar ticketing_agent_sign_on:
    :ivar country_code: Contains Ticketed PCC’s Country code.
    :ivar status:
    :ivar bulk_ticket: Whether the ticket was issued as bulk.
    :ivar booking_traveler_ref: A reference to a passenger.
    :ivar air_pricing_info_ref: A reference to a AirPricing.Applicable
        Providers 1G and 1V.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    name: Optional[Name] = field(
        default=None,
        metadata={
            "name": "Name",
            "type": "Element",
            "namespace": "http://www.travelport.com/schema/common_v52_0",
            "required": True,
        }
    )
    conjuncted_ticket_info: List[ConjunctedTicketInfo] = field(
        default_factory=list,
        metadata={
            "name": "ConjunctedTicketInfo",
            "type": "Element",
            "max_occurs": 3,
        }
    )
    exchanged_ticket_info: List[ExchangedTicketInfo] = field(
        default_factory=list,
        metadata={
            "name": "ExchangedTicketInfo",
            "type": "Element",
            "max_occurs": 999,
        }
    )
    number: Optional[str] = field(
        default=None,
        metadata={
            "name": "Number",
            "type": "Attribute",
            "required": True,
        }
    )
    iatanumber: Optional[str] = field(
        default=None,
        metadata={
            "name": "IATANumber",
            "type": "Attribute",
            "max_length": 8,
        }
    )
    ticket_issue_date: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "TicketIssueDate",
            "type": "Attribute",
        }
    )
    ticketing_agent_sign_on: Optional[str] = field(
        default=None,
        metadata={
            "name": "TicketingAgentSignOn",
            "type": "Attribute",
            "max_length": 9,
        }
    )
    country_code: Optional[str] = field(
        default=None,
        metadata={
            "name": "CountryCode",
            "type": "Attribute",
            "length": 2,
        }
    )
    status: Optional[TypeTicketStatus] = field(
        default=None,
        metadata={
            "name": "Status",
            "type": "Attribute",
            "required": True,
        }
    )
    bulk_ticket: Optional[bool] = field(
        default=None,
        metadata={
            "name": "BulkTicket",
            "type": "Attribute",
        }
    )
    booking_traveler_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "BookingTravelerRef",
            "type": "Attribute",
            "required": True,
        }
    )
    air_pricing_info_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "AirPricingInfoRef",
            "type": "Attribute",
        }
    )


@dataclass
class VariableCategoryType:
    """
    :ivar category_details: To indicate details of which category is
        displayed
    :ivar variable_category_detail: If the specified category of
        Structured Fare Rules is of variable lenght
    :ivar value:
    """
    class Meta:
        target_namespace = "http://www.travelport.com/schema/air_v52_0"

    category_details: List[ValueDetails] = field(
        default_factory=list,
        metadata={
            "name": "CategoryDetails",
            "type": "Element",
            "namespace": "http://www.travelport.com/schema/air_v52_0",
            "max_occurs": 99,
        }
    )
    variable_category_detail: List[CategoryDetailsType] = field(
        default_factory=list,
        metadata={
            "name": "VariableCategoryDetail",
            "type": "Element",
            "namespace": "http://www.travelport.com/schema/air_v52_0",
            "max_occurs": 99,
        }
    )
    value: Optional[str] = field(
        default=None,
        metadata={
            "name": "Value",
            "type": "Attribute",
            "required": True,
        }
    )


@dataclass
class TypeDefaultBrandDetail:
    """
    :ivar text: Text associated to the brand
    :ivar image_location: Images associated to the brand
    :ivar applicable_segment: Defines for which air segment the brand is
        applicable.
    :ivar brand_id: The unique identifier of the brand
    """
    class Meta:
        name = "typeDefaultBrandDetail"
        target_namespace = "http://www.travelport.com/schema/air_v52_0"

    text: List[Text] = field(
        default_factory=list,
        metadata={
            "name": "Text",
            "type": "Element",
            "namespace": "http://www.travelport.com/schema/air_v52_0",
            "max_occurs": 4,
        }
    )
    image_location: List[ImageLocation] = field(
        default_factory=list,
        metadata={
            "name": "ImageLocation",
            "type": "Element",
            "namespace": "http://www.travelport.com/schema/air_v52_0",
            "max_occurs": 3,
        }
    )
    applicable_segment: List[ApplicableSegment] = field(
        default_factory=list,
        metadata={
            "name": "ApplicableSegment",
            "type": "Element",
            "namespace": "http://www.travelport.com/schema/air_v52_0",
            "max_occurs": 99,
        }
    )
    brand_id: Optional[str] = field(
        default=None,
        metadata={
            "name": "BrandID",
            "type": "Attribute",
            "min_length": 1,
            "max_length": 19,
        }
    )


class AckScheduleChangeServicePortTypeService:
    style = "document"
    location = "http://localhost:8080/kestrel/ScheduleChangeService"
    transport = "http://schemas.xmlsoap.org/soap/http"
    soap_action = "http://localhost:8080/kestrel/ScheduleChangeService"
    input = AckScheduleChangeServicePortTypeServiceInput
    output = AckScheduleChangeServicePortTypeServiceOutput


class AgencyCreateServiceFeePortTypeService:
    style = "document"
    location = "http://localhost:8080/kestrel/AgencyFeeService"
    transport = "http://schemas.xmlsoap.org/soap/http"
    soap_action = "http://localhost:8080/kestrel/AgencyFeeService"
    input = AgencyCreateServiceFeePortTypeServiceInput
    output = AgencyCreateServiceFeePortTypeServiceOutput


class AirAvailabilitySearchPortTypeService:
    style = "document"
    location = "http://localhost:8080/kestrel/AirService"
    transport = "http://schemas.xmlsoap.org/soap/http"
    soap_action = "http://localhost:8080/kestrel/AirService"
    input = AirAvailabilitySearchPortTypeServiceInput
    output = AirAvailabilitySearchPortTypeServiceOutput


class AirCancelPortTypeService:
    style = "document"
    location = "http://localhost:8080/kestrel/AirService"
    transport = "http://schemas.xmlsoap.org/soap/http"
    soap_action = "http://localhost:8080/kestrel/AirService"
    input = AirCancelPortTypeServiceInput
    output = AirCancelPortTypeServiceOutput


class AirExchangeEligibilityPortTypeService:
    style = "document"
    location = "http://localhost:8080/kestrel/AirService"
    transport = "http://schemas.xmlsoap.org/soap/http"
    soap_action = "http://localhost:8080/kestrel/AirService"
    input = AirExchangeEligibilityPortTypeServiceInput
    output = AirExchangeEligibilityPortTypeServiceOutput


class AirExchangeMultiQuotePortTypeService:
    style = "document"
    location = "http://localhost:8080/kestrel/AirService"
    transport = "http://schemas.xmlsoap.org/soap/http"
    soap_action = "http://localhost:8080/kestrel/AirService"
    input = AirExchangeMultiQuotePortTypeServiceInput
    output = AirExchangeMultiQuotePortTypeServiceOutput


class AirExchangeProcessPortTypeService:
    style = "document"
    location = "http://localhost:8080/kestrel/AirService"
    transport = "http://schemas.xmlsoap.org/soap/http"
    soap_action = "http://localhost:8080/kestrel/AirService"
    input = AirExchangeProcessPortTypeServiceInput
    output = AirExchangeProcessPortTypeServiceOutput


class AirExchangeQuotePortTypeService:
    style = "document"
    location = "http://localhost:8080/kestrel/AirService"
    transport = "http://schemas.xmlsoap.org/soap/http"
    soap_action = "http://localhost:8080/kestrel/AirService"
    input = AirExchangeQuotePortTypeServiceInput
    output = AirExchangeQuotePortTypeServiceOutput


class AirExchangeTicketingPortTypeService:
    style = "document"
    location = "http://localhost:8080/kestrel/AirService"
    transport = "http://schemas.xmlsoap.org/soap/http"
    soap_action = "http://localhost:8080/kestrel/AirService"
    input = AirExchangeTicketingPortTypeServiceInput
    output = AirExchangeTicketingPortTypeServiceOutput


class AirFareDisplayPortTypeService:
    style = "document"
    location = "http://localhost:8080/kestrel/AirService"
    transport = "http://schemas.xmlsoap.org/soap/http"
    soap_action = "http://localhost:8080/kestrel/AirService"
    input = AirFareDisplayPortTypeServiceInput
    output = AirFareDisplayPortTypeServiceOutput


class AirFareRulesPortTypeService:
    style = "document"
    location = "http://localhost:8080/kestrel/AirService"
    transport = "http://schemas.xmlsoap.org/soap/http"
    soap_action = "http://localhost:8080/kestrel/AirService"
    input = AirFareRulesPortTypeServiceInput
    output = AirFareRulesPortTypeServiceOutput


class AirLowFareSearchPortTypeService:
    style = "document"
    location = "http://localhost:8080/kestrel/AirService"
    transport = "http://schemas.xmlsoap.org/soap/http"
    soap_action = "http://localhost:8080/kestrel/AirService"
    input = AirLowFareSearchPortTypeServiceInput
    output = AirLowFareSearchPortTypeServiceOutput


class AirMerchandisingDetailsPortTypeService:
    style = "document"
    location = "http://localhost:8080/kestrel/AirService"
    transport = "http://schemas.xmlsoap.org/soap/http"
    soap_action = "http://localhost:8080/kestrel/AirService"
    input = AirMerchandisingDetailsPortTypeServiceInput
    output = AirMerchandisingDetailsPortTypeServiceOutput


class AirMerchandisingFulfillmentPortTypeService:
    style = "document"
    location = "http://localhost:8080/kestrel/AirService"
    transport = "http://schemas.xmlsoap.org/soap/http"
    soap_action = "http://localhost:8080/kestrel/AirService"
    input = AirMerchandisingFulfillmentPortTypeServiceInput
    output = AirMerchandisingFulfillmentPortTypeServiceOutput


class AirMerchandisingOfferAvailabilityPortTypeService:
    style = "document"
    location = "http://localhost:8080/kestrel/AirService"
    transport = "http://schemas.xmlsoap.org/soap/http"
    soap_action = "http://localhost:8080/kestrel/AirService"
    input = AirMerchandisingOfferAvailabilityPortTypeServiceInput
    output = AirMerchandisingOfferAvailabilityPortTypeServiceOutput


class AirPrePayPortTypeService:
    style = "document"
    location = "http://localhost:8080/kestrel/AirService"
    transport = "http://schemas.xmlsoap.org/soap/http"
    soap_action = "http://localhost:8080/kestrel/AirService"
    input = AirPrePayPortTypeServiceInput
    output = AirPrePayPortTypeServiceOutput


class AirPricePortTypeService:
    style = "document"
    location = "http://localhost:8080/kestrel/AirService"
    transport = "http://schemas.xmlsoap.org/soap/http"
    soap_action = "http://localhost:8080/kestrel/AirService"
    input = AirPricePortTypeServiceInput
    output = AirPricePortTypeServiceOutput


class AirRefundQuotePortTypeService:
    style = "document"
    location = "http://localhost:8080/kestrel/AirService"
    transport = "http://schemas.xmlsoap.org/soap/http"
    soap_action = "http://localhost:8080/kestrel/AirService"
    input = AirRefundQuotePortTypeServiceInput
    output = AirRefundQuotePortTypeServiceOutput


class AirRefundTicketPortTypeService:
    style = "document"
    location = "http://localhost:8080/kestrel/AirService"
    transport = "http://schemas.xmlsoap.org/soap/http"
    soap_action = "http://localhost:8080/kestrel/AirService"
    input = AirRefundTicketPortTypeServiceInput
    output = AirRefundTicketPortTypeServiceOutput


class AirRepriceSearchPortTypeService:
    style = "document"
    location = "http://localhost:8080/kestrel/AirService"
    transport = "http://schemas.xmlsoap.org/soap/http"
    soap_action = "http://localhost:8080/kestrel/AirService"
    input = AirRepriceSearchPortTypeServiceInput
    output = AirRepriceSearchPortTypeServiceOutput


class AirRetrieveDocumentPortTypeService:
    style = "document"
    location = "http://localhost:8080/kestrel/AirService"
    transport = "http://schemas.xmlsoap.org/soap/http"
    soap_action = "http://localhost:8080/kestrel/AirService"
    input = AirRetrieveDocumentPortTypeServiceInput
    output = AirRetrieveDocumentPortTypeServiceOutput


class AirScheduleSearchPortTypeService:
    style = "document"
    location = "http://localhost:8080/kestrel/AirService"
    transport = "http://schemas.xmlsoap.org/soap/http"
    soap_action = "http://localhost:8080/kestrel/AirService"
    input = AirScheduleSearchPortTypeServiceInput
    output = AirScheduleSearchPortTypeServiceOutput


class AirTicketingPortTypeService:
    style = "document"
    location = "http://localhost:8080/kestrel/AirService"
    transport = "http://schemas.xmlsoap.org/soap/http"
    soap_action = "http://localhost:8080/kestrel/AirService"
    input = AirTicketingPortTypeServiceInput
    output = AirTicketingPortTypeServiceOutput


class AirUpsellSearchPortTypeService:
    style = "document"
    location = "http://localhost:8080/kestrel/AirService"
    transport = "http://schemas.xmlsoap.org/soap/http"
    soap_action = "http://localhost:8080/kestrel/AirService"
    input = AirUpsellSearchPortTypeServiceInput
    output = AirUpsellSearchPortTypeServiceOutput


class AirVoidDocumentPortTypeService:
    style = "document"
    location = "http://localhost:8080/kestrel/AirService"
    transport = "http://schemas.xmlsoap.org/soap/http"
    soap_action = "http://localhost:8080/kestrel/AirService"
    input = AirVoidDocumentPortTypeServiceInput
    output = AirVoidDocumentPortTypeServiceOutput


class BookingAirExchangePortTypeService:
    style = "document"
    location = "http://localhost:8080/kestrel/SharedBookingService"
    transport = "http://schemas.xmlsoap.org/soap/http"
    soap_action = "http://localhost:8080/kestrel/SharedBookingService"
    input = BookingAirExchangePortTypeServiceInput
    output = BookingAirExchangePortTypeServiceOutput


class BookingAirExchangeQuotePortTypeService:
    style = "document"
    location = "http://localhost:8080/kestrel/SharedBookingService"
    transport = "http://schemas.xmlsoap.org/soap/http"
    soap_action = "http://localhost:8080/kestrel/SharedBookingService"
    input = BookingAirExchangeQuotePortTypeServiceInput
    output = BookingAirExchangeQuotePortTypeServiceOutput


class BookingAirPnrElementPortTypeService:
    style = "document"
    location = "http://localhost:8080/kestrel/SharedBookingService"
    transport = "http://schemas.xmlsoap.org/soap/http"
    soap_action = "http://localhost:8080/kestrel/SharedBookingService"
    input = BookingAirPnrElementPortTypeServiceInput
    output = BookingAirPnrElementPortTypeServiceOutput


class BookingAirSegmentPortTypeService:
    style = "document"
    location = "http://localhost:8080/kestrel/SharedBookingService"
    transport = "http://schemas.xmlsoap.org/soap/http"
    soap_action = "http://localhost:8080/kestrel/SharedBookingService"
    input = BookingAirSegmentPortTypeServiceInput
    output = BookingAirSegmentPortTypeServiceOutput


class BookingDisplayPortTypeService:
    style = "document"
    location = "http://localhost:8080/kestrel/SharedBookingService"
    transport = "http://schemas.xmlsoap.org/soap/http"
    soap_action = "http://localhost:8080/kestrel/SharedBookingService"
    input = BookingDisplayPortTypeServiceInput
    output = BookingDisplayPortTypeServiceOutput


class BookingEndPortTypeService:
    style = "document"
    location = "http://localhost:8080/kestrel/SharedBookingService"
    transport = "http://schemas.xmlsoap.org/soap/http"
    soap_action = "http://localhost:8080/kestrel/SharedBookingService"
    input = BookingEndPortTypeServiceInput
    output = BookingEndPortTypeServiceOutput


class BookingHotelPnrElementPortTypeService:
    style = "document"
    location = "http://localhost:8080/kestrel/SharedBookingService"
    transport = "http://schemas.xmlsoap.org/soap/http"
    soap_action = "http://localhost:8080/kestrel/SharedBookingService"
    input = BookingHotelPnrElementPortTypeServiceInput
    output = BookingHotelPnrElementPortTypeServiceOutput


class BookingHotelSegmentPortTypeService:
    style = "document"
    location = "http://localhost:8080/kestrel/SharedBookingService"
    transport = "http://schemas.xmlsoap.org/soap/http"
    soap_action = "http://localhost:8080/kestrel/SharedBookingService"
    input = BookingHotelSegmentPortTypeServiceInput
    output = BookingHotelSegmentPortTypeServiceOutput


class BookingPnrElementPortTypeService:
    style = "document"
    location = "http://localhost:8080/kestrel/SharedBookingService"
    transport = "http://schemas.xmlsoap.org/soap/http"
    soap_action = "http://localhost:8080/kestrel/SharedBookingService"
    input = BookingPnrElementPortTypeServiceInput
    output = BookingPnrElementPortTypeServiceOutput


class BookingPricingPortTypeService:
    style = "document"
    location = "http://localhost:8080/kestrel/SharedBookingService"
    transport = "http://schemas.xmlsoap.org/soap/http"
    soap_action = "http://localhost:8080/kestrel/SharedBookingService"
    input = BookingPricingPortTypeServiceInput
    output = BookingPricingPortTypeServiceOutput


class BookingRetrieveDocumentPortTypeService:
    style = "document"
    location = "http://localhost:8080/kestrel/SharedBookingService"
    transport = "http://schemas.xmlsoap.org/soap/http"
    soap_action = "http://localhost:8080/kestrel/SharedBookingService"
    input = BookingRetrieveDocumentPortTypeServiceInput
    output = BookingRetrieveDocumentPortTypeServiceOutput


class BookingSeatAssignmentPortTypeService:
    style = "document"
    location = "http://localhost:8080/kestrel/SharedBookingService"
    transport = "http://schemas.xmlsoap.org/soap/http"
    soap_action = "http://localhost:8080/kestrel/SharedBookingService"
    input = BookingSeatAssignmentPortTypeServiceInput
    output = BookingSeatAssignmentPortTypeServiceOutput


class BookingStartPortTypeService:
    style = "document"
    location = "http://localhost:8080/kestrel/SharedBookingService"
    transport = "http://schemas.xmlsoap.org/soap/http"
    soap_action = "http://localhost:8080/kestrel/SharedBookingService"
    input = BookingStartPortTypeServiceInput
    output = BookingStartPortTypeServiceOutput


class BookingTerminalCommandPortTypeService:
    style = "document"
    location = "http://localhost:8080/kestrel/SharedBookingService"
    transport = "http://schemas.xmlsoap.org/soap/http"
    soap_action = "http://localhost:8080/kestrel/SharedBookingService"
    input = BookingTerminalCommandPortTypeServiceInput
    output = BookingTerminalCommandPortTypeServiceOutput


class BookingTravelerPortTypeService:
    style = "document"
    location = "http://localhost:8080/kestrel/SharedBookingService"
    transport = "http://schemas.xmlsoap.org/soap/http"
    soap_action = "http://localhost:8080/kestrel/SharedBookingService"
    input = BookingTravelerPortTypeServiceInput
    output = BookingTravelerPortTypeServiceOutput


class BrandedFareAdminPortTypeService:
    style = "document"
    location = "http://localhost:8080/kestrel/BrandedFareService"
    transport = "http://schemas.xmlsoap.org/soap/http"
    soap_action = "http://localhost:8080/kestrel/BrandedFareService"
    input = BrandedFareAdminPortTypeServiceInput
    output = BrandedFareAdminPortTypeServiceOutput


class BrandedFareSearchPortTypeService:
    style = "document"
    location = "http://localhost:8080/kestrel/BrandedFareService"
    transport = "http://schemas.xmlsoap.org/soap/http"
    soap_action = "http://localhost:8080/kestrel/BrandedFareService"
    input = BrandedFareSearchPortTypeServiceInput
    output = BrandedFareSearchPortTypeServiceOutput


class CalculateTaxPortTypeService:
    style = "document"
    location = "http://localhost:8080/kestrel/UtilService"
    transport = "http://schemas.xmlsoap.org/soap/http"
    soap_action = "http://localhost:8080/kestrel/UtilService"
    input = CalculateTaxPortTypeServiceInput
    output = CalculateTaxPortTypeServiceOutput


class ContentProviderRetrievePortTypeService:
    style = "document"
    location = "http://localhost:8080/kestrel/UtilService"
    transport = "http://schemas.xmlsoap.org/soap/http"
    soap_action = "http://localhost:8080/kestrel/UtilService"
    input = ContentProviderRetrievePortTypeServiceInput
    output = ContentProviderRetrievePortTypeServiceOutput


class CreateTerminalSessionServicePortTypeService:
    style = "document"
    location = "http://localhost:8080/kestrel/TerminalService"
    transport = "http://schemas.xmlsoap.org/soap/http"
    soap_action = "http://localhost:8080/kestrel/TerminalService"
    input = CreateTerminalSessionServicePortTypeServiceInput
    output = CreateTerminalSessionServicePortTypeServiceOutput


class EmdissuancePortTypeService:
    style = "document"
    location = "http://localhost:8080/kestrel/AirService"
    transport = "http://schemas.xmlsoap.org/soap/http"
    soap_action = "http://localhost:8080/kestrel/AirService"
    input = EmdissuancePortTypeServiceInput
    output = EmdissuancePortTypeServiceOutput


class EmdretrievePortTypeService:
    style = "document"
    location = "http://localhost:8080/kestrel/AirService"
    transport = "http://schemas.xmlsoap.org/soap/http"
    soap_action = "http://localhost:8080/kestrel/AirService"
    input = EmdretrievePortTypeServiceInput
    output = EmdretrievePortTypeServiceOutput


class EndTerminalSessionServicePortTypeService:
    style = "document"
    location = "http://localhost:8080/kestrel/TerminalService"
    transport = "http://schemas.xmlsoap.org/soap/http"
    soap_action = "http://localhost:8080/kestrel/TerminalService"
    input = EndTerminalSessionServicePortTypeServiceInput
    output = EndTerminalSessionServicePortTypeServiceOutput


class ExternalCacheAccessPortTypeService:
    style = "document"
    location = "http://localhost:8080/kestrel/ExternalCacheAccessService"
    transport = "http://schemas.xmlsoap.org/soap/http"
    soap_action = "http://localhost:8080/kestrel/ExternalCacheAccessService"
    input = ExternalCacheAccessPortTypeServiceInput
    output = ExternalCacheAccessPortTypeServiceOutput


class FindEmployeesOnFlightServicePortTypeService:
    style = "document"
    location = "http://localhost:8080/kestrel/FindEmployeesOnFlightService"
    transport = "http://schemas.xmlsoap.org/soap/http"
    soap_action = "http://localhost:8080/kestrel/FindEmployeesOnFlightService"
    input = FindEmployeesOnFlightServicePortTypeServiceInput
    output = FindEmployeesOnFlightServicePortTypeServiceOutput


class FlightDetailsPortTypeService:
    style = "document"
    location = "http://localhost:8080/kestrel/FlightService"
    transport = "http://schemas.xmlsoap.org/soap/http"
    soap_action = "http://localhost:8080/kestrel/FlightService"
    input = FlightDetailsPortTypeServiceInput
    output = FlightDetailsPortTypeServiceOutput


class FlightInfoPortTypeService:
    style = "document"
    location = "http://localhost:8080/kestrel/FlightService"
    transport = "http://schemas.xmlsoap.org/soap/http"
    soap_action = "http://localhost:8080/kestrel/FlightService"
    input = FlightInfoPortTypeServiceInput
    output = FlightInfoPortTypeServiceOutput


class FlightTimeTablePortTypeService:
    style = "document"
    location = "http://localhost:8080/kestrel/AirService"
    transport = "http://schemas.xmlsoap.org/soap/http"
    soap_action = "http://localhost:8080/kestrel/AirService"
    input = FlightTimeTablePortTypeServiceInput
    output = FlightTimeTablePortTypeServiceOutput


class GdsEnterQueueServicePortTypeService:
    style = "document"
    location = "http://localhost:8080/kestrel/GdsQueueService"
    transport = "http://schemas.xmlsoap.org/soap/http"
    soap_action = "http://localhost:8080/kestrel/GdsQueueService"
    input = GdsEnterQueueServicePortTypeServiceInput
    output = GdsEnterQueueServicePortTypeServiceOutput


class GdsExitQueueServicePortTypeService:
    style = "document"
    location = "http://localhost:8080/kestrel/GdsQueueService"
    transport = "http://schemas.xmlsoap.org/soap/http"
    soap_action = "http://localhost:8080/kestrel/GdsQueueService"
    input = GdsExitQueueServicePortTypeServiceInput
    output = GdsExitQueueServicePortTypeServiceOutput


class GdsNextOnQueueServicePortTypeService:
    style = "document"
    location = "http://localhost:8080/kestrel/GdsQueueService"
    transport = "http://schemas.xmlsoap.org/soap/http"
    soap_action = "http://localhost:8080/kestrel/GdsQueueService"
    input = GdsNextOnQueueServicePortTypeServiceInput
    output = GdsNextOnQueueServicePortTypeServiceOutput


class GdsQueueAgentListServicePortTypeService:
    style = "document"
    location = "http://localhost:8080/kestrel/GdsQueueAgentListService"
    transport = "http://schemas.xmlsoap.org/soap/http"
    soap_action = "http://localhost:8080/kestrel/GdsQueueAgentListService"
    input = GdsQueueAgentListServicePortTypeServiceInput
    output = GdsQueueAgentListServicePortTypeServiceOutput


class GdsQueueCountServicePortTypeService:
    style = "document"
    location = "http://localhost:8080/kestrel/GdsQueueService"
    transport = "http://schemas.xmlsoap.org/soap/http"
    soap_action = "http://localhost:8080/kestrel/GdsQueueService"
    input = GdsQueueCountServicePortTypeServiceInput
    output = GdsQueueCountServicePortTypeServiceOutput


class GdsQueueListServicePortTypeService:
    style = "document"
    location = "http://localhost:8080/kestrel/GdsQueueService"
    transport = "http://schemas.xmlsoap.org/soap/http"
    soap_action = "http://localhost:8080/kestrel/GdsQueueService"
    input = GdsQueueListServicePortTypeServiceInput
    output = GdsQueueListServicePortTypeServiceOutput


class GdsQueuePlaceServicePortTypeService:
    style = "document"
    location = "http://localhost:8080/kestrel/GdsQueueService"
    transport = "http://schemas.xmlsoap.org/soap/http"
    soap_action = "http://localhost:8080/kestrel/GdsQueueService"
    input = GdsQueuePlaceServicePortTypeServiceInput
    output = GdsQueuePlaceServicePortTypeServiceOutput


class GdsQueueRemoveServicePortTypeService:
    style = "document"
    location = "http://localhost:8080/kestrel/GdsQueueService"
    transport = "http://schemas.xmlsoap.org/soap/http"
    soap_action = "http://localhost:8080/kestrel/GdsQueueService"
    input = GdsQueueRemoveServicePortTypeServiceInput
    output = GdsQueueRemoveServicePortTypeServiceOutput


class HotelCancelServicePortTypeService:
    style = "document"
    location = "http://localhost:8080/kestrel/HotelService"
    transport = "http://schemas.xmlsoap.org/soap/http"
    soap_action = "http://localhost:8080/kestrel/HotelService"
    input = HotelCancelServicePortTypeServiceInput
    output = HotelCancelServicePortTypeServiceOutput


class HotelDetailsServicePortTypeService:
    style = "document"
    location = "http://localhost:8080/kestrel/HotelService"
    transport = "http://schemas.xmlsoap.org/soap/http"
    soap_action = "http://localhost:8080/kestrel/HotelService"
    input = HotelDetailsServicePortTypeServiceInput
    output = HotelDetailsServicePortTypeServiceOutput


class HotelKeywordsServicePortTypeService:
    style = "document"
    location = "http://localhost:8080/kestrel/HotelService"
    transport = "http://schemas.xmlsoap.org/soap/http"
    soap_action = "http://localhost:8080/kestrel/HotelService"
    input = HotelKeywordsServicePortTypeServiceInput
    output = HotelKeywordsServicePortTypeServiceOutput


class HotelMediaLinksServicePortTypeService:
    style = "document"
    location = "http://localhost:8080/kestrel/HotelService"
    transport = "http://schemas.xmlsoap.org/soap/http"
    soap_action = "http://localhost:8080/kestrel/HotelService"
    input = HotelMediaLinksServicePortTypeServiceInput
    output = HotelMediaLinksServicePortTypeServiceOutput


class HotelReservationServicePortTypeService:
    style = "document"
    location = "http://localhost:8080/kestrel/HotelService"
    transport = "http://schemas.xmlsoap.org/soap/http"
    soap_action = "http://localhost:8080/kestrel/HotelService"
    input = HotelReservationServicePortTypeServiceInput
    output = HotelReservationServicePortTypeServiceOutput


class HotelRetrieveServicePortTypeService:
    style = "document"
    location = "http://localhost:8080/kestrel/HotelService"
    transport = "http://schemas.xmlsoap.org/soap/http"
    soap_action = "http://localhost:8080/kestrel/HotelService"
    input = HotelRetrieveServicePortTypeServiceInput
    output = HotelRetrieveServicePortTypeServiceOutput


class HotelRulesServicePortTypeService:
    style = "document"
    location = "http://localhost:8080/kestrel/HotelService"
    transport = "http://schemas.xmlsoap.org/soap/http"
    soap_action = "http://localhost:8080/kestrel/HotelService"
    input = HotelRulesServicePortTypeServiceInput
    output = HotelRulesServicePortTypeServiceOutput


class HotelSearchServicePortTypeService:
    style = "document"
    location = "http://localhost:8080/kestrel/HotelService"
    transport = "http://schemas.xmlsoap.org/soap/http"
    soap_action = "http://localhost:8080/kestrel/HotelService"
    input = HotelSearchServicePortTypeServiceInput
    output = HotelSearchServicePortTypeServiceOutput


class HotelSuperShopperServicePortTypeService:
    style = "document"
    location = "http://localhost:8080/kestrel/HotelService"
    transport = "http://schemas.xmlsoap.org/soap/http"
    soap_action = "http://localhost:8080/kestrel/HotelService"
    input = HotelSuperShopperServicePortTypeServiceInput
    output = HotelSuperShopperServicePortTypeServiceOutput


class HotelUpsellSearchServicePortTypeService:
    style = "document"
    location = "http://localhost:8080/kestrel/HotelService"
    transport = "http://schemas.xmlsoap.org/soap/http"
    soap_action = "http://localhost:8080/kestrel/HotelService"
    input = HotelUpsellSearchServicePortTypeServiceInput
    output = HotelUpsellSearchServicePortTypeServiceOutput


class McoCreateAgencyFeePortTypeService:
    style = "document"
    location = "http://localhost:8080/kestrel/UtilService"
    transport = "http://schemas.xmlsoap.org/soap/http"
    soap_action = "http://localhost:8080/kestrel/UtilService"
    input = McoCreateAgencyFeePortTypeServiceInput
    output = McoCreateAgencyFeePortTypeServiceOutput


class McoSearchPortTypeService:
    style = "document"
    location = "http://localhost:8080/kestrel/UtilService"
    transport = "http://schemas.xmlsoap.org/soap/http"
    soap_action = "http://localhost:8080/kestrel/UtilService"
    input = McoSearchPortTypeServiceInput
    output = McoSearchPortTypeServiceOutput


class McoVoidPortTypeService:
    style = "document"
    location = "http://localhost:8080/kestrel/UtilService"
    transport = "http://schemas.xmlsoap.org/soap/http"
    soap_action = "http://localhost:8080/kestrel/UtilService"
    input = McoVoidPortTypeServiceInput
    output = McoVoidPortTypeServiceOutput


class MctCountPortTypeService:
    style = "document"
    location = "http://localhost:8080/kestrel/UtilService"
    transport = "http://schemas.xmlsoap.org/soap/http"
    soap_action = "http://localhost:8080/kestrel/UtilService"
    input = MctCountPortTypeServiceInput
    output = MctCountPortTypeServiceOutput


class MctLookupPortTypeService:
    style = "document"
    location = "http://localhost:8080/kestrel/UtilService"
    transport = "http://schemas.xmlsoap.org/soap/http"
    soap_action = "http://localhost:8080/kestrel/UtilService"
    input = MctLookupPortTypeServiceInput
    output = MctLookupPortTypeServiceOutput


class PassiveCancelServicePortTypeService:
    style = "document"
    location = "http://localhost:8080/kestrel/PassiveService"
    transport = "http://schemas.xmlsoap.org/soap/http"
    soap_action = "http://localhost:8080/kestrel/PassiveService"
    input = PassiveCancelServicePortTypeServiceInput
    output = PassiveCancelServicePortTypeServiceOutput


class PassiveReservationServicePortTypeService:
    style = "document"
    location = "http://localhost:8080/kestrel/PassiveService"
    transport = "http://schemas.xmlsoap.org/soap/http"
    soap_action = "http://localhost:8080/kestrel/PassiveService"
    input = PassiveReservationServicePortTypeServiceInput
    output = PassiveReservationServicePortTypeServiceOutput


class ProfileChildSearchPortTypeService:
    style = "document"
    location = "http://localhost:8080/kestrel/UProfileService"
    transport = "http://schemas.xmlsoap.org/soap/http"
    soap_action = "http://localhost:9080/kestrel/UProfileSharedService"
    input = ProfileChildSearchPortTypeServiceInput
    output = ProfileChildSearchPortTypeServiceOutput


class ProfileCreateFieldPortTypeService:
    style = "document"
    location = "http://localhost:8080/kestrel/UProfileService"
    transport = "http://schemas.xmlsoap.org/soap/http"
    soap_action = "http://localhost:9080/kestrel/UProfileSharedService"
    input = ProfileCreateFieldPortTypeServiceInput
    output = ProfileCreateFieldPortTypeServiceOutput


class ProfileCreateHierarchyLevelPortTypeService:
    style = "document"
    location = "http://localhost:8080/kestrel/UProfileService"
    transport = "http://schemas.xmlsoap.org/soap/http"
    soap_action = "http://localhost:8080/kestrel/UProfileService"
    input = ProfileCreateHierarchyLevelPortTypeServiceInput
    output = ProfileCreateHierarchyLevelPortTypeServiceOutput


class ProfileCreatePortTypeService:
    style = "document"
    location = "http://localhost:8080/kestrel/UProfileService"
    transport = "http://schemas.xmlsoap.org/soap/http"
    soap_action = "http://localhost:9080/kestrel/UProfileSharedService"
    input = ProfileCreatePortTypeServiceInput
    output = ProfileCreatePortTypeServiceOutput


class ProfileCreateTagsPortTypeService:
    style = "document"
    location = "http://localhost:8080/kestrel/UProfileService"
    transport = "http://schemas.xmlsoap.org/soap/http"
    soap_action = "http://localhost:9080/kestrel/UProfileSharedService"
    input = ProfileCreateTagsPortTypeServiceInput
    output = ProfileCreateTagsPortTypeServiceOutput


class ProfileDeleteHierarchyLevelPortTypeService:
    style = "document"
    location = "http://localhost:8080/kestrel/UProfileService"
    transport = "http://schemas.xmlsoap.org/soap/http"
    soap_action = "http://localhost:8080/kestrel/UProfileService"
    input = ProfileDeleteHierarchyLevelPortTypeServiceInput
    output = ProfileDeleteHierarchyLevelPortTypeServiceOutput


class ProfileDeletePortTypeService:
    style = "document"
    location = "http://localhost:8080/kestrel/UProfileService"
    transport = "http://schemas.xmlsoap.org/soap/http"
    soap_action = "http://localhost:9080/kestrel/UProfileSharedService"
    input = ProfileDeletePortTypeServiceInput
    output = ProfileDeletePortTypeServiceOutput


class ProfileDeleteTagPortTypeService:
    style = "document"
    location = "http://localhost:8080/kestrel/UProfileService"
    transport = "http://schemas.xmlsoap.org/soap/http"
    soap_action = "http://localhost:9080/kestrel/UProfileSharedService"
    input = ProfileDeleteTagPortTypeServiceInput
    output = ProfileDeleteTagPortTypeServiceOutput


class ProfileModifyBridgeBranchesPortTypeService:
    style = "document"
    location = "http://localhost:8080/kestrel/UProfileService"
    transport = "http://schemas.xmlsoap.org/soap/http"
    soap_action = "http://localhost:8080/kestrel/UProfileService"
    input = ProfileModifyBridgeBranchesPortTypeServiceInput
    output = ProfileModifyBridgeBranchesPortTypeServiceOutput


class ProfileModifyFieldPortTypeService:
    style = "document"
    location = "http://localhost:8080/kestrel/UProfileService"
    transport = "http://schemas.xmlsoap.org/soap/http"
    soap_action = "http://localhost:9080/kestrel/UProfileSharedService"
    input = ProfileModifyFieldPortTypeServiceInput
    output = ProfileModifyFieldPortTypeServiceOutput


class ProfileModifyHierarchyLevelPortTypeService:
    style = "document"
    location = "http://localhost:8080/kestrel/UProfileService"
    transport = "http://schemas.xmlsoap.org/soap/http"
    soap_action = "http://localhost:8080/kestrel/UProfileService"
    input = ProfileModifyHierarchyLevelPortTypeServiceInput
    output = ProfileModifyHierarchyLevelPortTypeServiceOutput


class ProfileModifyPortTypeService:
    style = "document"
    location = "http://localhost:8080/kestrel/UProfileService"
    transport = "http://schemas.xmlsoap.org/soap/http"
    soap_action = "http://localhost:9080/kestrel/UProfileSharedService"
    input = ProfileModifyPortTypeServiceInput
    output = ProfileModifyPortTypeServiceOutput


class ProfileModifyTagsPortTypeService:
    style = "document"
    location = "http://localhost:8080/kestrel/UProfileService"
    transport = "http://schemas.xmlsoap.org/soap/http"
    soap_action = "http://localhost:9080/kestrel/UProfileSharedService"
    input = ProfileModifyTagsPortTypeServiceInput
    output = ProfileModifyTagsPortTypeServiceOutput


class ProfileModifyTemplatePortTypeService:
    style = "document"
    location = "http://localhost:8080/kestrel/UProfileService"
    transport = "http://schemas.xmlsoap.org/soap/http"
    soap_action = "http://localhost:8080/kestrel/UProfileService"
    input = ProfileModifyTemplatePortTypeServiceInput
    output = ProfileModifyTemplatePortTypeServiceOutput


class ProfileRetrieveActionPortTypeService:
    style = "document"
    location = "http://localhost:8080/kestrel/UProfileService"
    transport = "http://schemas.xmlsoap.org/soap/http"
    soap_action = "http://localhost:8080/kestrel/UProfileService"
    input = ProfileRetrieveActionPortTypeServiceInput
    output = ProfileRetrieveActionPortTypeServiceOutput


class ProfileRetrieveBridgeBranchesPortTypeService:
    style = "document"
    location = "http://localhost:8080/kestrel/UProfileService"
    transport = "http://schemas.xmlsoap.org/soap/http"
    soap_action = "http://localhost:8080/kestrel/UProfileService"
    input = ProfileRetrieveBridgeBranchesPortTypeServiceInput
    output = ProfileRetrieveBridgeBranchesPortTypeServiceOutput


class ProfileRetrieveHierarchyPortTypeService:
    style = "document"
    location = "http://localhost:8080/kestrel/UProfileService"
    transport = "http://schemas.xmlsoap.org/soap/http"
    soap_action = "http://localhost:8080/kestrel/UProfileService"
    input = ProfileRetrieveHierarchyPortTypeServiceInput
    output = ProfileRetrieveHierarchyPortTypeServiceOutput


class ProfileRetrieveHistoryPortTypeService:
    style = "document"
    location = "http://localhost:8080/kestrel/UProfileService"
    transport = "http://schemas.xmlsoap.org/soap/http"
    soap_action = "http://localhost:9080/kestrel/UProfileSharedService"
    input = ProfileRetrieveHistoryPortTypeServiceInput
    output = ProfileRetrieveHistoryPortTypeServiceOutput


class ProfileRetrieveParentPortTypeService:
    style = "document"
    location = "http://localhost:9080/kestrel/UProfileSharedService"
    transport = "http://schemas.xmlsoap.org/soap/http"
    soap_action = "http://localhost:9080/kestrel/UProfileSharedService"
    input = ProfileRetrieveParentPortTypeServiceInput
    output = ProfileRetrieveParentPortTypeServiceOutput


class ProfileRetrievePortTypeService:
    style = "document"
    location = "http://localhost:8080/kestrel/UProfileService"
    transport = "http://schemas.xmlsoap.org/soap/http"
    soap_action = "http://localhost:9080/kestrel/UProfileSharedService"
    input = ProfileRetrievePortTypeServiceInput
    output = ProfileRetrievePortTypeServiceOutput


class ProfileRetrieveTemplatePortTypeService:
    style = "document"
    location = "http://localhost:8080/kestrel/UProfileService"
    transport = "http://schemas.xmlsoap.org/soap/http"
    soap_action = "http://localhost:8080/kestrel/UProfileService"
    input = ProfileRetrieveTemplatePortTypeServiceInput
    output = ProfileRetrieveTemplatePortTypeServiceOutput


class ProfileSearchActionPortTypeService:
    style = "document"
    location = "http://localhost:8080/kestrel/UProfileService"
    transport = "http://schemas.xmlsoap.org/soap/http"
    soap_action = "http://localhost:8080/kestrel/UProfileService"
    input = ProfileSearchActionPortTypeServiceInput
    output = ProfileSearchActionPortTypeServiceOutput


class ProfileSearchFieldPortTypeService:
    style = "document"
    location = "http://localhost:8080/kestrel/UProfileService"
    transport = "http://schemas.xmlsoap.org/soap/http"
    soap_action = "http://localhost:9080/kestrel/UProfileSharedService"
    input = ProfileSearchFieldPortTypeServiceInput
    output = ProfileSearchFieldPortTypeServiceOutput


class ProfileSearchPortTypeService:
    style = "document"
    location = "http://localhost:8080/kestrel/UProfileService"
    transport = "http://schemas.xmlsoap.org/soap/http"
    soap_action = "http://localhost:9080/kestrel/UProfileSharedService"
    input = ProfileSearchPortTypeServiceInput
    output = ProfileSearchPortTypeServiceOutput


class ProfileSearchTagsPortTypeService:
    style = "document"
    location = "http://localhost:8080/kestrel/UProfileService"
    transport = "http://schemas.xmlsoap.org/soap/http"
    soap_action = "http://localhost:9080/kestrel/UProfileSharedService"
    input = ProfileSearchTagsPortTypeServiceInput
    output = ProfileSearchTagsPortTypeServiceOutput


class ProviderReservationDisplayServicePortTypeService:
    style = "document"
    location = "http://localhost:8080/kestrel/ProviderReservationDisplayService"
    transport = "http://schemas.xmlsoap.org/soap/http"
    soap_action = "http://localhost:8080/kestrel/ProviderReservationDisplayService"
    input = ProviderReservationDisplayServicePortTypeServiceInput
    output = ProviderReservationDisplayServicePortTypeServiceOutput


class ProviderReservationDivideServicePortTypeService:
    style = "document"
    location = "http://localhost:8080/kestrel/UniversalRecordService"
    transport = "http://schemas.xmlsoap.org/soap/http"
    soap_action = "http://localhost:8080/kestrel/UniversalRecordService"
    input = ProviderReservationDivideServicePortTypeServiceInput
    output = ProviderReservationDivideServicePortTypeServiceOutput


class RailAvailabilitySearchPortTypeService:
    style = "document"
    location = "http://localhost:8080/kestrel/RailService"
    transport = "http://schemas.xmlsoap.org/soap/http"
    soap_action = "http://localhost:8080/kestrel/RailService"
    input = RailAvailabilitySearchPortTypeServiceInput
    output = RailAvailabilitySearchPortTypeServiceOutput


class RailCreateReservationPortTypeService:
    style = "document"
    location = "http://localhost:8080/kestrel/RailService"
    transport = "http://schemas.xmlsoap.org/soap/http"
    soap_action = "http://localhost:8080/kestrel/RailService"
    input = RailCreateReservationPortTypeServiceInput
    output = RailCreateReservationPortTypeServiceOutput


class RailExchangeCreateReservationPortTypeService:
    style = "document"
    location = "http://localhost:8080/kestrel/RailService"
    transport = "http://schemas.xmlsoap.org/soap/http"
    soap_action = "http://localhost:8080/kestrel/RailService"
    input = RailExchangeCreateReservationPortTypeServiceInput
    output = RailExchangeCreateReservationPortTypeServiceOutput


class RailExchangeQuotePortTypeService:
    style = "document"
    location = "http://localhost:8080/kestrel/RailService"
    transport = "http://schemas.xmlsoap.org/soap/http"
    soap_action = "http://localhost:8080/kestrel/RailService"
    input = RailExchangeQuotePortTypeServiceInput
    output = RailExchangeQuotePortTypeServiceOutput


class RailRefundPortTypeService:
    style = "document"
    location = "http://localhost:8080/kestrel/RailService"
    transport = "http://schemas.xmlsoap.org/soap/http"
    soap_action = "http://localhost:8080/kestrel/RailService"
    input = RailRefundPortTypeServiceInput
    output = RailRefundPortTypeServiceOutput


class RailRefundQuotePortTypeService:
    style = "document"
    location = "http://localhost:8080/kestrel/RailService"
    transport = "http://schemas.xmlsoap.org/soap/http"
    soap_action = "http://localhost:8080/kestrel/RailService"
    input = RailRefundQuotePortTypeServiceInput
    output = RailRefundQuotePortTypeServiceOutput


class RailSeatMapPortTypeService:
    style = "document"
    location = "http://localhost:8080/kestrel/RailService"
    transport = "http://schemas.xmlsoap.org/soap/http"
    soap_action = "http://localhost:8080/kestrel/RailService"
    input = RailSeatMapPortTypeServiceInput
    output = RailSeatMapPortTypeServiceOutput


class ReferenceDataLookupPortTypeService:
    style = "document"
    location = "http://localhost:8080/kestrel/ReferenceDataLookupService"
    transport = "http://schemas.xmlsoap.org/soap/http"
    soap_action = "http://localhost:8080/kestrel/ReferenceDataLookupService"
    input = ReferenceDataLookupPortTypeServiceInput
    output = ReferenceDataLookupPortTypeServiceOutput


class ReferenceDataRetrievePortTypeService:
    style = "document"
    location = "http://localhost:8080/kestrel/UtilService"
    transport = "http://schemas.xmlsoap.org/soap/http"
    soap_action = "http://localhost:8080/kestrel/UtilService"
    input = ReferenceDataRetrievePortTypeServiceInput
    output = ReferenceDataRetrievePortTypeServiceOutput


class ReferenceDataUpdatePortTypeService:
    style = "document"
    location = "http://localhost:8080/kestrel/UtilService"
    transport = "http://schemas.xmlsoap.org/soap/http"
    soap_action = "http://localhost:8080/kestrel/UtilService"
    input = ReferenceDataUpdatePortTypeServiceInput
    output = ReferenceDataUpdatePortTypeServiceOutput


class ReportRetrievePortTypeService:
    style = "document"
    location = "http://localhost:8080/kestrel/UtilService"
    transport = "http://schemas.xmlsoap.org/soap/http"
    soap_action = "http://localhost:8080/kestrel/UtilService"
    input = ReportRetrievePortTypeServiceInput
    output = ReportRetrievePortTypeServiceOutput


class SavedTripCreateServicePortTypeService:
    style = "document"
    location = "http://localhost:8080/kestrel/SavedTripCreateService"
    transport = "http://schemas.xmlsoap.org/soap/http"
    soap_action = "http://localhost:8080/kestrel/SavedTripCreateService"
    input = SavedTripCreateServicePortTypeServiceInput
    output = SavedTripCreateServicePortTypeServiceOutput


class SavedTripDeleteServicePortTypeService:
    style = "document"
    location = "http://localhost:8080/kestrel/SavedTripDeleteService"
    transport = "http://schemas.xmlsoap.org/soap/http"
    soap_action = "http://localhost:8080/kestrel/SavedTripDeleteService"
    input = SavedTripDeleteServicePortTypeServiceInput
    output = SavedTripDeleteServicePortTypeServiceOutput


class SavedTripModifyServicePortTypeService:
    style = "document"
    location = "http://localhost:8080/kestrel/SavedTripModifyService"
    transport = "http://schemas.xmlsoap.org/soap/http"
    soap_action = "http://localhost:8080/kestrel/SavedTripModifyService"
    input = SavedTripModifyServicePortTypeServiceInput
    output = SavedTripModifyServicePortTypeServiceOutput


class SavedTripRetrieveServicePortTypeService:
    style = "document"
    location = "http://localhost:8080/kestrel/SavedTripRetrieveService"
    transport = "http://schemas.xmlsoap.org/soap/http"
    soap_action = "http://localhost:8080/kestrel/SavedTripRetrieveService"
    input = SavedTripRetrieveServicePortTypeServiceInput
    output = SavedTripRetrieveServicePortTypeServiceOutput


class SavedTripSearchServicePortTypeService:
    style = "document"
    location = "http://localhost:8080/kestrel/SavedTripSearchService"
    transport = "http://schemas.xmlsoap.org/soap/http"
    soap_action = "http://localhost:8080/kestrel/SavedTripSearchService"
    input = SavedTripSearchServicePortTypeServiceInput
    output = SavedTripSearchServicePortTypeServiceOutput


class SeatMapPortTypeService:
    style = "document"
    location = "http://localhost:8080/kestrel/AirService"
    transport = "http://schemas.xmlsoap.org/soap/http"
    soap_action = "http://localhost:8080/kestrel/AirService"
    input = SeatMapPortTypeServiceInput
    output = SeatMapPortTypeServiceOutput


class SingleProfileMigrationPortTypeService:
    style = "document"
    location = "http://localhost:9080/kestrel/UProfileService"
    transport = "http://schemas.xmlsoap.org/soap/http"
    soap_action = "http://localhost:9080/kestrel/UProfileSharedService"
    input = SingleProfileMigrationPortTypeServiceInput
    output = SingleProfileMigrationPortTypeServiceOutput


class SystemInfoPortTypeService:
    style = "document"
    location = "http://localhost:8080/kestrel/SystemService"
    transport = "http://schemas.xmlsoap.org/soap/http"
    soap_action = "http://localhost:8080/kestrel/SystemService"
    input = SystemInfoPortTypeServiceInput
    output = SystemInfoPortTypeServiceOutput


class SystemPingPortTypeService:
    style = "document"
    location = "http://localhost:8080/kestrel/SystemService"
    transport = "http://schemas.xmlsoap.org/soap/http"
    soap_action = "http://localhost:8080/kestrel/SystemService"
    input = SystemPingPortTypeServiceInput
    output = SystemPingPortTypeServiceOutput


class SystemTimePortTypeService:
    style = "document"
    location = "http://localhost:8080/kestrel/SystemService"
    transport = "http://schemas.xmlsoap.org/soap/http"
    soap_action = "http://localhost:8080/kestrel/SystemService"
    input = SystemTimePortTypeServiceInput
    output = SystemTimePortTypeServiceOutput


class TerminalServicePortTypeService:
    style = "document"
    location = "http://localhost:8080/kestrel/TerminalService"
    transport = "http://schemas.xmlsoap.org/soap/http"
    soap_action = "http://localhost:8080/kestrel/TerminalService"
    input = TerminalServicePortTypeServiceInput
    output = TerminalServicePortTypeServiceOutput


class UimetaDataCreatePortTypeService:
    style = "document"
    location = "http://localhost:9080/kestrel/UProfileSharedService"
    transport = "http://schemas.xmlsoap.org/soap/http"
    soap_action = "http://localhost:9080/kestrel/UProfileSharedService"
    input = UimetaDataCreatePortTypeServiceInput
    output = UimetaDataCreatePortTypeServiceOutput


class UimetaDataDeletePortTypeService:
    style = "document"
    location = "http://localhost:9080/kestrel/UProfileSharedService"
    transport = "http://schemas.xmlsoap.org/soap/http"
    soap_action = "http://localhost:9080/kestrel/UProfileSharedService"
    input = UimetaDataDeletePortTypeServiceInput
    output = UimetaDataDeletePortTypeServiceOutput


class UimetaDataModifyPortTypeService:
    style = "document"
    location = "http://localhost:9080/kestrel/UProfileSharedService"
    transport = "http://schemas.xmlsoap.org/soap/http"
    soap_action = "http://localhost:9080/kestrel/UProfileSharedService"
    input = UimetaDataModifyPortTypeServiceInput
    output = UimetaDataModifyPortTypeServiceOutput


class UimetaDataRetrievePortTypeService:
    style = "document"
    location = "http://localhost:9080/kestrel/UProfileSharedService"
    transport = "http://schemas.xmlsoap.org/soap/http"
    soap_action = "http://localhost:9080/kestrel/UProfileSharedService"
    input = UimetaDataRetrievePortTypeServiceInput
    output = UimetaDataRetrievePortTypeServiceOutput


class UniversalRecordCancelServicePortTypeService:
    style = "document"
    location = "http://localhost:8080/kestrel/UniversalRecordService"
    transport = "http://schemas.xmlsoap.org/soap/http"
    soap_action = "http://localhost:8080/kestrel/UniversalRecordService"
    input = UniversalRecordCancelServicePortTypeServiceInput
    output = UniversalRecordCancelServicePortTypeServiceOutput


class UniversalRecordHistorySearchPortTypeService:
    style = "document"
    location = "http://localhost:8080/kestrel/UniversalRecordHistorySearchService"
    transport = "http://schemas.xmlsoap.org/soap/http"
    soap_action = "http://localhost:8080/kestrel/UniversalRecordHistorySearchService"
    input = UniversalRecordHistorySearchPortTypeServiceInput
    output = UniversalRecordHistorySearchPortTypeServiceOutput


class UniversalRecordImportServicePortTypeService:
    style = "document"
    location = "http://localhost:8080/kestrel/UniversalRecordService"
    transport = "http://schemas.xmlsoap.org/soap/http"
    soap_action = "http://localhost:8080/kestrel/UniversalRecordService"
    input = UniversalRecordImportServicePortTypeServiceInput
    output = UniversalRecordImportServicePortTypeServiceOutput


class UniversalRecordRetrieveServicePortTypeService:
    style = "document"
    location = "http://localhost:8080/kestrel/UniversalRecordService"
    transport = "http://schemas.xmlsoap.org/soap/http"
    soap_action = "http://localhost:8080/kestrel/UniversalRecordService"
    input = UniversalRecordRetrieveServicePortTypeServiceInput
    output = UniversalRecordRetrieveServicePortTypeServiceOutput


class UniversalRecordSearchServicePortTypeService:
    style = "document"
    location = "http://localhost:8080/kestrel/UniversalRecordService"
    transport = "http://schemas.xmlsoap.org/soap/http"
    soap_action = "http://localhost:8080/kestrel/UniversalRecordService"
    input = UniversalRecordSearchServicePortTypeServiceInput
    output = UniversalRecordSearchServicePortTypeServiceOutput


class UpsellAdminPortTypeService:
    style = "document"
    location = "http://localhost:8080/kestrel/UpsellAdminService"
    transport = "http://schemas.xmlsoap.org/soap/http"
    soap_action = "http://localhost:8080/kestrel/UpsellAdminService"
    input = UpsellAdminPortTypeServiceInput
    output = UpsellAdminPortTypeServiceOutput


class UpsellAdminSearchPortTypeService:
    style = "document"
    location = "http://localhost:8080/kestrel/UpsellAdminSearchService"
    transport = "http://schemas.xmlsoap.org/soap/http"
    soap_action = "http://localhost:8080/kestrel/UpsellAdminSearchService"
    input = UpsellAdminSearchPortTypeServiceInput
    output = UpsellAdminSearchPortTypeServiceOutput


class UtilCreditCardAuthPortTypeService:
    style = "document"
    location = "http://localhost:8080/kestrel/CreditCardAuthorizationService"
    transport = "http://schemas.xmlsoap.org/soap/http"
    soap_action = "http://localhost:8080/kestrel/CreditCardAuthorizationService"
    input = UtilCreditCardAuthPortTypeServiceInput
    output = UtilCreditCardAuthPortTypeServiceOutput


class UtilCurrencyConversionPortTypeService:
    style = "document"
    location = "http://localhost:8080/kestrel/CurrencyConversionService"
    transport = "http://schemas.xmlsoap.org/soap/http"
    soap_action = "http://localhost:8080/kestrel/CurrencyConversionService"
    input = UtilCurrencyConversionPortTypeServiceInput
    output = UtilCurrencyConversionPortTypeServiceOutput


class VehicleCancelServicePortTypeService:
    style = "document"
    location = "http://localhost:8080/kestrel/VehicleService"
    transport = "http://schemas.xmlsoap.org/soap/http"
    soap_action = "http://localhost:8080/kestrel/VehicleService"
    input = VehicleCancelServicePortTypeServiceInput
    output = VehicleCancelServicePortTypeServiceOutput


class VehicleKeywordsServicePortTypeService:
    style = "document"
    location = "http://localhost:8080/kestrel/VehicleService"
    transport = "http://schemas.xmlsoap.org/soap/http"
    soap_action = "http://localhost:8080/kestrel/VehicleService"
    input = VehicleKeywordsServicePortTypeServiceInput
    output = VehicleKeywordsServicePortTypeServiceOutput


class VehicleLocationDetailServicePortTypeService:
    style = "document"
    location = "http://localhost:8080/kestrel/VehicleService"
    transport = "http://schemas.xmlsoap.org/soap/http"
    soap_action = "http://localhost:8080/kestrel/VehicleService"
    input = VehicleLocationDetailServicePortTypeServiceInput
    output = VehicleLocationDetailServicePortTypeServiceOutput


class VehicleLocationServicePortTypeService:
    style = "document"
    location = "http://localhost:8080/kestrel/VehicleService"
    transport = "http://schemas.xmlsoap.org/soap/http"
    soap_action = "http://localhost:8080/kestrel/VehicleService"
    input = VehicleLocationServicePortTypeServiceInput
    output = VehicleLocationServicePortTypeServiceOutput


class VehicleMediaLinksServicePortTypeService:
    style = "document"
    location = "http://localhost:8080/kestrel/VehicleService"
    transport = "http://schemas.xmlsoap.org/soap/http"
    soap_action = "http://localhost:8080/kestrel/VehicleService"
    input = VehicleMediaLinksServicePortTypeServiceInput
    output = VehicleMediaLinksServicePortTypeServiceOutput


class VehicleReservationServicePortTypeService:
    style = "document"
    location = "http://localhost:8080/kestrel/VehicleService"
    transport = "http://schemas.xmlsoap.org/soap/http"
    soap_action = "http://localhost:8080/kestrel/VehicleService"
    input = VehicleReservationServicePortTypeServiceInput
    output = VehicleReservationServicePortTypeServiceOutput


class VehicleRetrieveServicePortTypeService:
    style = "document"
    location = "http://localhost:8080/kestrel/VehicleService"
    transport = "http://schemas.xmlsoap.org/soap/http"
    soap_action = "http://localhost:8080/kestrel/VehicleService"
    input = VehicleRetrieveServicePortTypeServiceInput
    output = VehicleRetrieveServicePortTypeServiceOutput


class VehicleRulesServicePortTypeService:
    style = "document"
    location = "http://localhost:8080/kestrel/VehicleService"
    transport = "http://schemas.xmlsoap.org/soap/http"
    soap_action = "http://localhost:8080/kestrel/VehicleService"
    input = VehicleRulesServicePortTypeServiceInput
    output = VehicleRulesServicePortTypeServiceOutput


class VehicleSearchServicePortTypeService:
    style = "document"
    location = "http://localhost:8080/kestrel/VehicleService"
    transport = "http://schemas.xmlsoap.org/soap/http"
    soap_action = "http://localhost:8080/kestrel/VehicleService"
    input = VehicleSearchServicePortTypeServiceInput
    output = VehicleSearchServicePortTypeServiceOutput


class VehicleUpsellSearchServicePortTypeService:
    style = "document"
    location = "http://localhost:8080/kestrel/VehicleService"
    transport = "http://schemas.xmlsoap.org/soap/http"
    soap_action = "http://localhost:8080/kestrel/VehicleService"
    input = VehicleUpsellSearchServicePortTypeServiceInput
    output = VehicleUpsellSearchServicePortTypeServiceOutput


@dataclass
class AccountRelatedRules:
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    booking_rules: List[BookingRules] = field(
        default_factory=list,
        metadata={
            "name": "BookingRules",
            "type": "Element",
            "max_occurs": 999,
        }
    )
    routing_rules: Optional[RoutingRules] = field(
        default=None,
        metadata={
            "name": "RoutingRules",
            "type": "Element",
        }
    )


@dataclass
class AirExchangeBundleList:
    """
    The shared object list of AirsegmentData.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    air_exchange_bundle: List[AirExchangeBundle] = field(
        default_factory=list,
        metadata={
            "name": "AirExchangeBundle",
            "type": "Element",
            "min_occurs": 1,
            "max_occurs": 999,
        }
    )


@dataclass
class AirFareDisplayModifiers:
    """
    :ivar trip_type:
    :ivar cabin_class:
    :ivar penalty_fare_information: Request Fares with specific Penalty
        Information.
    :ivar fare_search_option:
    :ivar max_responses:
    :ivar departure_date:
    :ivar ticketing_date:
    :ivar return_date:
    :ivar base_fare_only:
    :ivar unrestricted_fares_only:
    :ivar fares_indicator: Indicates whether only public fares should be
        returned or specific type of private fares
    :ivar currency_type:
    :ivar include_taxes:
    :ivar include_estimated_taxes: Indicates to include estimated taxes
        i.e. if set to true estimated total fare,base fare and taxes
        would be returned.
    :ivar include_surcharges:
    :ivar global_indicator:
    :ivar prohibit_min_stay_fares:
    :ivar prohibit_max_stay_fares:
    :ivar prohibit_advance_purchase_fares:
    :ivar prohibit_non_refundable_fares: Indicates whether it prohibits
        NonRefundable Fares.
    :ivar validated_fares_only: Indicates that the requested Fares
        should be Validated Fares only. If set to true, then only valid
        fares will be returned. If set to false, both valid and non
        valid fares will be returned. If not sent, then no validation
        will be done. All fares will be returned.
    :ivar prohibit_travel_restricted_fares: Indicates that the Fares not
        complying Travel Restrictions and Seasonality fare rules are
        prohibited
    :ivar filed_currency: Represents the filed currency of the fare
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    trip_type: List[TypeFareTripType] = field(
        default_factory=list,
        metadata={
            "name": "TripType",
            "type": "Element",
            "max_occurs": 3,
        }
    )
    cabin_class: Optional[CabinClass] = field(
        default=None,
        metadata={
            "name": "CabinClass",
            "type": "Element",
            "namespace": "http://www.travelport.com/schema/common_v52_0",
        }
    )
    penalty_fare_information: Optional[PenaltyFareInformation] = field(
        default=None,
        metadata={
            "name": "PenaltyFareInformation",
            "type": "Element",
        }
    )
    fare_search_option: List[TypeFareSearchOption] = field(
        default_factory=list,
        metadata={
            "name": "FareSearchOption",
            "type": "Element",
            "max_occurs": 5,
        }
    )
    max_responses: int = field(
        default=200,
        metadata={
            "name": "MaxResponses",
            "type": "Attribute",
        }
    )
    departure_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "DepartureDate",
            "type": "Attribute",
        }
    )
    ticketing_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "TicketingDate",
            "type": "Attribute",
        }
    )
    return_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "ReturnDate",
            "type": "Attribute",
        }
    )
    base_fare_only: bool = field(
        default=False,
        metadata={
            "name": "BaseFareOnly",
            "type": "Attribute",
        }
    )
    unrestricted_fares_only: bool = field(
        default=False,
        metadata={
            "name": "UnrestrictedFaresOnly",
            "type": "Attribute",
        }
    )
    fares_indicator: Optional[TypeFaresIndicator] = field(
        default=None,
        metadata={
            "name": "FaresIndicator",
            "type": "Attribute",
        }
    )
    currency_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "CurrencyType",
            "type": "Attribute",
            "length": 3,
        }
    )
    include_taxes: Optional[bool] = field(
        default=None,
        metadata={
            "name": "IncludeTaxes",
            "type": "Attribute",
        }
    )
    include_estimated_taxes: Optional[bool] = field(
        default=None,
        metadata={
            "name": "IncludeEstimatedTaxes",
            "type": "Attribute",
        }
    )
    include_surcharges: Optional[bool] = field(
        default=None,
        metadata={
            "name": "IncludeSurcharges",
            "type": "Attribute",
        }
    )
    global_indicator: Optional[TypeAtpcoglobalIndicator] = field(
        default=None,
        metadata={
            "name": "GlobalIndicator",
            "type": "Attribute",
        }
    )
    prohibit_min_stay_fares: bool = field(
        default=False,
        metadata={
            "name": "ProhibitMinStayFares",
            "type": "Attribute",
        }
    )
    prohibit_max_stay_fares: bool = field(
        default=False,
        metadata={
            "name": "ProhibitMaxStayFares",
            "type": "Attribute",
        }
    )
    prohibit_advance_purchase_fares: bool = field(
        default=False,
        metadata={
            "name": "ProhibitAdvancePurchaseFares",
            "type": "Attribute",
        }
    )
    prohibit_non_refundable_fares: bool = field(
        default=False,
        metadata={
            "name": "ProhibitNonRefundableFares",
            "type": "Attribute",
        }
    )
    validated_fares_only: Optional[bool] = field(
        default=None,
        metadata={
            "name": "ValidatedFaresOnly",
            "type": "Attribute",
        }
    )
    prohibit_travel_restricted_fares: bool = field(
        default=True,
        metadata={
            "name": "ProhibitTravelRestrictedFares",
            "type": "Attribute",
        }
    )
    filed_currency: Optional[str] = field(
        default=None,
        metadata={
            "name": "FiledCurrency",
            "type": "Attribute",
            "length": 3,
        }
    )


@dataclass
class AirItinerarySolution:
    """
    The pricing container for an air travel itinerary.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    air_segment_ref: List[AirSegmentRef] = field(
        default_factory=list,
        metadata={
            "name": "AirSegmentRef",
            "type": "Element",
            "max_occurs": 999,
        }
    )
    connection: List[Connection] = field(
        default_factory=list,
        metadata={
            "name": "Connection",
            "type": "Element",
            "max_occurs": 999,
        }
    )
    key: Optional[str] = field(
        default=None,
        metadata={
            "name": "Key",
            "type": "Attribute",
            "required": True,
        }
    )


@dataclass
class AirPricingModifiers:
    """
    Controls and switches for a Air Search request that contains Pricing
    Information.

    :ivar prohibited_rule_categories:
    :ivar account_codes:
    :ivar permitted_cabins:
    :ivar contract_codes:
    :ivar exempt_taxes:
    :ivar penalty_fare_information: Request Fares with specific Penalty
        Information.
    :ivar discount_card: Discount request for rail.
    :ivar promo_codes:
    :ivar manual_fare_adjustment: Represents increment/discount applied
        manually by agent.
    :ivar point_of_sale: User can use this node to send a specific PCC
        to access fares allowed only for that PCC. This node gives the
        capability for fare redistribution at stored fare level. As
        multiple UAPI AirPricingInfos (all having same
        AirPricingInfoGroup) can converge to a single stored fare, UAPI
        will map PoinOfSale information from the first available one
        from each group
    :ivar brand_modifiers: Used to specify the level of branding
        requested.
    :ivar multi_gdssearch_indicator:
    :ivar preferred_cabins:
    :ivar prohibit_min_stay_fares:
    :ivar prohibit_max_stay_fares:
    :ivar currency_type:
    :ivar prohibit_advance_purchase_fares:
    :ivar prohibit_non_refundable_fares:
    :ivar prohibit_restricted_fares:
    :ivar fares_indicator: Indicates whether only public fares should be
        returned or specific type of private fares
    :ivar filed_currency: Currency in which Fares/Prices will be filed
        if supported by the supplier else approximated to.
    :ivar plating_carrier: The Plating Carrier for this journey.
    :ivar override_carrier: The Plating Carrier for this journey.
    :ivar eticketability: Request a search based on whether only
        E-ticketable fares are required.
    :ivar account_code_fares_only: Indicates whether or not the private
        fares returned should be restricted to only those specific to
        the input account code and contract code.
    :ivar key:
    :ivar prohibit_non_exchangeable_fares:
    :ivar force_segment_select: This indicator allows agent to force
        segment select option in host while selecting all air segments
        to store price on a PNR. This is relevent only when agent
        selects all air segmnets to price. if agent selects specific
        segments to price then this attribute will be ignored by the
        system. This is currently used by Worldspan only.
    :ivar inventory_request_type: This allows user to make request for a
        particular source of inventory for pricing modifier purposes.
    :ivar one_way_shop: Via this attribute one way shop can be
        requested. Applicable provider is 1G
    :ivar prohibit_unbundled_fare_types: A "True" value wiill remove
        fares with EOU and ERU fare types from consideration. A "False"
        value is the same as no value.  Default is no value. Applicable
        providers:  1P/1G/1V
    :ivar return_services: When set to false, ATPCO filed Optional
        Services will not be returned. Default is false. Provider: 1G,
        1V, 1P
    :ivar channel_id: A Channel ID is 2 to 4 alpha-numeric characters
        used to activate the Search Control Console filter for a
        specific group of travelers being served by the agency
        credential.
    :ivar return_fare_attributes: Returns attributes that are associated
        to a fare
    :ivar sell_check: Checks if the segment is bookable before pricing
    :ivar return_failed_segments: If "true", returns failed segments
        information.
    :ivar sell_city: City Code identifying where the ticket is to be
        sold.
    :ivar ticketing_city: City Code identifying where the ticket will be
        issued.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    prohibited_rule_categories: Optional["AirPricingModifiers.ProhibitedRuleCategories"] = field(
        default=None,
        metadata={
            "name": "ProhibitedRuleCategories",
            "type": "Element",
        }
    )
    account_codes: Optional["AirPricingModifiers.AccountCodes"] = field(
        default=None,
        metadata={
            "name": "AccountCodes",
            "type": "Element",
        }
    )
    permitted_cabins: Optional[PermittedCabins] = field(
        default=None,
        metadata={
            "name": "PermittedCabins",
            "type": "Element",
        }
    )
    contract_codes: Optional["AirPricingModifiers.ContractCodes"] = field(
        default=None,
        metadata={
            "name": "ContractCodes",
            "type": "Element",
        }
    )
    exempt_taxes: Optional[ExemptTaxes] = field(
        default=None,
        metadata={
            "name": "ExemptTaxes",
            "type": "Element",
        }
    )
    penalty_fare_information: Optional[PenaltyFareInformation] = field(
        default=None,
        metadata={
            "name": "PenaltyFareInformation",
            "type": "Element",
        }
    )
    discount_card: List[DiscountCard] = field(
        default_factory=list,
        metadata={
            "name": "DiscountCard",
            "type": "Element",
            "namespace": "http://www.travelport.com/schema/common_v52_0",
            "max_occurs": 9,
        }
    )
    promo_codes: Optional["AirPricingModifiers.PromoCodes"] = field(
        default=None,
        metadata={
            "name": "PromoCodes",
            "type": "Element",
        }
    )
    manual_fare_adjustment: List[ManualFareAdjustment] = field(
        default_factory=list,
        metadata={
            "name": "ManualFareAdjustment",
            "type": "Element",
            "max_occurs": 999,
        }
    )
    point_of_sale: Optional[PointOfSale] = field(
        default=None,
        metadata={
            "name": "PointOfSale",
            "type": "Element",
            "namespace": "http://www.travelport.com/schema/common_v52_0",
        }
    )
    brand_modifiers: Optional[BrandModifiers] = field(
        default=None,
        metadata={
            "name": "BrandModifiers",
            "type": "Element",
        }
    )
    multi_gdssearch_indicator: List[MultiGdssearchIndicator] = field(
        default_factory=list,
        metadata={
            "name": "MultiGDSSearchIndicator",
            "type": "Element",
            "max_occurs": 999,
        }
    )
    preferred_cabins: List[PreferredCabins] = field(
        default_factory=list,
        metadata={
            "name": "PreferredCabins",
            "type": "Element",
            "max_occurs": 99,
        }
    )
    prohibit_min_stay_fares: bool = field(
        default=False,
        metadata={
            "name": "ProhibitMinStayFares",
            "type": "Attribute",
        }
    )
    prohibit_max_stay_fares: bool = field(
        default=False,
        metadata={
            "name": "ProhibitMaxStayFares",
            "type": "Attribute",
        }
    )
    currency_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "CurrencyType",
            "type": "Attribute",
            "length": 3,
        }
    )
    prohibit_advance_purchase_fares: bool = field(
        default=False,
        metadata={
            "name": "ProhibitAdvancePurchaseFares",
            "type": "Attribute",
        }
    )
    prohibit_non_refundable_fares: bool = field(
        default=False,
        metadata={
            "name": "ProhibitNonRefundableFares",
            "type": "Attribute",
        }
    )
    prohibit_restricted_fares: bool = field(
        default=False,
        metadata={
            "name": "ProhibitRestrictedFares",
            "type": "Attribute",
        }
    )
    fares_indicator: Optional[TypeFaresIndicator] = field(
        default=None,
        metadata={
            "name": "FaresIndicator",
            "type": "Attribute",
        }
    )
    filed_currency: Optional[str] = field(
        default=None,
        metadata={
            "name": "FiledCurrency",
            "type": "Attribute",
            "length": 3,
        }
    )
    plating_carrier: Optional[str] = field(
        default=None,
        metadata={
            "name": "PlatingCarrier",
            "type": "Attribute",
            "length": 2,
        }
    )
    override_carrier: Optional[str] = field(
        default=None,
        metadata={
            "name": "OverrideCarrier",
            "type": "Attribute",
            "length": 2,
        }
    )
    eticketability: Optional[TypeEticketability] = field(
        default=None,
        metadata={
            "name": "ETicketability",
            "type": "Attribute",
        }
    )
    account_code_fares_only: Optional[bool] = field(
        default=None,
        metadata={
            "name": "AccountCodeFaresOnly",
            "type": "Attribute",
        }
    )
    key: Optional[str] = field(
        default=None,
        metadata={
            "name": "Key",
            "type": "Attribute",
        }
    )
    prohibit_non_exchangeable_fares: bool = field(
        default=False,
        metadata={
            "name": "ProhibitNonExchangeableFares",
            "type": "Attribute",
        }
    )
    force_segment_select: bool = field(
        default=False,
        metadata={
            "name": "ForceSegmentSelect",
            "type": "Attribute",
        }
    )
    inventory_request_type: Optional[TypeInventoryRequest] = field(
        default=None,
        metadata={
            "name": "InventoryRequestType",
            "type": "Attribute",
        }
    )
    one_way_shop: bool = field(
        default=False,
        metadata={
            "name": "OneWayShop",
            "type": "Attribute",
        }
    )
    prohibit_unbundled_fare_types: Optional[bool] = field(
        default=None,
        metadata={
            "name": "ProhibitUnbundledFareTypes",
            "type": "Attribute",
        }
    )
    return_services: bool = field(
        default=False,
        metadata={
            "name": "ReturnServices",
            "type": "Attribute",
        }
    )
    channel_id: Optional[str] = field(
        default=None,
        metadata={
            "name": "ChannelId",
            "type": "Attribute",
            "min_length": 2,
            "max_length": 4,
        }
    )
    return_fare_attributes: bool = field(
        default=False,
        metadata={
            "name": "ReturnFareAttributes",
            "type": "Attribute",
        }
    )
    sell_check: bool = field(
        default=False,
        metadata={
            "name": "SellCheck",
            "type": "Attribute",
        }
    )
    return_failed_segments: bool = field(
        default=False,
        metadata={
            "name": "ReturnFailedSegments",
            "type": "Attribute",
        }
    )
    sell_city: Optional[str] = field(
        default=None,
        metadata={
            "name": "SellCity",
            "type": "Attribute",
            "length": 3,
        }
    )
    ticketing_city: Optional[str] = field(
        default=None,
        metadata={
            "name": "TicketingCity",
            "type": "Attribute",
            "length": 3,
        }
    )

    @dataclass
    class ProhibitedRuleCategories:
        fare_rule_category: List[FareRuleCategory] = field(
            default_factory=list,
            metadata={
                "name": "FareRuleCategory",
                "type": "Element",
                "min_occurs": 1,
                "max_occurs": 999,
            }
        )

    @dataclass
    class AccountCodes:
        """
        :ivar account_code: Used to get negotiated pricing.
            Provider:ACH.
        """
        account_code: List[AccountCode] = field(
            default_factory=list,
            metadata={
                "name": "AccountCode",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/common_v52_0",
                "min_occurs": 1,
                "max_occurs": 999,
            }
        )

    @dataclass
    class ContractCodes:
        contract_code: List[ContractCode] = field(
            default_factory=list,
            metadata={
                "name": "ContractCode",
                "type": "Element",
                "min_occurs": 1,
                "max_occurs": 999,
            }
        )

    @dataclass
    class PromoCodes:
        promo_code: List[PromoCode] = field(
            default_factory=list,
            metadata={
                "name": "PromoCode",
                "type": "Element",
                "min_occurs": 1,
                "max_occurs": 999,
            }
        )


@dataclass
class AlternateRouteList:
    """
    Identifies the alternate routes for the request.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    alternate_route: List[AlternateRoute] = field(
        default_factory=list,
        metadata={
            "name": "AlternateRoute",
            "type": "Element",
            "min_occurs": 1,
            "max_occurs": 999,
        }
    )


@dataclass
class BagDetails:
    """
    Information related to Bag details .

    :ivar baggage_restriction:
    :ivar available_discount:
    :ivar applicable_bags: Applicable baggage like Carry-On,1st Check-
        in,2nd Check -in etc.
    :ivar base_price:
    :ivar approximate_base_price:
    :ivar taxes:
    :ivar total_price:
    :ivar approximate_total_price:
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    baggage_restriction: List[BaggageRestriction] = field(
        default_factory=list,
        metadata={
            "name": "BaggageRestriction",
            "type": "Element",
            "max_occurs": 999,
        }
    )
    available_discount: List[AvailableDiscount] = field(
        default_factory=list,
        metadata={
            "name": "AvailableDiscount",
            "type": "Element",
            "max_occurs": 999,
        }
    )
    applicable_bags: Optional[str] = field(
        default=None,
        metadata={
            "name": "ApplicableBags",
            "type": "Attribute",
            "required": True,
        }
    )
    base_price: Optional[str] = field(
        default=None,
        metadata={
            "name": "BasePrice",
            "type": "Attribute",
        }
    )
    approximate_base_price: Optional[str] = field(
        default=None,
        metadata={
            "name": "ApproximateBasePrice",
            "type": "Attribute",
        }
    )
    taxes: Optional[str] = field(
        default=None,
        metadata={
            "name": "Taxes",
            "type": "Attribute",
        }
    )
    total_price: Optional[str] = field(
        default=None,
        metadata={
            "name": "TotalPrice",
            "type": "Attribute",
        }
    )
    approximate_total_price: Optional[str] = field(
        default=None,
        metadata={
            "name": "ApproximateTotalPrice",
            "type": "Attribute",
        }
    )


@dataclass
class CarryOnAllowanceInfo(BaseBaggageAllowanceInfo):
    """
    Information related to Carry-On allowance like URL, pricing etc.

    :ivar carry_on_details: Information related to Carry-On Bag details
        .
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    carry_on_details: List["CarryOnAllowanceInfo.CarryOnDetails"] = field(
        default_factory=list,
        metadata={
            "name": "CarryOnDetails",
            "type": "Element",
            "max_occurs": 999,
        }
    )

    @dataclass
    class CarryOnDetails:
        """
        :ivar baggage_restriction:
        :ivar applicable_carry_on_bags: Applicable Carry-On baggage
            "First", "Second", "Third" etc
        :ivar base_price:
        :ivar approximate_base_price:
        :ivar taxes:
        :ivar total_price:
        :ivar approximate_total_price:
        """
        baggage_restriction: List[BaggageRestriction] = field(
            default_factory=list,
            metadata={
                "name": "BaggageRestriction",
                "type": "Element",
                "max_occurs": 99,
            }
        )
        applicable_carry_on_bags: Optional[str] = field(
            default=None,
            metadata={
                "name": "ApplicableCarryOnBags",
                "type": "Attribute",
            }
        )
        base_price: Optional[str] = field(
            default=None,
            metadata={
                "name": "BasePrice",
                "type": "Attribute",
            }
        )
        approximate_base_price: Optional[str] = field(
            default=None,
            metadata={
                "name": "ApproximateBasePrice",
                "type": "Attribute",
            }
        )
        taxes: Optional[str] = field(
            default=None,
            metadata={
                "name": "Taxes",
                "type": "Attribute",
            }
        )
        total_price: Optional[str] = field(
            default=None,
            metadata={
                "name": "TotalPrice",
                "type": "Attribute",
            }
        )
        approximate_total_price: Optional[str] = field(
            default=None,
            metadata={
                "name": "ApproximateTotalPrice",
                "type": "Attribute",
            }
        )


@dataclass
class DefaultBrandDetail(TypeDefaultBrandDetail):
    """
    Applicable air segment.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"


@dataclass
class DocumentInfo:
    """
    Container for the document information summary line.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    ticket_info: List[TicketInfo] = field(
        default_factory=list,
        metadata={
            "name": "TicketInfo",
            "type": "Element",
            "max_occurs": 999,
        }
    )
    mcoinfo: List[Mcoinformation] = field(
        default_factory=list,
        metadata={
            "name": "MCOInfo",
            "type": "Element",
            "max_occurs": 999,
        }
    )
    tcrinfo: List[Tcrinfo] = field(
        default_factory=list,
        metadata={
            "name": "TCRInfo",
            "type": "Element",
            "max_occurs": 999,
        }
    )


@dataclass
class Emdinfo:
    """This is the parent container to display EMD information.

    Occurrence of multiple unique EMDs inside this container indicate
    that those EMDs are conjunctive to each other. Supported providers
    are 1G/1V/1P

    :ivar emdtraveler_info: Basic information of the traveler associated
        with this EMDInfo.
    :ivar supplier_locator: List of Supplier Locator information that is
        associated with this document
    :ivar electronic_misc_document: Electronic miscellaneous
        documents.As an EMDInfo container displays all the EMDs which
        are in conjunction, there can be maximum 4
        ElectronicMiscDocuments present in an EMDInfo
    :ivar payment: Payment charged for EMD isuance
    :ivar form_of_payment: FormOfPayment used for issuing these
        electronic miscellaneous documents
    :ivar emdpricing_info: Fare related information for these electronic
        miscellaneous documents
    :ivar emdendorsement:
    :ivar fare_calc: Infomration about the fare calculation
    :ivar emdcommission: Commission information applied during EMD
        issuance
    :ivar provider_code:
    :ivar provider_locator_code:
    :ivar supplier_code: Represents Carrier Code for ACH PNR Retrieve.
    :ivar key: System generated Key
    :ivar el_stat: This attribute is used to show the action results of
        an element. Possible values are "A" (when elements have been
        added to the UR) and "M" (when existing elements have been
        modified). Response only.
    :ivar key_override: If a duplicate key is found where we are adding
        elements in some cases like URAdd, then instead of erroring out
        set this attribute to true.
    """
    class Meta:
        name = "EMDInfo"
        namespace = "http://www.travelport.com/schema/air_v52_0"

    emdtraveler_info: Optional[EmdtravelerInfo] = field(
        default=None,
        metadata={
            "name": "EMDTravelerInfo",
            "type": "Element",
            "required": True,
        }
    )
    supplier_locator: List[SupplierLocator] = field(
        default_factory=list,
        metadata={
            "name": "SupplierLocator",
            "type": "Element",
            "namespace": "http://www.travelport.com/schema/common_v52_0",
            "max_occurs": 999,
        }
    )
    electronic_misc_document: List[ElectronicMiscDocument] = field(
        default_factory=list,
        metadata={
            "name": "ElectronicMiscDocument",
            "type": "Element",
            "min_occurs": 1,
            "max_occurs": 999,
        }
    )
    payment: Optional[Payment] = field(
        default=None,
        metadata={
            "name": "Payment",
            "type": "Element",
            "namespace": "http://www.travelport.com/schema/common_v52_0",
        }
    )
    form_of_payment: Optional[FormOfPayment] = field(
        default=None,
        metadata={
            "name": "FormOfPayment",
            "type": "Element",
            "namespace": "http://www.travelport.com/schema/common_v52_0",
        }
    )
    emdpricing_info: Optional[EmdpricingInfo] = field(
        default=None,
        metadata={
            "name": "EMDPricingInfo",
            "type": "Element",
        }
    )
    emdendorsement: List[str] = field(
        default_factory=list,
        metadata={
            "name": "EMDEndorsement",
            "type": "Element",
            "max_occurs": 999,
            "min_length": 1,
            "max_length": 255,
        }
    )
    fare_calc: Optional[str] = field(
        default=None,
        metadata={
            "name": "FareCalc",
            "type": "Element",
        }
    )
    emdcommission: Optional[Emdcommission] = field(
        default=None,
        metadata={
            "name": "EMDCommission",
            "type": "Element",
        }
    )
    provider_code: Optional[str] = field(
        default=None,
        metadata={
            "name": "ProviderCode",
            "type": "Attribute",
            "required": True,
            "min_length": 2,
            "max_length": 5,
        }
    )
    provider_locator_code: Optional[str] = field(
        default=None,
        metadata={
            "name": "ProviderLocatorCode",
            "type": "Attribute",
            "required": True,
            "max_length": 15,
        }
    )
    supplier_code: Optional[str] = field(
        default=None,
        metadata={
            "name": "SupplierCode",
            "type": "Attribute",
            "min_length": 1,
            "max_length": 5,
        }
    )
    key: Optional[str] = field(
        default=None,
        metadata={
            "name": "Key",
            "type": "Attribute",
        }
    )
    el_stat: Optional[TypeElementStatus] = field(
        default=None,
        metadata={
            "name": "ElStat",
            "type": "Attribute",
        }
    )
    key_override: Optional[bool] = field(
        default=None,
        metadata={
            "name": "KeyOverride",
            "type": "Attribute",
        }
    )


@dataclass
class EmdsummaryInfo:
    """Container for EMD summary information.

    Supported providers are 1G/1V/1P

    :ivar emdsummary: Summary information for EMDs conjuncted to each
        other.
    :ivar emdtraveler_info: EMD traveler information.
    :ivar payment: Payment charged to issue EMD.
    :ivar provider_reservation_info_ref: A reference to the provider
        reservation with which the document is associated.Displayed when
        shown as part of UR.Not displayed in EMDRetrieveRsp
    :ivar key: System generated Key
    :ivar el_stat: This attribute is used to show the action results of
        an element. Possible values are "A" (when elements have been
        added to the UR) and "M" (when existing elements have been
        modified). Response only.
    :ivar key_override: If a duplicate key is found where we are adding
        elements in some cases like URAdd, then instead of erroring out
        set this attribute to true.
    """
    class Meta:
        name = "EMDSummaryInfo"
        namespace = "http://www.travelport.com/schema/air_v52_0"

    emdsummary: List[Emdsummary] = field(
        default_factory=list,
        metadata={
            "name": "EMDSummary",
            "type": "Element",
            "min_occurs": 1,
            "max_occurs": 999,
        }
    )
    emdtraveler_info: Optional[EmdtravelerInfo] = field(
        default=None,
        metadata={
            "name": "EMDTravelerInfo",
            "type": "Element",
            "required": True,
        }
    )
    payment: Optional[Payment] = field(
        default=None,
        metadata={
            "name": "Payment",
            "type": "Element",
            "namespace": "http://www.travelport.com/schema/common_v52_0",
        }
    )
    provider_reservation_info_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "ProviderReservationInfoRef",
            "type": "Attribute",
        }
    )
    key: Optional[str] = field(
        default=None,
        metadata={
            "name": "Key",
            "type": "Attribute",
        }
    )
    el_stat: Optional[TypeElementStatus] = field(
        default=None,
        metadata={
            "name": "ElStat",
            "type": "Attribute",
        }
    )
    key_override: Optional[bool] = field(
        default=None,
        metadata={
            "name": "KeyOverride",
            "type": "Attribute",
        }
    )


@dataclass
class ExpertSolutionList:
    """
    Identifies the Expert Solutions retrieved from the Knowledge Base.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    expert_solution: List[ExpertSolution] = field(
        default_factory=list,
        metadata={
            "name": "ExpertSolution",
            "type": "Element",
            "min_occurs": 1,
            "max_occurs": 999,
        }
    )


@dataclass
class FareDisplayRule:
    """
    Fare Display Rule Container.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    rule_advanced_purchase: Optional[RuleAdvancedPurchase] = field(
        default=None,
        metadata={
            "name": "RuleAdvancedPurchase",
            "type": "Element",
        }
    )
    rule_length_of_stay: Optional[RuleLengthOfStay] = field(
        default=None,
        metadata={
            "name": "RuleLengthOfStay",
            "type": "Element",
        }
    )
    rule_charges: Optional[RuleCharges] = field(
        default=None,
        metadata={
            "name": "RuleCharges",
            "type": "Element",
        }
    )
    rule_number: Optional[str] = field(
        default=None,
        metadata={
            "name": "RuleNumber",
            "type": "Attribute",
        }
    )
    source: Optional[str] = field(
        default=None,
        metadata={
            "name": "Source",
            "type": "Attribute",
        }
    )
    tariff_number: Optional[str] = field(
        default=None,
        metadata={
            "name": "TariffNumber",
            "type": "Attribute",
        }
    )


@dataclass
class FareRuleCategoryTypes:
    """
    :ivar category_details: To indicate details of which category is
        displayed
    :ivar variable_category_details: If the specified category of
        Structured Fare Rules is of variable lenght
    :ivar value:
    """
    class Meta:
        target_namespace = "http://www.travelport.com/schema/air_v52_0"

    category_details: List[ValueDetails] = field(
        default_factory=list,
        metadata={
            "name": "CategoryDetails",
            "type": "Element",
            "namespace": "http://www.travelport.com/schema/air_v52_0",
            "max_occurs": 99,
        }
    )
    variable_category_details: List[VariableCategoryType] = field(
        default_factory=list,
        metadata={
            "name": "VariableCategoryDetails",
            "type": "Element",
            "namespace": "http://www.travelport.com/schema/air_v52_0",
            "max_occurs": 99,
        }
    )
    value: Optional[str] = field(
        default=None,
        metadata={
            "name": "Value",
            "type": "Attribute",
            "required": True,
        }
    )


@dataclass
class FaxDetailsInformation:
    """
    Container to send Fax details Information for ticketing.

    :ivar air_pricing_info_ref: Returns related air pricing infos.
    :ivar fax_details:
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    air_pricing_info_ref: List[AirPricingInfoRef] = field(
        default_factory=list,
        metadata={
            "name": "AirPricingInfoRef",
            "type": "Element",
            "min_occurs": 1,
            "max_occurs": 999,
        }
    )
    fax_details: Optional[FaxDetails] = field(
        default=None,
        metadata={
            "name": "FaxDetails",
            "type": "Element",
            "required": True,
        }
    )


@dataclass
class FlightDetails:
    """
    Specific details within a flight segment.

    :ivar connection:
    :ivar meals:
    :ivar in_flight_services:
    :ivar key:
    :ivar origin: The IATA location code for this origination of this
        entity.
    :ivar destination: The IATA location code for this destination of
        this entity.
    :ivar departure_time: The date and time at which this entity
        departs. Date and time are represented as Airport Local Time at
        the place of departure. The correct time zone offset is also
        included.
    :ivar arrival_time: The date and time at which this entity arrives
        at the destination. Date and time are represented as Airport
        Local Time at the place of arrival. The correct time zone offset
        is also included.
    :ivar flight_time: Time spent (minutes) traveling in flight,
        including airport taxi time.
    :ivar travel_time: Total time spent (minutes) traveling including
        flight time and ground time.
    :ivar distance: The distance traveled. Units are specified in the
        parent response element.
    :ivar equipment:
    :ivar on_time_performance: Represents flight on time performance as
        a percentage from 0 to 100
    :ivar origin_terminal:
    :ivar destination_terminal:
    :ivar ground_time:
    :ivar automated_checkin: “True” indicates that the flight allows
        automated check-in. The default is “False”.
    :ivar el_stat: This attribute is used to show the action results of
        an element. Possible values are "A" (when elements have been
        added to the UR) and "M" (when existing elements have been
        modified). Response only.
    :ivar key_override: If a duplicate key is found where we are adding
        elements in some cases like URAdd, then instead of erroring out
        set this attribute to true.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    connection: Optional[Connection] = field(
        default=None,
        metadata={
            "name": "Connection",
            "type": "Element",
        }
    )
    meals: List[TypeMealService] = field(
        default_factory=list,
        metadata={
            "name": "Meals",
            "type": "Element",
            "max_occurs": 999,
        }
    )
    in_flight_services: List[str] = field(
        default_factory=list,
        metadata={
            "name": "InFlightServices",
            "type": "Element",
            "max_occurs": 999,
        }
    )
    key: Optional[str] = field(
        default=None,
        metadata={
            "name": "Key",
            "type": "Attribute",
            "required": True,
        }
    )
    origin: Optional[str] = field(
        default=None,
        metadata={
            "name": "Origin",
            "type": "Attribute",
            "required": True,
            "length": 3,
            "white_space": "collapse",
        }
    )
    destination: Optional[str] = field(
        default=None,
        metadata={
            "name": "Destination",
            "type": "Attribute",
            "required": True,
            "length": 3,
            "white_space": "collapse",
        }
    )
    departure_time: Optional[str] = field(
        default=None,
        metadata={
            "name": "DepartureTime",
            "type": "Attribute",
        }
    )
    arrival_time: Optional[str] = field(
        default=None,
        metadata={
            "name": "ArrivalTime",
            "type": "Attribute",
        }
    )
    flight_time: Optional[int] = field(
        default=None,
        metadata={
            "name": "FlightTime",
            "type": "Attribute",
        }
    )
    travel_time: Optional[int] = field(
        default=None,
        metadata={
            "name": "TravelTime",
            "type": "Attribute",
        }
    )
    distance: Optional[int] = field(
        default=None,
        metadata={
            "name": "Distance",
            "type": "Attribute",
        }
    )
    equipment: Optional[str] = field(
        default=None,
        metadata={
            "name": "Equipment",
            "type": "Attribute",
            "length": 3,
        }
    )
    on_time_performance: Optional[int] = field(
        default=None,
        metadata={
            "name": "OnTimePerformance",
            "type": "Attribute",
        }
    )
    origin_terminal: Optional[str] = field(
        default=None,
        metadata={
            "name": "OriginTerminal",
            "type": "Attribute",
        }
    )
    destination_terminal: Optional[str] = field(
        default=None,
        metadata={
            "name": "DestinationTerminal",
            "type": "Attribute",
        }
    )
    ground_time: Optional[int] = field(
        default=None,
        metadata={
            "name": "GroundTime",
            "type": "Attribute",
        }
    )
    automated_checkin: bool = field(
        default=False,
        metadata={
            "name": "AutomatedCheckin",
            "type": "Attribute",
        }
    )
    el_stat: Optional[TypeElementStatus] = field(
        default=None,
        metadata={
            "name": "ElStat",
            "type": "Attribute",
        }
    )
    key_override: Optional[bool] = field(
        default=None,
        metadata={
            "name": "KeyOverride",
            "type": "Attribute",
        }
    )


@dataclass
class FlightInfo:
    """
    :ivar flight_info_detail:
    :ivar flight_info_error_message: Errors, Warnings and informational
        messages for the Flight referenced above.
    :ivar criteria_key: An identifier to link the flightinfo responses
        to the criteria in request. The value populated here is passed
        in request.
    :ivar carrier: The carrier that is marketing this segment
    :ivar flight_number: The flight number under which the marketing
        carrier is marketing this flight
    :ivar origin: The IATA location code for this origination of this
        entity.
    :ivar destination: The IATA location code for this destination of
        this entity.
    :ivar departure_date: The date at which this entity departs. This
        does not include time zone information since it can be derived
        from the origin location.
    :ivar class_of_service:
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    flight_info_detail: List[FlightInfoDetail] = field(
        default_factory=list,
        metadata={
            "name": "FlightInfoDetail",
            "type": "Element",
            "max_occurs": 999,
        }
    )
    flight_info_error_message: List[TypeResultMessage] = field(
        default_factory=list,
        metadata={
            "name": "FlightInfoErrorMessage",
            "type": "Element",
            "max_occurs": 999,
        }
    )
    criteria_key: Optional[str] = field(
        default=None,
        metadata={
            "name": "CriteriaKey",
            "type": "Attribute",
            "required": True,
        }
    )
    carrier: Optional[str] = field(
        default=None,
        metadata={
            "name": "Carrier",
            "type": "Attribute",
            "required": True,
            "length": 2,
        }
    )
    flight_number: Optional[str] = field(
        default=None,
        metadata={
            "name": "FlightNumber",
            "type": "Attribute",
            "required": True,
            "max_length": 5,
        }
    )
    origin: Optional[str] = field(
        default=None,
        metadata={
            "name": "Origin",
            "type": "Attribute",
            "length": 3,
            "white_space": "collapse",
        }
    )
    destination: Optional[str] = field(
        default=None,
        metadata={
            "name": "Destination",
            "type": "Attribute",
            "length": 3,
            "white_space": "collapse",
        }
    )
    departure_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "DepartureDate",
            "type": "Attribute",
            "required": True,
        }
    )
    class_of_service: Optional[str] = field(
        default=None,
        metadata={
            "name": "ClassOfService",
            "type": "Attribute",
            "min_length": 1,
            "max_length": 2,
        }
    )


@dataclass
class FlightTimeDetail:
    """
    Flight Time Table Response Details.

    :ivar days_of_operation:
    :ivar connection:
    :ivar key:
    :ivar vendor_code:
    :ivar flight_number:
    :ivar origin:
    :ivar destination:
    :ivar departure_time: Flight departure time
    :ivar arrival_time: Flight arrival time
    :ivar stop_count:
    :ivar equipment:
    :ivar schedule_start_date: Flight time table search start date
    :ivar schedule_end_date: Flight time table search end date
    :ivar display_option: Indicates if carrier has link (carrier
        specific) display option.
    :ivar on_time_performance: On time performance indicator in
        percentage.
    :ivar day_change: Indicates if flight arrives on same day as
        departure, previous day, or next day. Like values  00 means Same
        day ,  01 means next day, -1 mean Previous day etc.
    :ivar journey_time: Indicates total journey time in minutes.
    :ivar flight_time: Indicates total flight time in minutes.
    :ivar start_terminal: Flight start terminal code.
    :ivar end_terminal: Flight end terminal code.
    :ivar first_intermediate_stop: First intermediate stop after board
        point.
    :ivar last_intermediate_stop: Last intermediate stop before off
        point.
    :ivar inside_availability:
    :ivar secure_sell:
    :ivar availability_source:
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    days_of_operation: Optional[TypeDaysOfOperation] = field(
        default=None,
        metadata={
            "name": "DaysOfOperation",
            "type": "Element",
        }
    )
    connection: Optional[Connection] = field(
        default=None,
        metadata={
            "name": "Connection",
            "type": "Element",
        }
    )
    key: Optional[str] = field(
        default=None,
        metadata={
            "name": "Key",
            "type": "Attribute",
            "required": True,
        }
    )
    vendor_code: Optional[str] = field(
        default=None,
        metadata={
            "name": "VendorCode",
            "type": "Attribute",
        }
    )
    flight_number: Optional[str] = field(
        default=None,
        metadata={
            "name": "FlightNumber",
            "type": "Attribute",
            "max_length": 5,
        }
    )
    origin: Optional[str] = field(
        default=None,
        metadata={
            "name": "Origin",
            "type": "Attribute",
            "length": 3,
        }
    )
    destination: Optional[str] = field(
        default=None,
        metadata={
            "name": "Destination",
            "type": "Attribute",
            "length": 3,
        }
    )
    departure_time: Optional[XmlTime] = field(
        default=None,
        metadata={
            "name": "DepartureTime",
            "type": "Attribute",
        }
    )
    arrival_time: Optional[XmlTime] = field(
        default=None,
        metadata={
            "name": "ArrivalTime",
            "type": "Attribute",
        }
    )
    stop_count: Optional[int] = field(
        default=None,
        metadata={
            "name": "StopCount",
            "type": "Attribute",
        }
    )
    equipment: Optional[str] = field(
        default=None,
        metadata={
            "name": "Equipment",
            "type": "Attribute",
            "length": 3,
        }
    )
    schedule_start_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "ScheduleStartDate",
            "type": "Attribute",
        }
    )
    schedule_end_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "ScheduleEndDate",
            "type": "Attribute",
        }
    )
    display_option: Optional[bool] = field(
        default=None,
        metadata={
            "name": "DisplayOption",
            "type": "Attribute",
        }
    )
    on_time_performance: Optional[int] = field(
        default=None,
        metadata={
            "name": "OnTimePerformance",
            "type": "Attribute",
        }
    )
    day_change: Optional[int] = field(
        default=None,
        metadata={
            "name": "DayChange",
            "type": "Attribute",
        }
    )
    journey_time: Optional[int] = field(
        default=None,
        metadata={
            "name": "JourneyTime",
            "type": "Attribute",
        }
    )
    flight_time: Optional[int] = field(
        default=None,
        metadata={
            "name": "FlightTime",
            "type": "Attribute",
        }
    )
    start_terminal: Optional[str] = field(
        default=None,
        metadata={
            "name": "StartTerminal",
            "type": "Attribute",
        }
    )
    end_terminal: Optional[str] = field(
        default=None,
        metadata={
            "name": "EndTerminal",
            "type": "Attribute",
        }
    )
    first_intermediate_stop: Optional[str] = field(
        default=None,
        metadata={
            "name": "FirstIntermediateStop",
            "type": "Attribute",
            "length": 3,
            "white_space": "collapse",
        }
    )
    last_intermediate_stop: Optional[str] = field(
        default=None,
        metadata={
            "name": "LastIntermediateStop",
            "type": "Attribute",
            "length": 3,
            "white_space": "collapse",
        }
    )
    inside_availability: Optional[str] = field(
        default=None,
        metadata={
            "name": "InsideAvailability",
            "type": "Attribute",
            "min_length": 1,
            "max_length": 1,
        }
    )
    secure_sell: Optional[str] = field(
        default=None,
        metadata={
            "name": "SecureSell",
            "type": "Attribute",
            "min_length": 0,
            "max_length": 2,
        }
    )
    availability_source: Optional[str] = field(
        default=None,
        metadata={
            "name": "AvailabilitySource",
            "type": "Attribute",
            "max_length": 1,
        }
    )


@dataclass
class MerchandisingAvailabilityDetails:
    """
    Rich Content and Branding for an air segment.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    air_itinerary_details: Optional[AirItineraryDetails] = field(
        default=None,
        metadata={
            "name": "AirItineraryDetails",
            "type": "Element",
            "required": True,
        }
    )
    account_code: Optional[AccountCode] = field(
        default=None,
        metadata={
            "name": "AccountCode",
            "type": "Element",
            "namespace": "http://www.travelport.com/schema/common_v52_0",
        }
    )


@dataclass
class MerchandisingDetails:
    """
    Rich Content and Branding for a fare brand.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    air_itinerary_details: List[AirItineraryDetails] = field(
        default_factory=list,
        metadata={
            "name": "AirItineraryDetails",
            "type": "Element",
            "min_occurs": 1,
            "max_occurs": 99,
        }
    )
    account_code: List[AccountCode] = field(
        default_factory=list,
        metadata={
            "name": "AccountCode",
            "type": "Element",
            "namespace": "http://www.travelport.com/schema/common_v52_0",
            "max_occurs": 10,
        }
    )


@dataclass
class Option:
    """
    List of segment and fare available for the search air leg.

    :ivar booking_info:
    :ivar connection:
    :ivar key:
    :ivar travel_time: Total traveling time that is difference between
        the departure time of the first segment and the arrival time of
        the last segments for that particular entire set of connection.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    booking_info: List[BookingInfo] = field(
        default_factory=list,
        metadata={
            "name": "BookingInfo",
            "type": "Element",
            "max_occurs": 999,
        }
    )
    connection: List[Connection] = field(
        default_factory=list,
        metadata={
            "name": "Connection",
            "type": "Element",
            "max_occurs": 999,
        }
    )
    key: Optional[str] = field(
        default=None,
        metadata={
            "name": "Key",
            "type": "Attribute",
            "required": True,
        }
    )
    travel_time: Optional[XmlDuration] = field(
        default=None,
        metadata={
            "name": "TravelTime",
            "type": "Attribute",
        }
    )


@dataclass
class OptionalService:
    """
    :ivar service_data:
    :ivar service_info:
    :ivar remark: Information regarding any specific for this service.
    :ivar tax_info:
    :ivar fee_info:
    :ivar emd:
    :ivar bundled_services:
    :ivar additional_info:
    :ivar fee_application: Specifies how the Optional Service fee is to
        be applied.  The choices are Per One Way, Per Round Trip, Per
        Item (Per Piece), Per Travel, Per Ticket, Per 1 Kilo, Per 5
        Kilos.  Provider: 1G, 1V, 1P
    :ivar text:
    :ivar price_range:
    :ivar tour_code:
    :ivar branding_info:
    :ivar title:
    :ivar provider_code:
    :ivar supplier_code:
    :ivar optional_services_rule_ref: UniqueID to associate a rule to
        the Optional Service
    :ivar type_value: Specify the type of service offered (e.g. seats,
        baggage, etc.)
    :ivar confirmation: Confirmation number provided by the supplier
    :ivar secondary_type: The secondary option code type required for
        certain options
    :ivar purchase_window: Describes when the Service is available for
        confirmation or purchase (e.g. Booking Only, Check-in Only,
        Anytime, etc.)
    :ivar priority: Numeric value that represents the priority order of
        the Service
    :ivar available: Boolean to describe whether the Service is
        available for sale or not
    :ivar entitled: Boolean to describe whether the passenger is
        entitled for the service without charge or not
    :ivar per_traveler: Boolean to describe whether the Amount on the
        Service is charged per traveler.
    :ivar create_date: Timestamp when this service/offer got created.
    :ivar payment_ref: Reference to a payment for merchandising
        services.
    :ivar service_status: Specify the service status (e.g. active,
        canceled, etc.)
    :ivar quantity: The number of units availed for each optional
        service (e.g. 2 baggage availed will be specified as 2 in
        quantity for optional service BAGGAGE)
    :ivar sequence_number: The sequence number associated with the
        OptionalService
    :ivar service_sub_code: The service subcode associated with the
        OptionalService
    :ivar ssrcode: The SSR Code associated with the OptionalService
    :ivar issuance_reason: A one-letter code specifying the reason for
        issuance of the OptionalService
    :ivar provider_defined_type: Original Type as sent by the provider
    :ivar total_price: The total price for this entity including base
        price and all taxes.
    :ivar base_price: Represents the base price for this entity. This
        does not include any taxes or surcharges.
    :ivar approximate_total_price: The Converted total price in Default
        Currency for this entity including base price and all taxes.
    :ivar approximate_base_price: The Converted base price in Default
        Currency for this entity. This does not include any taxes or
        surcharges.
    :ivar equivalent_base_price: Represents the base price in the
        related currency for this entity. This does not include any
        taxes or surcharges.
    :ivar taxes: The aggregated amount of all the taxes that are
        associated with this entity. See the associated TaxInfo array
        for a breakdown of the individual taxes.
    :ivar fees: The aggregated amount of all the fees that are
        associated with this entity. See the associated FeeInfo array
        for a breakdown of the individual fees.
    :ivar services: The total cost for all optional services.
    :ivar approximate_taxes: The Converted tax amount in Default
        Currency.
    :ivar approximate_fees: The Converted fee amount in Default
        Currency.
    :ivar key:
    :ivar assess_indicator: Indicates whether price is assessed by
        mileage or currency or both
    :ivar mileage: Indicates mileage fee/amount
    :ivar applicable_fflevel: Numerical value of the loyalty card level
        for which this service is available.
    :ivar private: Describes if service is private or not.
    :ivar ssrfree_text: Certain SSR types sent in OptionalService
        SSRCode require a free text message. For example, PETC Pet in
        Cabin.
    :ivar is_pricing_approximate: When set to True indicates that the
        pricing returned is approximate. Supported providers are MCH/ACH
    :ivar el_stat: This attribute is used to show the action results of
        an element. Possible values are "A" (when elements have been
        added to the UR) and "M" (when existing elements have been
        modified). Response only.
    :ivar key_override: If a duplicate key is found where we are adding
        elements in some cases like URAdd, then instead of erroring out
        set this attribute to true.
    :ivar chargeable: Indicates if the optional service is not offered,
        is available for a charge, or is included in the brand
    :ivar inclusive_of_tax: Identifies if the service was filed with a
        fee that is inclusive of tax.
    :ivar interline_settlement_allowed: Identifies if the interline
        settlement is allowed in service .
    :ivar geography_specification: Sector, Portion, Journey.
    :ivar excess_weight_rate: The cost of the bag per unit weight.
    :ivar source: The Source of the optional service. The source can be
        ACH, MCE, or MCH.
    :ivar viewable_only: Describes if the OptionalService is viewable
        only or not. If viewable only then the service cannot be sold.
    :ivar display_text: Title of the Optional Service.  Provider: ACH
    :ivar weight_in_excess: The excess weight of a bag. Providers: 1G,
        1V, 1P
    :ivar total_weight: The total weight of a bag. Providers: 1G, 1V, 1P
    :ivar baggage_unit_price: The per unit price of baggage. Providers:
        1G, 1V, 1P
    :ivar first_piece: Indicates the minimum occurrence of excess
        baggage.Provider: 1G, 1V, 1P.
    :ivar last_piece: Indicates the maximum occurrence of excess
        baggage. Provider: 1G, 1V, 1P.
    :ivar restricted: When set to “true”, the Optional Service is
        restricted by an embargo. Provider: 1G, 1V, 1P
    :ivar is_reprice_required: When set to “true”, the Optional Service
        must be re-priced. Provider: 1G, 1V, 1P
    :ivar booked_quantity: Indicates the Optional Service quantity
        already booked. Provider: 1G, 1V, 1P
    :ivar group: Associates Optional Services with the same ServiceSub
        Code, Air Segment, Passenger, and EMD Associated Item.
        Provider:1G, 1V, 1P
    :ivar pseudo_city_code: The PCC or SID that booked the Optional
        Service.
    :ivar tag: Optional service group name.
    :ivar display_order: Optional service group display order.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    service_data: List[ServiceData] = field(
        default_factory=list,
        metadata={
            "name": "ServiceData",
            "type": "Element",
            "namespace": "http://www.travelport.com/schema/common_v52_0",
            "max_occurs": 999,
        }
    )
    service_info: Optional[ServiceInfo] = field(
        default=None,
        metadata={
            "name": "ServiceInfo",
            "type": "Element",
            "namespace": "http://www.travelport.com/schema/common_v52_0",
        }
    )
    remark: List[Remark] = field(
        default_factory=list,
        metadata={
            "name": "Remark",
            "type": "Element",
            "namespace": "http://www.travelport.com/schema/common_v52_0",
            "max_occurs": 999,
        }
    )
    tax_info: List[TaxInfo] = field(
        default_factory=list,
        metadata={
            "name": "TaxInfo",
            "type": "Element",
            "max_occurs": 999,
        }
    )
    fee_info: List[FeeInfo] = field(
        default_factory=list,
        metadata={
            "name": "FeeInfo",
            "type": "Element",
            "max_occurs": 999,
        }
    )
    emd: Optional[Emd] = field(
        default=None,
        metadata={
            "name": "EMD",
            "type": "Element",
        }
    )
    bundled_services: Optional[BundledServices] = field(
        default=None,
        metadata={
            "name": "BundledServices",
            "type": "Element",
        }
    )
    additional_info: List[AdditionalInfo] = field(
        default_factory=list,
        metadata={
            "name": "AdditionalInfo",
            "type": "Element",
            "max_occurs": 16,
        }
    )
    fee_application: Optional[FeeApplication] = field(
        default=None,
        metadata={
            "name": "FeeApplication",
            "type": "Element",
        }
    )
    text: List[Text] = field(
        default_factory=list,
        metadata={
            "name": "Text",
            "type": "Element",
            "max_occurs": 4,
        }
    )
    price_range: List[PriceRange] = field(
        default_factory=list,
        metadata={
            "name": "PriceRange",
            "type": "Element",
            "max_occurs": 5,
        }
    )
    tour_code: Optional[TourCode] = field(
        default=None,
        metadata={
            "name": "TourCode",
            "type": "Element",
        }
    )
    branding_info: Optional[BrandingInfo] = field(
        default=None,
        metadata={
            "name": "BrandingInfo",
            "type": "Element",
        }
    )
    title: List[Title] = field(
        default_factory=list,
        metadata={
            "name": "Title",
            "type": "Element",
            "max_occurs": 2,
        }
    )
    provider_code: Optional[str] = field(
        default=None,
        metadata={
            "name": "ProviderCode",
            "type": "Attribute",
            "min_length": 2,
            "max_length": 5,
        }
    )
    supplier_code: Optional[str] = field(
        default=None,
        metadata={
            "name": "SupplierCode",
            "type": "Attribute",
            "min_length": 1,
            "max_length": 5,
        }
    )
    optional_services_rule_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "OptionalServicesRuleRef",
            "type": "Attribute",
        }
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "Type",
            "type": "Attribute",
            "required": True,
            "min_length": 1,
            "max_length": 128,
        }
    )
    confirmation: Optional[str] = field(
        default=None,
        metadata={
            "name": "Confirmation",
            "type": "Attribute",
        }
    )
    secondary_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "SecondaryType",
            "type": "Attribute",
        }
    )
    purchase_window: Optional[TypePurchaseWindow] = field(
        default=None,
        metadata={
            "name": "PurchaseWindow",
            "type": "Attribute",
        }
    )
    priority: Optional[int] = field(
        default=None,
        metadata={
            "name": "Priority",
            "type": "Attribute",
        }
    )
    available: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Available",
            "type": "Attribute",
        }
    )
    entitled: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Entitled",
            "type": "Attribute",
        }
    )
    per_traveler: bool = field(
        default=True,
        metadata={
            "name": "PerTraveler",
            "type": "Attribute",
        }
    )
    create_date: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "CreateDate",
            "type": "Attribute",
        }
    )
    payment_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "PaymentRef",
            "type": "Attribute",
        }
    )
    service_status: Optional[str] = field(
        default=None,
        metadata={
            "name": "ServiceStatus",
            "type": "Attribute",
        }
    )
    quantity: Optional[int] = field(
        default=None,
        metadata={
            "name": "Quantity",
            "type": "Attribute",
        }
    )
    sequence_number: Optional[int] = field(
        default=None,
        metadata={
            "name": "SequenceNumber",
            "type": "Attribute",
        }
    )
    service_sub_code: Optional[str] = field(
        default=None,
        metadata={
            "name": "ServiceSubCode",
            "type": "Attribute",
            "max_length": 3,
        }
    )
    ssrcode: Optional[str] = field(
        default=None,
        metadata={
            "name": "SSRCode",
            "type": "Attribute",
            "min_length": 4,
            "max_length": 4,
        }
    )
    issuance_reason: Optional[str] = field(
        default=None,
        metadata={
            "name": "IssuanceReason",
            "type": "Attribute",
            "min_length": 1,
            "max_length": 1,
        }
    )
    provider_defined_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "ProviderDefinedType",
            "type": "Attribute",
            "min_length": 1,
            "max_length": 16,
        }
    )
    total_price: Optional[str] = field(
        default=None,
        metadata={
            "name": "TotalPrice",
            "type": "Attribute",
        }
    )
    base_price: Optional[str] = field(
        default=None,
        metadata={
            "name": "BasePrice",
            "type": "Attribute",
        }
    )
    approximate_total_price: Optional[str] = field(
        default=None,
        metadata={
            "name": "ApproximateTotalPrice",
            "type": "Attribute",
        }
    )
    approximate_base_price: Optional[str] = field(
        default=None,
        metadata={
            "name": "ApproximateBasePrice",
            "type": "Attribute",
        }
    )
    equivalent_base_price: Optional[str] = field(
        default=None,
        metadata={
            "name": "EquivalentBasePrice",
            "type": "Attribute",
        }
    )
    taxes: Optional[str] = field(
        default=None,
        metadata={
            "name": "Taxes",
            "type": "Attribute",
        }
    )
    fees: Optional[str] = field(
        default=None,
        metadata={
            "name": "Fees",
            "type": "Attribute",
        }
    )
    services: Optional[str] = field(
        default=None,
        metadata={
            "name": "Services",
            "type": "Attribute",
        }
    )
    approximate_taxes: Optional[str] = field(
        default=None,
        metadata={
            "name": "ApproximateTaxes",
            "type": "Attribute",
        }
    )
    approximate_fees: Optional[str] = field(
        default=None,
        metadata={
            "name": "ApproximateFees",
            "type": "Attribute",
        }
    )
    key: Optional[str] = field(
        default=None,
        metadata={
            "name": "Key",
            "type": "Attribute",
        }
    )
    assess_indicator: Optional[TypeAssessIndicator] = field(
        default=None,
        metadata={
            "name": "AssessIndicator",
            "type": "Attribute",
        }
    )
    mileage: Optional[int] = field(
        default=None,
        metadata={
            "name": "Mileage",
            "type": "Attribute",
        }
    )
    applicable_fflevel: Optional[int] = field(
        default=None,
        metadata={
            "name": "ApplicableFFLevel",
            "type": "Attribute",
            "min_inclusive": 0,
            "max_inclusive": 9,
        }
    )
    private: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Private",
            "type": "Attribute",
        }
    )
    ssrfree_text: Optional[str] = field(
        default=None,
        metadata={
            "name": "SSRFreeText",
            "type": "Attribute",
        }
    )
    is_pricing_approximate: Optional[bool] = field(
        default=None,
        metadata={
            "name": "IsPricingApproximate",
            "type": "Attribute",
        }
    )
    el_stat: Optional[TypeElementStatus] = field(
        default=None,
        metadata={
            "name": "ElStat",
            "type": "Attribute",
        }
    )
    key_override: Optional[bool] = field(
        default=None,
        metadata={
            "name": "KeyOverride",
            "type": "Attribute",
        }
    )
    chargeable: Optional[str] = field(
        default=None,
        metadata={
            "name": "Chargeable",
            "type": "Attribute",
        }
    )
    inclusive_of_tax: Optional[bool] = field(
        default=None,
        metadata={
            "name": "InclusiveOfTax",
            "type": "Attribute",
        }
    )
    interline_settlement_allowed: Optional[bool] = field(
        default=None,
        metadata={
            "name": "InterlineSettlementAllowed",
            "type": "Attribute",
        }
    )
    geography_specification: Optional[str] = field(
        default=None,
        metadata={
            "name": "GeographySpecification",
            "type": "Attribute",
        }
    )
    excess_weight_rate: Optional[str] = field(
        default=None,
        metadata={
            "name": "ExcessWeightRate",
            "type": "Attribute",
        }
    )
    source: Optional[str] = field(
        default=None,
        metadata={
            "name": "Source",
            "type": "Attribute",
        }
    )
    viewable_only: Optional[bool] = field(
        default=None,
        metadata={
            "name": "ViewableOnly",
            "type": "Attribute",
        }
    )
    display_text: Optional[str] = field(
        default=None,
        metadata={
            "name": "DisplayText",
            "type": "Attribute",
        }
    )
    weight_in_excess: Optional[str] = field(
        default=None,
        metadata={
            "name": "WeightInExcess",
            "type": "Attribute",
        }
    )
    total_weight: Optional[str] = field(
        default=None,
        metadata={
            "name": "TotalWeight",
            "type": "Attribute",
        }
    )
    baggage_unit_price: Optional[str] = field(
        default=None,
        metadata={
            "name": "BaggageUnitPrice",
            "type": "Attribute",
        }
    )
    first_piece: Optional[int] = field(
        default=None,
        metadata={
            "name": "FirstPiece",
            "type": "Attribute",
        }
    )
    last_piece: Optional[int] = field(
        default=None,
        metadata={
            "name": "LastPiece",
            "type": "Attribute",
        }
    )
    restricted: bool = field(
        default=False,
        metadata={
            "name": "Restricted",
            "type": "Attribute",
        }
    )
    is_reprice_required: bool = field(
        default=False,
        metadata={
            "name": "IsRepriceRequired",
            "type": "Attribute",
        }
    )
    booked_quantity: Optional[str] = field(
        default=None,
        metadata={
            "name": "BookedQuantity",
            "type": "Attribute",
        }
    )
    group: Optional[str] = field(
        default=None,
        metadata={
            "name": "Group",
            "type": "Attribute",
        }
    )
    pseudo_city_code: Optional[str] = field(
        default=None,
        metadata={
            "name": "PseudoCityCode",
            "type": "Attribute",
            "min_length": 2,
            "max_length": 10,
        }
    )
    tag: Optional[str] = field(
        default=None,
        metadata={
            "name": "Tag",
            "type": "Attribute",
            "min_length": 1,
            "max_length": 256,
        }
    )
    display_order: Optional[int] = field(
        default=None,
        metadata={
            "name": "DisplayOrder",
            "type": "Attribute",
            "min_inclusive": 0,
            "max_inclusive": 999,
        }
    )


@dataclass
class PrePayAccount:
    """
    PrePay Account associated with the customer.

    :ivar credit_summary:
    :ivar pre_pay_price_info:
    :ivar program_title: Pre pay program title
    :ivar certificate_number:
    :ivar program_name: Pre pay program name
    :ivar effective_date: Effective date for the pre pay account
    :ivar expire_date: Expiry date for the pre pay account
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    credit_summary: Optional[CreditSummary] = field(
        default=None,
        metadata={
            "name": "CreditSummary",
            "type": "Element",
        }
    )
    pre_pay_price_info: Optional[PrePayPriceInfo] = field(
        default=None,
        metadata={
            "name": "PrePayPriceInfo",
            "type": "Element",
        }
    )
    program_title: Optional[str] = field(
        default=None,
        metadata={
            "name": "ProgramTitle",
            "type": "Attribute",
        }
    )
    certificate_number: Optional[str] = field(
        default=None,
        metadata={
            "name": "CertificateNumber",
            "type": "Attribute",
        }
    )
    program_name: Optional[str] = field(
        default=None,
        metadata={
            "name": "ProgramName",
            "type": "Attribute",
        }
    )
    effective_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "EffectiveDate",
            "type": "Attribute",
        }
    )
    expire_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "ExpireDate",
            "type": "Attribute",
        }
    )


@dataclass
class RouteList:
    """
    Identifies the routes and sub-routes that were requested.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    route: List[Route] = field(
        default_factory=list,
        metadata={
            "name": "Route",
            "type": "Element",
            "min_occurs": 1,
            "max_occurs": 999,
        }
    )


@dataclass
class Row:
    """
    Identifies the row of in a seat map.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    facility: List[Facility] = field(
        default_factory=list,
        metadata={
            "name": "Facility",
            "type": "Element",
            "max_occurs": 999,
        }
    )
    characteristic: List[Characteristic] = field(
        default_factory=list,
        metadata={
            "name": "Characteristic",
            "type": "Element",
            "max_occurs": 999,
        }
    )
    number: Optional[int] = field(
        default=None,
        metadata={
            "name": "Number",
            "type": "Attribute",
            "required": True,
        }
    )
    search_traveler_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "SearchTravelerRef",
            "type": "Attribute",
        }
    )


@dataclass
class SearchAirLeg:
    """
    Search version of AirLeg used to specify search criteria.

    :ivar search_origin:
    :ivar search_destination:
    :ivar search_dep_time:
    :ivar search_arv_time: Specifies the preferred time within the time
        range. For 1G, 1V, 1P, it is supported for AvailabilitySearchReq
        (TimeRange must also be specified) and not supported for
        LowFareSearchReq. ACH does not support search by arrival time.
    :ivar air_leg_modifiers:
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    search_origin: List[TypeSearchLocation] = field(
        default_factory=list,
        metadata={
            "name": "SearchOrigin",
            "type": "Element",
            "min_occurs": 1,
            "max_occurs": 999,
        }
    )
    search_destination: List[TypeSearchLocation] = field(
        default_factory=list,
        metadata={
            "name": "SearchDestination",
            "type": "Element",
            "max_occurs": 999,
        }
    )
    search_dep_time: List[TypeFlexibleTimeSpec] = field(
        default_factory=list,
        metadata={
            "name": "SearchDepTime",
            "type": "Element",
            "max_occurs": 999,
        }
    )
    search_arv_time: List[TypeTimeSpec] = field(
        default_factory=list,
        metadata={
            "name": "SearchArvTime",
            "type": "Element",
            "max_occurs": 999,
        }
    )
    air_leg_modifiers: Optional[AirLegModifiers] = field(
        default=None,
        metadata={
            "name": "AirLegModifiers",
            "type": "Element",
        }
    )


@dataclass
class SegmentModifiers:
    """
    To be used to modify the ticket modifiers for air segment.

    :ivar air_segment_ref:
    :ivar ticket_validity: To be used to pass the ticket validity dates
    :ivar baggage_allowance:
    :ivar ticket_designator:
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    air_segment_ref: Optional[AirSegmentRef] = field(
        default=None,
        metadata={
            "name": "AirSegmentRef",
            "type": "Element",
            "required": True,
        }
    )
    ticket_validity: Optional[TicketValidity] = field(
        default=None,
        metadata={
            "name": "TicketValidity",
            "type": "Element",
        }
    )
    baggage_allowance: Optional[BaggageAllowance] = field(
        default=None,
        metadata={
            "name": "BaggageAllowance",
            "type": "Element",
        }
    )
    ticket_designator: Optional[str] = field(
        default=None,
        metadata={
            "name": "TicketDesignator",
            "type": "Element",
            "min_length": 0,
            "max_length": 20,
        }
    )


@dataclass
class AirPricingCommand:
    """A containter to identify individual pricing events.

    A pricing result will be returned for each pricing command according
    to its parameters.

    :ivar air_pricing_modifiers:
    :ivar air_segment_pricing_modifiers:
    :ivar command_key: An identifier to link the pricing responses to
        the pricing commands. The value passed here will be returned in
        the resulting AirPricingInfo(s) from this command.
    :ivar cabin_class: Specify the cabin type to price the entire
        itinerary in. If segment level cabin selection is required, this
        attribute should not be used.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    air_pricing_modifiers: Optional[AirPricingModifiers] = field(
        default=None,
        metadata={
            "name": "AirPricingModifiers",
            "type": "Element",
        }
    )
    air_segment_pricing_modifiers: List[AirSegmentPricingModifiers] = field(
        default_factory=list,
        metadata={
            "name": "AirSegmentPricingModifiers",
            "type": "Element",
            "max_occurs": 999,
        }
    )
    command_key: Optional[str] = field(
        default=None,
        metadata={
            "name": "CommandKey",
            "type": "Attribute",
            "max_length": 10,
        }
    )
    cabin_class: Optional[str] = field(
        default=None,
        metadata={
            "name": "CabinClass",
            "type": "Attribute",
        }
    )


@dataclass
class AutoPricingInfo:
    """
    Auto Pricing based on Segment and Traveler Association.

    :ivar air_segment_ref:
    :ivar booking_traveler_ref:
    :ivar air_pricing_modifiers:
    :ivar air_segment_pricing_modifiers:
    :ivar key:
    :ivar pricing_type: Indicates the Pricing Type used. The possible
        values are TicketRecord, StoredFare, PricingInstruction.
    :ivar plating_carrier: The Plating Carrier for this journey
    :ivar el_stat: This attribute is used to show the action results of
        an element. Possible values are "A" (when elements have been
        added to the UR) and "M" (when existing elements have been
        modified). Response only.
    :ivar key_override: If a duplicate key is found where we are adding
        elements in some cases like URAdd, then instead of erroring out
        set this attribute to true.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    air_segment_ref: List[AirSegmentRef] = field(
        default_factory=list,
        metadata={
            "name": "AirSegmentRef",
            "type": "Element",
            "max_occurs": 100,
        }
    )
    booking_traveler_ref: List[BookingTravelerRef] = field(
        default_factory=list,
        metadata={
            "name": "BookingTravelerRef",
            "type": "Element",
            "namespace": "http://www.travelport.com/schema/common_v52_0",
            "max_occurs": 100,
        }
    )
    air_pricing_modifiers: Optional[AirPricingModifiers] = field(
        default=None,
        metadata={
            "name": "AirPricingModifiers",
            "type": "Element",
        }
    )
    air_segment_pricing_modifiers: List[AirSegmentPricingModifiers] = field(
        default_factory=list,
        metadata={
            "name": "AirSegmentPricingModifiers",
            "type": "Element",
            "max_occurs": 100,
        }
    )
    key: Optional[str] = field(
        default=None,
        metadata={
            "name": "Key",
            "type": "Attribute",
            "required": True,
        }
    )
    pricing_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "PricingType",
            "type": "Attribute",
            "max_length": 25,
        }
    )
    plating_carrier: Optional[str] = field(
        default=None,
        metadata={
            "name": "PlatingCarrier",
            "type": "Attribute",
            "length": 2,
        }
    )
    el_stat: Optional[TypeElementStatus] = field(
        default=None,
        metadata={
            "name": "ElStat",
            "type": "Attribute",
        }
    )
    key_override: Optional[bool] = field(
        default=None,
        metadata={
            "name": "KeyOverride",
            "type": "Attribute",
        }
    )


@dataclass
class BaggageAllowanceInfo(BaseBaggageAllowanceInfo):
    """
    Information related to Baggage allowance like URL,Height,Weight etc.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    bag_details: List[BagDetails] = field(
        default_factory=list,
        metadata={
            "name": "BagDetails",
            "type": "Element",
            "max_occurs": 999,
        }
    )
    traveler_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "TravelerType",
            "type": "Attribute",
            "min_length": 3,
            "max_length": 5,
        }
    )
    fare_info_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "FareInfoRef",
            "type": "Attribute",
        }
    )


@dataclass
class FareDisplay:
    """
    Fare/Tariff Display.

    :ivar fare_display_rule:
    :ivar fare_pricing:
    :ivar fare_restriction:
    :ivar fare_routing_information:
    :ivar fare_mileage_information:
    :ivar air_fare_display_rule_key:
    :ivar booking_code:
    :ivar account_code:
    :ivar addl_booking_code_information:
    :ivar fare_rule_failure_info: Returns fare rule failure info for Non
        Valid fares.
    :ivar price_change: Indicates a price change is found in Fare
        Control Manager
    :ivar carrier:
    :ivar fare_basis:
    :ivar amount:
    :ivar trip_type:
    :ivar fare_type_code:
    :ivar special_fare:
    :ivar instant_purchase:
    :ivar eligibility_restricted:
    :ivar flight_restricted:
    :ivar stopovers_restricted:
    :ivar transfers_restricted:
    :ivar blackouts_exist:
    :ivar accompanied_travel:
    :ivar mile_or_route_based_fare:
    :ivar global_indicator:
    :ivar origin: Returns the origin airport or city code for which this
        tariff is applicable.
    :ivar destination: Returns the destination airport or city code for
        which this tariff is applicable.
    :ivar fare_ticketing_code: Returns the ticketing code for which this
        tariff is applicable.
    :ivar fare_ticketing_designator: Returns the ticketing designator
        for which this tariff is applicable.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    fare_display_rule: Optional[FareDisplayRule] = field(
        default=None,
        metadata={
            "name": "FareDisplayRule",
            "type": "Element",
            "required": True,
        }
    )
    fare_pricing: List[FarePricing] = field(
        default_factory=list,
        metadata={
            "name": "FarePricing",
            "type": "Element",
            "min_occurs": 1,
            "max_occurs": 999,
        }
    )
    fare_restriction: List[FareRestriction] = field(
        default_factory=list,
        metadata={
            "name": "FareRestriction",
            "type": "Element",
            "max_occurs": 99,
        }
    )
    fare_routing_information: Optional[str] = field(
        default=None,
        metadata={
            "name": "FareRoutingInformation",
            "type": "Element",
        }
    )
    fare_mileage_information: Optional[str] = field(
        default=None,
        metadata={
            "name": "FareMileageInformation",
            "type": "Element",
        }
    )
    air_fare_display_rule_key: Optional[AirFareDisplayRuleKey] = field(
        default=None,
        metadata={
            "name": "AirFareDisplayRuleKey",
            "type": "Element",
        }
    )
    booking_code: List[BookingCode] = field(
        default_factory=list,
        metadata={
            "name": "BookingCode",
            "type": "Element",
            "max_occurs": 999,
        }
    )
    account_code: List[AccountCode] = field(
        default_factory=list,
        metadata={
            "name": "AccountCode",
            "type": "Element",
            "namespace": "http://www.travelport.com/schema/common_v52_0",
            "max_occurs": 999,
        }
    )
    addl_booking_code_information: Optional[str] = field(
        default=None,
        metadata={
            "name": "AddlBookingCodeInformation",
            "type": "Element",
            "min_length": 1,
            "white_space": "collapse",
        }
    )
    fare_rule_failure_info: Optional[FareRuleFailureInfo] = field(
        default=None,
        metadata={
            "name": "FareRuleFailureInfo",
            "type": "Element",
        }
    )
    price_change: List[PriceChangeType] = field(
        default_factory=list,
        metadata={
            "name": "PriceChange",
            "type": "Element",
            "max_occurs": 99,
        }
    )
    carrier: Optional[str] = field(
        default=None,
        metadata={
            "name": "Carrier",
            "type": "Attribute",
            "required": True,
            "length": 2,
        }
    )
    fare_basis: Optional[str] = field(
        default=None,
        metadata={
            "name": "FareBasis",
            "type": "Attribute",
            "required": True,
        }
    )
    amount: Optional[str] = field(
        default=None,
        metadata={
            "name": "Amount",
            "type": "Attribute",
            "required": True,
        }
    )
    trip_type: Optional[TypeFareTripType] = field(
        default=None,
        metadata={
            "name": "TripType",
            "type": "Attribute",
        }
    )
    fare_type_code: Optional[str] = field(
        default=None,
        metadata={
            "name": "FareTypeCode",
            "type": "Attribute",
            "min_length": 1,
            "max_length": 5,
        }
    )
    special_fare: Optional[bool] = field(
        default=None,
        metadata={
            "name": "SpecialFare",
            "type": "Attribute",
        }
    )
    instant_purchase: Optional[bool] = field(
        default=None,
        metadata={
            "name": "InstantPurchase",
            "type": "Attribute",
        }
    )
    eligibility_restricted: Optional[bool] = field(
        default=None,
        metadata={
            "name": "EligibilityRestricted",
            "type": "Attribute",
        }
    )
    flight_restricted: Optional[bool] = field(
        default=None,
        metadata={
            "name": "FlightRestricted",
            "type": "Attribute",
        }
    )
    stopovers_restricted: Optional[bool] = field(
        default=None,
        metadata={
            "name": "StopoversRestricted",
            "type": "Attribute",
        }
    )
    transfers_restricted: Optional[bool] = field(
        default=None,
        metadata={
            "name": "TransfersRestricted",
            "type": "Attribute",
        }
    )
    blackouts_exist: Optional[bool] = field(
        default=None,
        metadata={
            "name": "BlackoutsExist",
            "type": "Attribute",
        }
    )
    accompanied_travel: Optional[bool] = field(
        default=None,
        metadata={
            "name": "AccompaniedTravel",
            "type": "Attribute",
        }
    )
    mile_or_route_based_fare: Optional[TypeMileOrRouteBasedFare] = field(
        default=None,
        metadata={
            "name": "MileOrRouteBasedFare",
            "type": "Attribute",
        }
    )
    global_indicator: Optional[TypeAtpcoglobalIndicator] = field(
        default=None,
        metadata={
            "name": "GlobalIndicator",
            "type": "Attribute",
        }
    )
    origin: Optional[str] = field(
        default=None,
        metadata={
            "name": "Origin",
            "type": "Attribute",
            "length": 3,
            "white_space": "collapse",
        }
    )
    destination: Optional[str] = field(
        default=None,
        metadata={
            "name": "Destination",
            "type": "Attribute",
            "length": 3,
            "white_space": "collapse",
        }
    )
    fare_ticketing_code: Optional[str] = field(
        default=None,
        metadata={
            "name": "FareTicketingCode",
            "type": "Attribute",
        }
    )
    fare_ticketing_designator: Optional[str] = field(
        default=None,
        metadata={
            "name": "FareTicketingDesignator",
            "type": "Attribute",
            "min_length": 0,
            "max_length": 20,
        }
    )


@dataclass
class FlightDetailsList:
    """
    The shared object list of FlightDetails.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    flight_details: List[FlightDetails] = field(
        default_factory=list,
        metadata={
            "name": "FlightDetails",
            "type": "Element",
            "min_occurs": 1,
            "max_occurs": 999,
        }
    )


@dataclass
class FlightOption:
    """
    List of Options available for any search air leg.

    :ivar option: List of BookingInfo available for the search air leg.
    :ivar leg_ref: Identifies the Leg Reference for this Flight Option.
    :ivar origin: The IATA location code for this origination of this
        entity.
    :ivar destination: The IATA location code for this destination of
        this entity.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    option: List[Option] = field(
        default_factory=list,
        metadata={
            "name": "Option",
            "type": "Element",
            "min_occurs": 1,
            "max_occurs": 999,
        }
    )
    leg_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "LegRef",
            "type": "Attribute",
        }
    )
    origin: Optional[str] = field(
        default=None,
        metadata={
            "name": "Origin",
            "type": "Attribute",
            "required": True,
            "length": 3,
            "white_space": "collapse",
        }
    )
    destination: Optional[str] = field(
        default=None,
        metadata={
            "name": "Destination",
            "type": "Attribute",
            "required": True,
            "length": 3,
            "white_space": "collapse",
        }
    )


@dataclass
class OptionalServices:
    """
    A wrapper for all the information regarding each of the Optional services.

    :ivar optional_services_total: The total fares, fees and taxes
        associated with the Optional Services
    :ivar optional_service:
    :ivar grouped_option_info: Details about an unselected or "other"
        option when optional services are grouped together.
    :ivar optional_service_rules: Holds the rules for selecting the
        optional service in the itinerary
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    optional_services_total: Optional["OptionalServices.OptionalServicesTotal"] = field(
        default=None,
        metadata={
            "name": "OptionalServicesTotal",
            "type": "Element",
        }
    )
    optional_service: List[OptionalService] = field(
        default_factory=list,
        metadata={
            "name": "OptionalService",
            "type": "Element",
            "min_occurs": 1,
            "max_occurs": 999,
        }
    )
    grouped_option_info: List[GroupedOptionInfo] = field(
        default_factory=list,
        metadata={
            "name": "GroupedOptionInfo",
            "type": "Element",
            "max_occurs": 999,
        }
    )
    optional_service_rules: List[ServiceRuleType] = field(
        default_factory=list,
        metadata={
            "name": "OptionalServiceRules",
            "type": "Element",
            "max_occurs": 999,
        }
    )

    @dataclass
    class OptionalServicesTotal:
        """
        :ivar tax_info:
        :ivar fee_info:
        :ivar total_price: The total price for this entity including
            base price and all taxes.
        :ivar base_price: Represents the base price for this entity.
            This does not include any taxes or surcharges.
        :ivar approximate_total_price: The Converted total price in
            Default Currency for this entity including base price and
            all taxes.
        :ivar approximate_base_price: The Converted base price in
            Default Currency for this entity. This does not include any
            taxes or surcharges.
        :ivar equivalent_base_price: Represents the base price in the
            related currency for this entity. This does not include any
            taxes or surcharges.
        :ivar taxes: The aggregated amount of all the taxes that are
            associated with this entity. See the associated TaxInfo
            array for a breakdown of the individual taxes.
        :ivar fees: The aggregated amount of all the fees that are
            associated with this entity. See the associated FeeInfo
            array for a breakdown of the individual fees.
        :ivar services: The total cost for all optional services.
        :ivar approximate_taxes: The Converted tax amount in Default
            Currency.
        :ivar approximate_fees: The Converted fee amount in Default
            Currency.
        """
        tax_info: List[TaxInfo] = field(
            default_factory=list,
            metadata={
                "name": "TaxInfo",
                "type": "Element",
                "max_occurs": 999,
            }
        )
        fee_info: List[FeeInfo] = field(
            default_factory=list,
            metadata={
                "name": "FeeInfo",
                "type": "Element",
                "max_occurs": 999,
            }
        )
        total_price: Optional[str] = field(
            default=None,
            metadata={
                "name": "TotalPrice",
                "type": "Attribute",
            }
        )
        base_price: Optional[str] = field(
            default=None,
            metadata={
                "name": "BasePrice",
                "type": "Attribute",
            }
        )
        approximate_total_price: Optional[str] = field(
            default=None,
            metadata={
                "name": "ApproximateTotalPrice",
                "type": "Attribute",
            }
        )
        approximate_base_price: Optional[str] = field(
            default=None,
            metadata={
                "name": "ApproximateBasePrice",
                "type": "Attribute",
            }
        )
        equivalent_base_price: Optional[str] = field(
            default=None,
            metadata={
                "name": "EquivalentBasePrice",
                "type": "Attribute",
            }
        )
        taxes: Optional[str] = field(
            default=None,
            metadata={
                "name": "Taxes",
                "type": "Attribute",
            }
        )
        fees: Optional[str] = field(
            default=None,
            metadata={
                "name": "Fees",
                "type": "Attribute",
            }
        )
        services: Optional[str] = field(
            default=None,
            metadata={
                "name": "Services",
                "type": "Attribute",
            }
        )
        approximate_taxes: Optional[str] = field(
            default=None,
            metadata={
                "name": "ApproximateTaxes",
                "type": "Attribute",
            }
        )
        approximate_fees: Optional[str] = field(
            default=None,
            metadata={
                "name": "ApproximateFees",
                "type": "Attribute",
            }
        )


@dataclass
class PrePayProfileInfo:
    """
    PrePay Profile associated with the customer.

    :ivar pre_pay_id: Pre pay unique identifier detail.This information
        block is returned both in list and  detail retrieve
        transactions.Example flight pass number
    :ivar pre_pay_customer: Pre pay customer detail.This information
        block is returned both in list and  detail retrieve
        transactions.
    :ivar pre_pay_account: Pre pay account detail.This information block
        is returned both in list and  detail retrieve transactions.
    :ivar affiliations: Pre pay affiliations detail.This information
        block is returned only in detail retrieve transactions.
    :ivar account_related_rules: Pre pay account related rules.This
        information block is returned only in detail retrieve
        transactions.
    :ivar status_code: Customer pre pay profile status code(One of
        Marked for deletion,Lapsed,Terminated,Active,Inactive)
    :ivar creator_id: This is the loyalty card number of the person who
        originally purchased/setup the flight pass
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    pre_pay_id: Optional[PrePayId] = field(
        default=None,
        metadata={
            "name": "PrePayId",
            "type": "Element",
            "required": True,
        }
    )
    pre_pay_customer: Optional[PrePayCustomer] = field(
        default=None,
        metadata={
            "name": "PrePayCustomer",
            "type": "Element",
        }
    )
    pre_pay_account: Optional[PrePayAccount] = field(
        default=None,
        metadata={
            "name": "PrePayAccount",
            "type": "Element",
        }
    )
    affiliations: Optional[Affiliations] = field(
        default=None,
        metadata={
            "name": "Affiliations",
            "type": "Element",
        }
    )
    account_related_rules: Optional[AccountRelatedRules] = field(
        default=None,
        metadata={
            "name": "AccountRelatedRules",
            "type": "Element",
        }
    )
    status_code: Optional[str] = field(
        default=None,
        metadata={
            "name": "StatusCode",
            "type": "Attribute",
        }
    )
    creator_id: Optional[str] = field(
        default=None,
        metadata={
            "name": "CreatorID",
            "type": "Attribute",
            "min_length": 1,
            "max_length": 36,
        }
    )


@dataclass
class Rows:
    """A wrapper for all the information regarding each of the rows.

    Providers: ACH, 1G, 1V, 1P

    :ivar row: Provider: 1G,1V,1P,ACH,MCH.
    :ivar segment_ref: Specifies the AirSegment the seat map is for.
        Providers: ACH, 1G, 1V, 1P
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    row: List[Row] = field(
        default_factory=list,
        metadata={
            "name": "Row",
            "type": "Element",
            "max_occurs": 999,
        }
    )
    segment_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "SegmentRef",
            "type": "Attribute",
        }
    )


@dataclass
class StructuredFareRulesType:
    """
    :ivar fare_rule_category_type: For FareRulesType element
    """
    class Meta:
        target_namespace = "http://www.travelport.com/schema/air_v52_0"

    fare_rule_category_type: List[FareRuleCategoryTypes] = field(
        default_factory=list,
        metadata={
            "name": "FareRuleCategoryType",
            "type": "Element",
            "namespace": "http://www.travelport.com/schema/air_v52_0",
            "max_occurs": 99,
        }
    )


@dataclass
class TicketingModifiers:
    """
    A container to identify individual ticketing modifiers.

    :ivar booking_traveler_ref: Reference to a booking traveler for
        which ticketing modifier is applied.
    :ivar net_remit: Allows an agency to override the net remittance
        amount - varies by BSP agreement
    :ivar net_fare: Net Fare amount for a ticketed fare
    :ivar actual_selling_fare: Allows an agency to report an Actual
        Selling Fare as part of the net remittance BSP agreement
    :ivar invoice_fare: Allows an agency to report an Invoice Fare as
        part of the net remittance BSP agreement
    :ivar corporate_discount: Allows an agency to add a corporate
        discount to the itinerary to be ticketed
    :ivar accounting_info: Allows an agency to report Accounting
        Information as part of the net remittance BSP agreement
    :ivar bulk_ticket: Allows an agency to update the fare as a Bulk
        ticket - Optional SuppressOnFareCalc attribute will control how
        fare calculation is printed on the ticket
    :ivar group_tour: Allows an agency to update the fare as a Group
        Tour (inclusive tour) ticket - Optional SuppressOnFareCalc
        attribute will control how fare calculation is printed on the
        ticket
    :ivar commission: Allows an agency to update the commission to a new
        or different commission rate which will be applied at time of
        ticketing. The commission Modifier allows the user specify how
        the commission change is to applied
    :ivar tour_code: Allows an agency to modify the tour code
        information on the ticket
    :ivar ticket_endorsement: Allows an agency to add user defined
        ticketing endorsements the ticket
    :ivar value_modifier: Allows an agency to modify value or commission
        of the ticket. The modifier is generic and depends on the
        specific GDS and BSP implementation
    :ivar document_select:
    :ivar document_options:
    :ivar segment_select:
    :ivar segment_modifiers:
    :ivar supplier_locator:
    :ivar destination_purpose_code:
    :ivar language_option:
    :ivar land_charges:
    :ivar print_blank_form_itinerary:
    :ivar exempt_obfee:
    :ivar is_primary_di: Indicates if the DI is Primary DI. 1P only
    :ivar document_instruction_number: The Document Instruction line
        number. 1P only
    :ivar reference: Identifies if TicketingModifiers contains DI line
        information. 1P only.
    :ivar status: DI line status - ex:Ticketed
    :ivar free_text: DI line information shown as free text as in Host.
        1P only
    :ivar name_number: Host Name Number
    :ivar ticket_record: Ticket Record Number
    :ivar plating_carrier: Allows an agency to specify the Plating
        Carrier for ticketing
    :ivar exempt_vat: Allows an agency to update if VAT is Exemtped on
        the fare.
    :ivar net_remit_applied: Indicator to the BSP net remittance scheme
        applies to ticketed fare.
    :ivar free_ticket: Indicates free ticket.
    :ivar currency_override_code: This modifier allows an agency to
        specify the currency like L for Local, E for Euro, U for USD, C
        for CAD (Canadian dollars).
    :ivar key:
    :ivar el_stat: This attribute is used to show the action results of
        an element. Possible values are "A" (when elements have been
        added to the UR) and "M" (when existing elements have been
        modified). Response only.
    :ivar key_override: If a duplicate key is found where we are adding
        elements in some cases like URAdd, then instead of erroring out
        set this attribute to true.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    booking_traveler_ref: List[str] = field(
        default_factory=list,
        metadata={
            "name": "BookingTravelerRef",
            "type": "Element",
            "max_occurs": 999,
        }
    )
    net_remit: Optional[TypeTicketModifierAmountType] = field(
        default=None,
        metadata={
            "name": "NetRemit",
            "type": "Element",
        }
    )
    net_fare: Optional[TypeTicketModifierAmountType] = field(
        default=None,
        metadata={
            "name": "NetFare",
            "type": "Element",
        }
    )
    actual_selling_fare: Optional[TypeTicketModifierAmountType] = field(
        default=None,
        metadata={
            "name": "ActualSellingFare",
            "type": "Element",
        }
    )
    invoice_fare: Optional[TypeTicketModifierAccountingType] = field(
        default=None,
        metadata={
            "name": "InvoiceFare",
            "type": "Element",
        }
    )
    corporate_discount: Optional[TypeTicketModifierAccountingType] = field(
        default=None,
        metadata={
            "name": "CorporateDiscount",
            "type": "Element",
        }
    )
    accounting_info: Optional[TypeTicketModifierAccountingType] = field(
        default=None,
        metadata={
            "name": "AccountingInfo",
            "type": "Element",
        }
    )
    bulk_ticket: Optional["TicketingModifiers.BulkTicket"] = field(
        default=None,
        metadata={
            "name": "BulkTicket",
            "type": "Element",
        }
    )
    group_tour: Optional[TypeBulkTicketModifierType] = field(
        default=None,
        metadata={
            "name": "GroupTour",
            "type": "Element",
        }
    )
    commission: Optional[Commission] = field(
        default=None,
        metadata={
            "name": "Commission",
            "type": "Element",
            "namespace": "http://www.travelport.com/schema/common_v52_0",
        }
    )
    tour_code: Optional[TourCode] = field(
        default=None,
        metadata={
            "name": "TourCode",
            "type": "Element",
        }
    )
    ticket_endorsement: List[TicketEndorsement] = field(
        default_factory=list,
        metadata={
            "name": "TicketEndorsement",
            "type": "Element",
            "max_occurs": 3,
        }
    )
    value_modifier: Optional[TypeTicketModifierValueType] = field(
        default=None,
        metadata={
            "name": "ValueModifier",
            "type": "Element",
        }
    )
    document_select: Optional[DocumentSelect] = field(
        default=None,
        metadata={
            "name": "DocumentSelect",
            "type": "Element",
        }
    )
    document_options: Optional[DocumentOptions] = field(
        default=None,
        metadata={
            "name": "DocumentOptions",
            "type": "Element",
        }
    )
    segment_select: Optional[SegmentSelect] = field(
        default=None,
        metadata={
            "name": "SegmentSelect",
            "type": "Element",
        }
    )
    segment_modifiers: List[SegmentModifiers] = field(
        default_factory=list,
        metadata={
            "name": "SegmentModifiers",
            "type": "Element",
            "max_occurs": 999,
        }
    )
    supplier_locator: Optional[SupplierLocator] = field(
        default=None,
        metadata={
            "name": "SupplierLocator",
            "type": "Element",
            "namespace": "http://www.travelport.com/schema/common_v52_0",
        }
    )
    destination_purpose_code: Optional[DestinationPurposeCode] = field(
        default=None,
        metadata={
            "name": "DestinationPurposeCode",
            "type": "Element",
        }
    )
    language_option: List[LanguageOption] = field(
        default_factory=list,
        metadata={
            "name": "LanguageOption",
            "type": "Element",
            "max_occurs": 2,
        }
    )
    land_charges: Optional[LandCharges] = field(
        default=None,
        metadata={
            "name": "LandCharges",
            "type": "Element",
        }
    )
    print_blank_form_itinerary: Optional[PrintBlankFormItinerary] = field(
        default=None,
        metadata={
            "name": "PrintBlankFormItinerary",
            "type": "Element",
        }
    )
    exempt_obfee: Optional[ExemptObfee] = field(
        default=None,
        metadata={
            "name": "ExemptOBFee",
            "type": "Element",
        }
    )
    is_primary_di: bool = field(
        default=False,
        metadata={
            "name": "IsPrimaryDI",
            "type": "Attribute",
        }
    )
    document_instruction_number: Optional[str] = field(
        default=None,
        metadata={
            "name": "DocumentInstructionNumber",
            "type": "Attribute",
        }
    )
    reference: Optional[str] = field(
        default=None,
        metadata={
            "name": "Reference",
            "type": "Attribute",
            "min_length": 1,
            "max_length": 30,
        }
    )
    status: Optional[str] = field(
        default=None,
        metadata={
            "name": "Status",
            "type": "Attribute",
            "max_length": 30,
        }
    )
    free_text: Optional[str] = field(
        default=None,
        metadata={
            "name": "FreeText",
            "type": "Attribute",
            "max_length": 756,
        }
    )
    name_number: Optional[str] = field(
        default=None,
        metadata={
            "name": "NameNumber",
            "type": "Attribute",
        }
    )
    ticket_record: Optional[str] = field(
        default=None,
        metadata={
            "name": "TicketRecord",
            "type": "Attribute",
        }
    )
    plating_carrier: Optional[str] = field(
        default=None,
        metadata={
            "name": "PlatingCarrier",
            "type": "Attribute",
            "length": 2,
        }
    )
    exempt_vat: Optional[bool] = field(
        default=None,
        metadata={
            "name": "ExemptVAT",
            "type": "Attribute",
        }
    )
    net_remit_applied: Optional[bool] = field(
        default=None,
        metadata={
            "name": "NetRemitApplied",
            "type": "Attribute",
        }
    )
    free_ticket: Optional[bool] = field(
        default=None,
        metadata={
            "name": "FreeTicket",
            "type": "Attribute",
        }
    )
    currency_override_code: Optional[str] = field(
        default=None,
        metadata={
            "name": "CurrencyOverrideCode",
            "type": "Attribute",
            "length": 1,
        }
    )
    key: Optional[str] = field(
        default=None,
        metadata={
            "name": "Key",
            "type": "Attribute",
        }
    )
    el_stat: Optional[TypeElementStatus] = field(
        default=None,
        metadata={
            "name": "ElStat",
            "type": "Attribute",
        }
    )
    key_override: Optional[bool] = field(
        default=None,
        metadata={
            "name": "KeyOverride",
            "type": "Attribute",
        }
    )

    @dataclass
    class BulkTicket(TypeBulkTicketModifierType):
        """
        :ivar non_refundable: Indicates bulk ticket being non-refundable
        """
        non_refundable: Optional[bool] = field(
            default=None,
            metadata={
                "name": "NonRefundable",
                "type": "Attribute",
            }
        )


@dataclass
class TypeBaseAirSegment(Segment):
    """
    :ivar sponsored_flt_info:
    :ivar codeshare_info:
    :ivar air_avail_info:
    :ivar flight_details:
    :ivar flight_details_ref:
    :ivar alternate_location_distance_ref:
    :ivar connection:
    :ivar sell_message:
    :ivar rail_coach_details:
    :ivar open_segment: Indicates OpenSegment when True
    :ivar group: The Origin Destination Grouping of this segment.
    :ivar carrier: The carrier that is marketing this segment
    :ivar cabin_class: Specifies Cabin class for a group of class of
        services. Cabin class is not identified if it is not present.
    :ivar flight_number: The flight number under which the marketing
        carrier is marketing this flight
    :ivar origin: The IATA location code for this origination of this
        entity.
    :ivar destination: The IATA location code for this destination of
        this entity.
    :ivar departure_time: The date and time at which this entity
        departs. Date and time are represented as Airport Local Time at
        the place of departure. The correct time zone offset is also
        included.
    :ivar arrival_time: The date and time at which this entity arrives
        at the destination. Date and time are represented as Airport
        Local Time at the place of arrival. The correct time zone offset
        is also included.
    :ivar flight_time: Time spent (minutes) traveling in flight,
        including airport taxi time.
    :ivar travel_time: Total time spent (minutes) traveling including
        flight time and ground time.
    :ivar distance: The distance traveled. Units are specified in the
        parent response element.
    :ivar provider_code:
    :ivar supplier_code:
    :ivar participant_level: Type of sell agreement between host and
        link carrier.
    :ivar link_availability: Indicates if carrier has link (carrier
        specific) display option.
    :ivar polled_availability_option: Indicates if carrier has Inside
        (polled)Availability option.
    :ivar availability_display_type: The type of availability from which
        the segment is sold.Possible Values (List): G - General S -
        Flight Specific L - Carrier Specific/Direct Access M - Manual
        Sell F - Fare Shop/Optimal Shop Q - Fare Specific Fare Quote
        unbooked R - Redemption Availability used to complete the sell.
        Supported Providers: 1G,1V.
    :ivar class_of_service:
    :ivar eticketability: Identifies if this particular segment is
        E-Ticketable
    :ivar equipment: Identifies the equipment that this segment is
        operating under.
    :ivar marriage_group: Identifies this segment as being a married
        segment. It is paired with other segments of the same value.
    :ivar number_of_stops: Identifies the number of stops for each
        within the segment.
    :ivar seamless: Identifies that this segment was sold via a direct
        access channel to the marketing carrier.
    :ivar change_of_plane: Indicates the traveler must change planes
        between flights.
    :ivar guaranteed_payment_carrier: Identifies that this segment has
        Guaranteed Payment Carrier.
    :ivar host_token_ref: Identifies that this segment has Guaranteed
        Payment Carrier.
    :ivar provider_reservation_info_ref: Provider reservation reference
        key.
    :ivar passive_provider_reservation_info_ref: Provider reservation
        reference key.
    :ivar optional_services_indicator: Indicates true if flight provides
        optional services.
    :ivar availability_source: Indicates Availability source of
        AirSegment.
    :ivar apisrequirements_ref: Reference to the APIS Requirements for
        this AirSegment.
    :ivar black_listed: Indicates blacklisted carriers which are banned
        from servicing points to, from and within the European
        Community.
    :ivar operational_status: Refers to the flight operational status
        for the segment. This attribute will only be returned in the
        AvailabilitySearchRsp and not used/returned in any other
        request/responses. If this attribute is not returned back in the
        response, it means the flight is operational and not past
        scheduled departure.
    :ivar number_in_party: Number of person traveling in this air
        segment excluding the number of infants on lap.
    :ivar rail_coach_number: Coach number for which rail
        seatmap/coachmap is returned.
    :ivar booking_date: Used for rapid reprice. The date the booking was
        made. Providers: 1G/1V/1P/1S/1A
    :ivar flown_segment: Used for rapid reprice. Tells whether or not
        the air segment has been flown. Providers: 1G/1V/1P/1S/1A
    :ivar schedule_change: Used for rapid reprice. Tells whether or not
        the air segment had a schedule change by the carrier. This tells
        rapid reprice that the change in the air segment was involuntary
        and because of a schedule change, not because the user is
        changing the segment. Providers: 1G/1V/1P/1S/1A
    :ivar brand_indicator: Value “B” specifies that the carrier supports
        Rich Content and Branding.  The Brand Indicator is only returned
        in the availability search response.  Provider: 1G, 1V, 1P, ACH
    """
    class Meta:
        name = "typeBaseAirSegment"
        target_namespace = "http://www.travelport.com/schema/air_v52_0"

    sponsored_flt_info: Optional[SponsoredFltInfo] = field(
        default=None,
        metadata={
            "name": "SponsoredFltInfo",
            "type": "Element",
            "namespace": "http://www.travelport.com/schema/air_v52_0",
        }
    )
    codeshare_info: Optional[CodeshareInfo] = field(
        default=None,
        metadata={
            "name": "CodeshareInfo",
            "type": "Element",
            "namespace": "http://www.travelport.com/schema/air_v52_0",
        }
    )
    air_avail_info: List[AirAvailInfo] = field(
        default_factory=list,
        metadata={
            "name": "AirAvailInfo",
            "type": "Element",
            "namespace": "http://www.travelport.com/schema/air_v52_0",
            "max_occurs": 999,
        }
    )
    flight_details: List[FlightDetails] = field(
        default_factory=list,
        metadata={
            "name": "FlightDetails",
            "type": "Element",
            "namespace": "http://www.travelport.com/schema/air_v52_0",
            "max_occurs": 999,
        }
    )
    flight_details_ref: List[FlightDetailsRef] = field(
        default_factory=list,
        metadata={
            "name": "FlightDetailsRef",
            "type": "Element",
            "namespace": "http://www.travelport.com/schema/air_v52_0",
            "max_occurs": 999,
        }
    )
    alternate_location_distance_ref: List[AlternateLocationDistanceRef] = field(
        default_factory=list,
        metadata={
            "name": "AlternateLocationDistanceRef",
            "type": "Element",
            "namespace": "http://www.travelport.com/schema/air_v52_0",
            "max_occurs": 999,
        }
    )
    connection: Optional[Connection] = field(
        default=None,
        metadata={
            "name": "Connection",
            "type": "Element",
            "namespace": "http://www.travelport.com/schema/air_v52_0",
        }
    )
    sell_message: List[str] = field(
        default_factory=list,
        metadata={
            "name": "SellMessage",
            "type": "Element",
            "namespace": "http://www.travelport.com/schema/common_v52_0",
            "max_occurs": 999,
        }
    )
    rail_coach_details: List[RailCoachDetails] = field(
        default_factory=list,
        metadata={
            "name": "RailCoachDetails",
            "type": "Element",
            "namespace": "http://www.travelport.com/schema/air_v52_0",
            "max_occurs": 999,
        }
    )
    open_segment: Optional[bool] = field(
        default=None,
        metadata={
            "name": "OpenSegment",
            "type": "Attribute",
        }
    )
    group: Optional[int] = field(
        default=None,
        metadata={
            "name": "Group",
            "type": "Attribute",
            "required": True,
        }
    )
    carrier: Optional[str] = field(
        default=None,
        metadata={
            "name": "Carrier",
            "type": "Attribute",
            "length": 2,
        }
    )
    cabin_class: Optional[str] = field(
        default=None,
        metadata={
            "name": "CabinClass",
            "type": "Attribute",
        }
    )
    flight_number: Optional[str] = field(
        default=None,
        metadata={
            "name": "FlightNumber",
            "type": "Attribute",
            "max_length": 5,
        }
    )
    origin: Optional[str] = field(
        default=None,
        metadata={
            "name": "Origin",
            "type": "Attribute",
            "required": True,
            "length": 3,
            "white_space": "collapse",
        }
    )
    destination: Optional[str] = field(
        default=None,
        metadata={
            "name": "Destination",
            "type": "Attribute",
            "required": True,
            "length": 3,
            "white_space": "collapse",
        }
    )
    departure_time: Optional[str] = field(
        default=None,
        metadata={
            "name": "DepartureTime",
            "type": "Attribute",
        }
    )
    arrival_time: Optional[str] = field(
        default=None,
        metadata={
            "name": "ArrivalTime",
            "type": "Attribute",
        }
    )
    flight_time: Optional[int] = field(
        default=None,
        metadata={
            "name": "FlightTime",
            "type": "Attribute",
        }
    )
    travel_time: Optional[int] = field(
        default=None,
        metadata={
            "name": "TravelTime",
            "type": "Attribute",
        }
    )
    distance: Optional[int] = field(
        default=None,
        metadata={
            "name": "Distance",
            "type": "Attribute",
        }
    )
    provider_code: Optional[str] = field(
        default=None,
        metadata={
            "name": "ProviderCode",
            "type": "Attribute",
            "min_length": 2,
            "max_length": 5,
        }
    )
    supplier_code: Optional[str] = field(
        default=None,
        metadata={
            "name": "SupplierCode",
            "type": "Attribute",
            "min_length": 1,
            "max_length": 5,
        }
    )
    participant_level: Optional[str] = field(
        default=None,
        metadata={
            "name": "ParticipantLevel",
            "type": "Attribute",
        }
    )
    link_availability: Optional[bool] = field(
        default=None,
        metadata={
            "name": "LinkAvailability",
            "type": "Attribute",
        }
    )
    polled_availability_option: Optional[str] = field(
        default=None,
        metadata={
            "name": "PolledAvailabilityOption",
            "type": "Attribute",
        }
    )
    availability_display_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "AvailabilityDisplayType",
            "type": "Attribute",
        }
    )
    class_of_service: Optional[str] = field(
        default=None,
        metadata={
            "name": "ClassOfService",
            "type": "Attribute",
            "min_length": 1,
            "max_length": 2,
        }
    )
    eticketability: Optional[TypeEticketability] = field(
        default=None,
        metadata={
            "name": "ETicketability",
            "type": "Attribute",
        }
    )
    equipment: Optional[str] = field(
        default=None,
        metadata={
            "name": "Equipment",
            "type": "Attribute",
            "length": 3,
        }
    )
    marriage_group: Optional[int] = field(
        default=None,
        metadata={
            "name": "MarriageGroup",
            "type": "Attribute",
        }
    )
    number_of_stops: Optional[int] = field(
        default=None,
        metadata={
            "name": "NumberOfStops",
            "type": "Attribute",
        }
    )
    seamless: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Seamless",
            "type": "Attribute",
        }
    )
    change_of_plane: bool = field(
        default=False,
        metadata={
            "name": "ChangeOfPlane",
            "type": "Attribute",
        }
    )
    guaranteed_payment_carrier: Optional[str] = field(
        default=None,
        metadata={
            "name": "GuaranteedPaymentCarrier",
            "type": "Attribute",
        }
    )
    host_token_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "HostTokenRef",
            "type": "Attribute",
        }
    )
    provider_reservation_info_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "ProviderReservationInfoRef",
            "type": "Attribute",
        }
    )
    passive_provider_reservation_info_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "PassiveProviderReservationInfoRef",
            "type": "Attribute",
        }
    )
    optional_services_indicator: Optional[bool] = field(
        default=None,
        metadata={
            "name": "OptionalServicesIndicator",
            "type": "Attribute",
        }
    )
    availability_source: Optional[str] = field(
        default=None,
        metadata={
            "name": "AvailabilitySource",
            "type": "Attribute",
            "max_length": 1,
        }
    )
    apisrequirements_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "APISRequirementsRef",
            "type": "Attribute",
        }
    )
    black_listed: Optional[bool] = field(
        default=None,
        metadata={
            "name": "BlackListed",
            "type": "Attribute",
        }
    )
    operational_status: Optional[str] = field(
        default=None,
        metadata={
            "name": "OperationalStatus",
            "type": "Attribute",
        }
    )
    number_in_party: Optional[int] = field(
        default=None,
        metadata={
            "name": "NumberInParty",
            "type": "Attribute",
            "min_inclusive": 1,
            "max_inclusive": 99,
        }
    )
    rail_coach_number: Optional[str] = field(
        default=None,
        metadata={
            "name": "RailCoachNumber",
            "type": "Attribute",
            "max_length": 4,
        }
    )
    booking_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "BookingDate",
            "type": "Attribute",
        }
    )
    flown_segment: bool = field(
        default=False,
        metadata={
            "name": "FlownSegment",
            "type": "Attribute",
        }
    )
    schedule_change: bool = field(
        default=False,
        metadata={
            "name": "ScheduleChange",
            "type": "Attribute",
        }
    )
    brand_indicator: Optional[str] = field(
        default=None,
        metadata={
            "name": "BrandIndicator",
            "type": "Attribute",
        }
    )


@dataclass
class AirPricingTicketingModifiers:
    """AirPricing TicketingModifier information
    - used to associate Ticketing Modifiers with one or more
    AirPricingInfos/ProviderReservationInfo"""
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    air_pricing_info_ref: List[AirPricingInfoRef] = field(
        default_factory=list,
        metadata={
            "name": "AirPricingInfoRef",
            "type": "Element",
            "max_occurs": 999,
        }
    )
    ticketing_modifiers: Optional[TicketingModifiers] = field(
        default=None,
        metadata={
            "name": "TicketingModifiers",
            "type": "Element",
            "required": True,
        }
    )


@dataclass
class AirSegment(TypeBaseAirSegment):
    """
    An Air marketable travel segment.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"


@dataclass
class BaggageAllowances:
    """
    Details of Baggage allowance.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    baggage_allowance_info: List[BaggageAllowanceInfo] = field(
        default_factory=list,
        metadata={
            "name": "BaggageAllowanceInfo",
            "type": "Element",
            "min_occurs": 1,
            "max_occurs": 999,
        }
    )
    carry_on_allowance_info: List[CarryOnAllowanceInfo] = field(
        default_factory=list,
        metadata={
            "name": "CarryOnAllowanceInfo",
            "type": "Element",
            "max_occurs": 999,
        }
    )
    embargo_info: List[EmbargoInfo] = field(
        default_factory=list,
        metadata={
            "name": "EmbargoInfo",
            "type": "Element",
            "max_occurs": 999,
        }
    )


@dataclass
class Brand:
    """
    Commercially recognized product offered by an airline.

    :ivar title: The additional titles associated to the brand
    :ivar text: Text associated to the brand
    :ivar image_location: Images associated to the brand
    :ivar optional_services:
    :ivar rules: Brand rules
    :ivar service_associations: Service associated with this brand
    :ivar upsell_brand: The unique identifier of the Upsell brand
    :ivar applicable_segment:
    :ivar default_brand_detail: Default brand details.
    :ivar key: Brand Key
    :ivar brand_id: The unique identifier of the brand
    :ivar name: The Title of the brand
    :ivar air_itinerary_details_ref: AirItinerary associated with this
        brand
    :ivar up_sell_brand_id:
    :ivar brand_found: Indicates whether brand for the fare was found
        for carrier or not
    :ivar up_sell_brand_found: Indicates whether upsell brand for the
        fare was found for carrier or not
    :ivar branded_details_available: Indicates if full details of the
        brand is available
    :ivar carrier:
    :ivar brand_tier: Modifier to price by specific brand tier number.
    :ivar brand_maintained: Indicates whether the brand was maintained
        from the original ticket.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    title: List[Title] = field(
        default_factory=list,
        metadata={
            "name": "Title",
            "type": "Element",
            "max_occurs": 2,
        }
    )
    text: List[Text] = field(
        default_factory=list,
        metadata={
            "name": "Text",
            "type": "Element",
            "max_occurs": 5,
        }
    )
    image_location: List[ImageLocation] = field(
        default_factory=list,
        metadata={
            "name": "ImageLocation",
            "type": "Element",
            "max_occurs": 3,
        }
    )
    optional_services: Optional[OptionalServices] = field(
        default=None,
        metadata={
            "name": "OptionalServices",
            "type": "Element",
        }
    )
    rules: List[Rules] = field(
        default_factory=list,
        metadata={
            "name": "Rules",
            "type": "Element",
            "max_occurs": 99,
        }
    )
    service_associations: Optional[ServiceAssociations] = field(
        default=None,
        metadata={
            "name": "ServiceAssociations",
            "type": "Element",
        }
    )
    upsell_brand: Optional[UpsellBrand] = field(
        default=None,
        metadata={
            "name": "UpsellBrand",
            "type": "Element",
        }
    )
    applicable_segment: List[TypeApplicableSegment] = field(
        default_factory=list,
        metadata={
            "name": "ApplicableSegment",
            "type": "Element",
            "max_occurs": 99,
        }
    )
    default_brand_detail: List[DefaultBrandDetail] = field(
        default_factory=list,
        metadata={
            "name": "DefaultBrandDetail",
            "type": "Element",
            "max_occurs": 99,
        }
    )
    key: Optional[str] = field(
        default=None,
        metadata={
            "name": "Key",
            "type": "Attribute",
        }
    )
    brand_id: Optional[str] = field(
        default=None,
        metadata={
            "name": "BrandID",
            "type": "Attribute",
            "min_length": 1,
            "max_length": 19,
        }
    )
    name: Optional[str] = field(
        default=None,
        metadata={
            "name": "Name",
            "type": "Attribute",
        }
    )
    air_itinerary_details_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "AirItineraryDetailsRef",
            "type": "Attribute",
        }
    )
    up_sell_brand_id: Optional[str] = field(
        default=None,
        metadata={
            "name": "UpSellBrandID",
            "type": "Attribute",
            "min_length": 1,
            "max_length": 19,
        }
    )
    brand_found: Optional[bool] = field(
        default=None,
        metadata={
            "name": "BrandFound",
            "type": "Attribute",
        }
    )
    up_sell_brand_found: Optional[bool] = field(
        default=None,
        metadata={
            "name": "UpSellBrandFound",
            "type": "Attribute",
        }
    )
    branded_details_available: Optional[bool] = field(
        default=None,
        metadata={
            "name": "BrandedDetailsAvailable",
            "type": "Attribute",
        }
    )
    carrier: Optional[str] = field(
        default=None,
        metadata={
            "name": "Carrier",
            "type": "Attribute",
            "length": 2,
        }
    )
    brand_tier: Optional[str] = field(
        default=None,
        metadata={
            "name": "BrandTier",
            "type": "Attribute",
            "min_length": 1,
            "max_length": 10,
        }
    )
    brand_maintained: Optional[str] = field(
        default=None,
        metadata={
            "name": "BrandMaintained",
            "type": "Attribute",
            "min_length": 1,
            "max_length": 99,
        }
    )


@dataclass
class FareRule:
    """
    Fare Rule Container.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    fare_rule_long: List[FareRuleLong] = field(
        default_factory=list,
        metadata={
            "name": "FareRuleLong",
            "type": "Element",
            "max_occurs": 999,
        }
    )
    fare_rule_short: List[FareRuleShort] = field(
        default_factory=list,
        metadata={
            "name": "FareRuleShort",
            "type": "Element",
            "max_occurs": 999,
        }
    )
    rule_advanced_purchase: Optional[RuleAdvancedPurchase] = field(
        default=None,
        metadata={
            "name": "RuleAdvancedPurchase",
            "type": "Element",
        }
    )
    rule_length_of_stay: Optional[RuleLengthOfStay] = field(
        default=None,
        metadata={
            "name": "RuleLengthOfStay",
            "type": "Element",
        }
    )
    rule_charges: Optional[RuleCharges] = field(
        default=None,
        metadata={
            "name": "RuleCharges",
            "type": "Element",
        }
    )
    fare_rule_result_message: List[TypeResultMessage] = field(
        default_factory=list,
        metadata={
            "name": "FareRuleResultMessage",
            "type": "Element",
            "max_occurs": 999,
        }
    )
    structured_fare_rules: Optional[StructuredFareRulesType] = field(
        default=None,
        metadata={
            "name": "StructuredFareRules",
            "type": "Element",
        }
    )
    fare_info_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "FareInfoRef",
            "type": "Attribute",
        }
    )
    rule_number: Optional[str] = field(
        default=None,
        metadata={
            "name": "RuleNumber",
            "type": "Attribute",
        }
    )
    source: Optional[str] = field(
        default=None,
        metadata={
            "name": "Source",
            "type": "Attribute",
        }
    )
    tariff_number: Optional[str] = field(
        default=None,
        metadata={
            "name": "TariffNumber",
            "type": "Attribute",
        }
    )
    provider_code: Optional[str] = field(
        default=None,
        metadata={
            "name": "ProviderCode",
            "type": "Attribute",
            "min_length": 2,
            "max_length": 5,
        }
    )
    supplier_code: Optional[str] = field(
        default=None,
        metadata={
            "name": "SupplierCode",
            "type": "Attribute",
            "min_length": 1,
            "max_length": 5,
        }
    )


@dataclass
class FlightOptionsList:
    """
    List of Flight Options for the itinerary.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    flight_option: List[FlightOption] = field(
        default_factory=list,
        metadata={
            "name": "FlightOption",
            "type": "Element",
            "max_occurs": 999,
        }
    )


@dataclass
class AirItinerary:
    """
    A container for an Air only travel itinerary.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    air_segment: List[AirSegment] = field(
        default_factory=list,
        metadata={
            "name": "AirSegment",
            "type": "Element",
            "min_occurs": 1,
            "max_occurs": 999,
        }
    )
    host_token: List[HostToken] = field(
        default_factory=list,
        metadata={
            "name": "HostToken",
            "type": "Element",
            "namespace": "http://www.travelport.com/schema/common_v52_0",
            "max_occurs": 999,
        }
    )
    apisrequirements: List[Apisrequirements] = field(
        default_factory=list,
        metadata={
            "name": "APISRequirements",
            "type": "Element",
            "max_occurs": 999,
        }
    )


@dataclass
class AirSegmentData:
    """
    The shared object list of AirsegmentData.

    :ivar air_segment_ref:
    :ivar baggage_allowance:
    :ivar brand:
    :ivar cabin_class: Specifies Cabin class for a group of class of
        services. Cabin class is not identified if it is not present.
    :ivar class_of_service:
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    air_segment_ref: List[AirSegmentRef] = field(
        default_factory=list,
        metadata={
            "name": "AirSegmentRef",
            "type": "Element",
            "max_occurs": 999,
        }
    )
    baggage_allowance: List[BaggageAllowance] = field(
        default_factory=list,
        metadata={
            "name": "BaggageAllowance",
            "type": "Element",
            "max_occurs": 999,
        }
    )
    brand: List[Brand] = field(
        default_factory=list,
        metadata={
            "name": "Brand",
            "type": "Element",
            "max_occurs": 99,
        }
    )
    cabin_class: Optional[str] = field(
        default=None,
        metadata={
            "name": "CabinClass",
            "type": "Attribute",
        }
    )
    class_of_service: Optional[str] = field(
        default=None,
        metadata={
            "name": "ClassOfService",
            "type": "Attribute",
            "min_length": 1,
            "max_length": 2,
        }
    )


@dataclass
class AirSegmentError:
    """
    Container to return error messages corresponding to AirSegment.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    air_segment: Optional[AirSegment] = field(
        default=None,
        metadata={
            "name": "AirSegment",
            "type": "Element",
            "required": True,
        }
    )
    error_message: Optional[str] = field(
        default=None,
        metadata={
            "name": "ErrorMessage",
            "type": "Element",
            "required": True,
        }
    )


@dataclass
class AirSegmentList:
    """
    The shared object list of AirSegments.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    air_segment: List[AirSegment] = field(
        default_factory=list,
        metadata={
            "name": "AirSegment",
            "type": "Element",
            "min_occurs": 1,
            "max_occurs": 999,
        }
    )


@dataclass
class AirSolution:
    """
    Defines an air solution that is comprised of an itinerary (the segments) along
    with the passengers.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    search_traveler: List[SearchTraveler] = field(
        default_factory=list,
        metadata={
            "name": "SearchTraveler",
            "type": "Element",
            "max_occurs": 9,
        }
    )
    air_segment: List[AirSegment] = field(
        default_factory=list,
        metadata={
            "name": "AirSegment",
            "type": "Element",
            "min_occurs": 1,
            "max_occurs": 16,
        }
    )
    host_token: List[HostToken] = field(
        default_factory=list,
        metadata={
            "name": "HostToken",
            "type": "Element",
            "namespace": "http://www.travelport.com/schema/common_v52_0",
            "max_occurs": 16,
        }
    )
    fare_basis: List[FareBasis] = field(
        default_factory=list,
        metadata={
            "name": "FareBasis",
            "type": "Element",
            "max_occurs": 16,
        }
    )


@dataclass
class ExchangeAirSegment:
    """
    A container to define segment and cabin class in order to process an exchange.

    :ivar air_segment:
    :ivar cabin_class:
    :ivar fare_basis_code: The fare basis code to be used for exchange
        of this segment.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    air_segment: Optional[AirSegment] = field(
        default=None,
        metadata={
            "name": "AirSegment",
            "type": "Element",
            "required": True,
        }
    )
    cabin_class: Optional[CabinClass] = field(
        default=None,
        metadata={
            "name": "CabinClass",
            "type": "Element",
            "namespace": "http://www.travelport.com/schema/common_v52_0",
            "required": True,
        }
    )
    fare_basis_code: Optional[str] = field(
        default=None,
        metadata={
            "name": "FareBasisCode",
            "type": "Attribute",
        }
    )


@dataclass
class FareInfo:
    """
    Information about this fare component.

    :ivar fare_ticket_designator:
    :ivar ticketing_code:
    :ivar fare_surcharge:
    :ivar account_code:
    :ivar contract_code:
    :ivar endorsement:
    :ivar baggage_allowance:
    :ivar fare_rule_key:
    :ivar fare_rule_failure_info:
    :ivar fare_remark_ref:
    :ivar brand:
    :ivar commission: Specifies the Commission for Agency for a
        particular Fare component. Apllicable Providers are 1G and 1V.
    :ivar fare_attributes: Returns all fare attributes separated by pipe
        ‘|’. Attribute information is returned by comma separated values
        for each attribute. These information include attribute number,
        chargeable indicator and supplementary info. Attribute numbers:
        1 - Checked Bag, 2 - Carry On, 3 - Rebooking, 4 - Refund, 5 -
        Seats, 6 - Meals, 7 - WiFi. Chargeable Indicator: Y -
        Chargeable, N - Not Chargeable. Supplementary Information that
        will be returned is : For 1 and 2 - Baggage weights. For 3 –
        Changeable Info. For 4 – Refundable Info. For 5 - Seat
        description. For 6 – Meal description. For 7 – WiFi description.
        Example:
        1,Y,23|1,N,50|2,N,8|3,N,CHANGEABLE|4,Y,REFUNDABLE|5,N,SEATING|5,N,MIDDLE|6,Y,SOFT
        DRINK|6,N,ALCOHOLIC DRINK|6,Y,SNACK|7,X,WIFI
    :ivar change_penalty: The penalty (if any) to change the itinerary
    :ivar cancel_penalty: The penalty (if any) to cancel the fare
    :ivar fare_rules_filter:
    :ivar key:
    :ivar fare_basis: The fare basis code for this fare
    :ivar passenger_type_code: The PTC that is associated with this
        fare.
    :ivar origin: Returns the airport or city code that defines the
        origin market for this fare.
    :ivar destination: Returns the airport or city code that defines the
        destination market for this fare.
    :ivar effective_date: Returns the date on which this fare was quoted
    :ivar travel_date: Returns the departure date of the first segment
        that uses this fare.
    :ivar departure_date: Returns the departure date of the first
        segment of the journey.
    :ivar amount:
    :ivar private_fare:
    :ivar negotiated_fare: Identifies the fare as a Negotiated Fare.
    :ivar tour_code:
    :ivar waiver_code:
    :ivar not_valid_before: Fare not valid before this date.
    :ivar not_valid_after: Fare not valid after this date.
    :ivar pseudo_city_code: Provider PseudoCityCode associated with
        private fare.
    :ivar fare_family: An alpha-numeric string which denotes fare
        family. Some carriers may return this in lieu of or in addition
        to the CabinClass.
    :ivar promotional_fare: Boolean to describe whether the Fare is
        Promotional fare or not.
    :ivar car_code:
    :ivar value_code:
    :ivar el_stat: This attribute is used to show the action results of
        an element. Possible values are "A" (when elements have been
        added to the UR) and "M" (when existing elements have been
        modified). Response only.
    :ivar key_override: If a duplicate key is found where we are adding
        elements in some cases like URAdd, then instead of erroring out
        set this attribute to true.
    :ivar bulk_ticket: Whether the ticket can be issued as bulk for this
        fare. Providers supported: Worldspan
    :ivar inclusive_tour: Whether the ticket can be issued as part of
        included package for this fare. Providers supported: Worldspan
    :ivar value: Used in rapid reprice
    :ivar supplier_code: Code of the provider returning this fare info
    :ivar tax_amount: Currency code and value for the approximate tax
        amount for this fare component.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    fare_ticket_designator: List[FareTicketDesignator] = field(
        default_factory=list,
        metadata={
            "name": "FareTicketDesignator",
            "type": "Element",
            "max_occurs": 999,
        }
    )
    ticketing_code: List[TicketingCode] = field(
        default_factory=list,
        metadata={
            "name": "TicketingCode",
            "type": "Element",
            "max_occurs": 999,
        }
    )
    fare_surcharge: List[FareSurcharge] = field(
        default_factory=list,
        metadata={
            "name": "FareSurcharge",
            "type": "Element",
            "max_occurs": 999,
        }
    )
    account_code: List[AccountCode] = field(
        default_factory=list,
        metadata={
            "name": "AccountCode",
            "type": "Element",
            "namespace": "http://www.travelport.com/schema/common_v52_0",
            "max_occurs": 999,
        }
    )
    contract_code: List[ContractCode] = field(
        default_factory=list,
        metadata={
            "name": "ContractCode",
            "type": "Element",
            "max_occurs": 999,
        }
    )
    endorsement: List[Endorsement] = field(
        default_factory=list,
        metadata={
            "name": "Endorsement",
            "type": "Element",
            "namespace": "http://www.travelport.com/schema/common_v52_0",
            "max_occurs": 999,
        }
    )
    baggage_allowance: Optional[BaggageAllowance] = field(
        default=None,
        metadata={
            "name": "BaggageAllowance",
            "type": "Element",
        }
    )
    fare_rule_key: Optional[FareRuleKey] = field(
        default=None,
        metadata={
            "name": "FareRuleKey",
            "type": "Element",
        }
    )
    fare_rule_failure_info: Optional[FareRuleFailureInfo] = field(
        default=None,
        metadata={
            "name": "FareRuleFailureInfo",
            "type": "Element",
        }
    )
    fare_remark_ref: List[FareRemarkRef] = field(
        default_factory=list,
        metadata={
            "name": "FareRemarkRef",
            "type": "Element",
            "max_occurs": 999,
        }
    )
    brand: Optional[Brand] = field(
        default=None,
        metadata={
            "name": "Brand",
            "type": "Element",
        }
    )
    commission: Optional[Commission] = field(
        default=None,
        metadata={
            "name": "Commission",
            "type": "Element",
            "namespace": "http://www.travelport.com/schema/common_v52_0",
        }
    )
    fare_attributes: Optional[str] = field(
        default=None,
        metadata={
            "name": "FareAttributes",
            "type": "Element",
        }
    )
    change_penalty: Optional[TypeFarePenalty] = field(
        default=None,
        metadata={
            "name": "ChangePenalty",
            "type": "Element",
        }
    )
    cancel_penalty: Optional[TypeFarePenalty] = field(
        default=None,
        metadata={
            "name": "CancelPenalty",
            "type": "Element",
        }
    )
    fare_rules_filter: Optional[FareRulesFilter] = field(
        default=None,
        metadata={
            "name": "FareRulesFilter",
            "type": "Element",
        }
    )
    key: Optional[str] = field(
        default=None,
        metadata={
            "name": "Key",
            "type": "Attribute",
            "required": True,
        }
    )
    fare_basis: Optional[str] = field(
        default=None,
        metadata={
            "name": "FareBasis",
            "type": "Attribute",
            "required": True,
        }
    )
    passenger_type_code: Optional[str] = field(
        default=None,
        metadata={
            "name": "PassengerTypeCode",
            "type": "Attribute",
            "required": True,
            "min_length": 3,
            "max_length": 5,
        }
    )
    origin: Optional[str] = field(
        default=None,
        metadata={
            "name": "Origin",
            "type": "Attribute",
            "required": True,
            "length": 3,
            "white_space": "collapse",
        }
    )
    destination: Optional[str] = field(
        default=None,
        metadata={
            "name": "Destination",
            "type": "Attribute",
            "required": True,
            "length": 3,
            "white_space": "collapse",
        }
    )
    effective_date: Optional[str] = field(
        default=None,
        metadata={
            "name": "EffectiveDate",
            "type": "Attribute",
            "required": True,
        }
    )
    travel_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "TravelDate",
            "type": "Attribute",
        }
    )
    departure_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "DepartureDate",
            "type": "Attribute",
        }
    )
    amount: Optional[str] = field(
        default=None,
        metadata={
            "name": "Amount",
            "type": "Attribute",
        }
    )
    private_fare: Optional[TypePrivateFare] = field(
        default=None,
        metadata={
            "name": "PrivateFare",
            "type": "Attribute",
        }
    )
    negotiated_fare: Optional[bool] = field(
        default=None,
        metadata={
            "name": "NegotiatedFare",
            "type": "Attribute",
        }
    )
    tour_code: Optional[str] = field(
        default=None,
        metadata={
            "name": "TourCode",
            "type": "Attribute",
            "max_length": 15,
        }
    )
    waiver_code: Optional[str] = field(
        default=None,
        metadata={
            "name": "WaiverCode",
            "type": "Attribute",
        }
    )
    not_valid_before: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "NotValidBefore",
            "type": "Attribute",
        }
    )
    not_valid_after: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "NotValidAfter",
            "type": "Attribute",
        }
    )
    pseudo_city_code: Optional[str] = field(
        default=None,
        metadata={
            "name": "PseudoCityCode",
            "type": "Attribute",
            "min_length": 2,
            "max_length": 10,
        }
    )
    fare_family: Optional[str] = field(
        default=None,
        metadata={
            "name": "FareFamily",
            "type": "Attribute",
            "min_length": 0,
            "max_length": 32,
        }
    )
    promotional_fare: Optional[bool] = field(
        default=None,
        metadata={
            "name": "PromotionalFare",
            "type": "Attribute",
        }
    )
    car_code: Optional[str] = field(
        default=None,
        metadata={
            "name": "CarCode",
            "type": "Attribute",
            "max_length": 15,
        }
    )
    value_code: Optional[str] = field(
        default=None,
        metadata={
            "name": "ValueCode",
            "type": "Attribute",
            "max_length": 15,
        }
    )
    el_stat: Optional[TypeElementStatus] = field(
        default=None,
        metadata={
            "name": "ElStat",
            "type": "Attribute",
        }
    )
    key_override: Optional[bool] = field(
        default=None,
        metadata={
            "name": "KeyOverride",
            "type": "Attribute",
        }
    )
    bulk_ticket: Optional[bool] = field(
        default=None,
        metadata={
            "name": "BulkTicket",
            "type": "Attribute",
        }
    )
    inclusive_tour: Optional[bool] = field(
        default=None,
        metadata={
            "name": "InclusiveTour",
            "type": "Attribute",
        }
    )
    value: Optional[str] = field(
        default=None,
        metadata={
            "name": "Value",
            "type": "Attribute",
        }
    )
    supplier_code: Optional[str] = field(
        default=None,
        metadata={
            "name": "SupplierCode",
            "type": "Attribute",
            "min_length": 1,
            "max_length": 5,
        }
    )
    tax_amount: Optional[str] = field(
        default=None,
        metadata={
            "name": "TaxAmount",
            "type": "Attribute",
        }
    )


@dataclass
class JourneyData:
    """
    Performs journey aware air availability.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    air_segment: List[AirSegment] = field(
        default_factory=list,
        metadata={
            "name": "AirSegment",
            "type": "Element",
            "min_occurs": 1,
            "max_occurs": 99,
        }
    )


@dataclass
class TcrrefundBundle:
    """
    Bundle refund, pricing, and penalty information for a TCR reservation Used both
    in request and response.

    :ivar air_refund_info:
    :ivar waiver_code:
    :ivar air_segment:
    :ivar fee_info:
    :ivar tax_info: Itinerary level taxes
    :ivar host_token:
    :ivar tcrnumber: The identifying number for a Ticketless Air
        Reservation.
    :ivar refund_type: Specifies whether this bundle was auto or
        manually generated
    :ivar refund_access_code:
    """
    class Meta:
        name = "TCRRefundBundle"
        namespace = "http://www.travelport.com/schema/air_v52_0"

    air_refund_info: Optional[AirRefundInfo] = field(
        default=None,
        metadata={
            "name": "AirRefundInfo",
            "type": "Element",
            "required": True,
        }
    )
    waiver_code: Optional[WaiverCode] = field(
        default=None,
        metadata={
            "name": "WaiverCode",
            "type": "Element",
        }
    )
    air_segment: List[AirSegment] = field(
        default_factory=list,
        metadata={
            "name": "AirSegment",
            "type": "Element",
            "max_occurs": 999,
        }
    )
    fee_info: List[FeeInfo] = field(
        default_factory=list,
        metadata={
            "name": "FeeInfo",
            "type": "Element",
            "max_occurs": 999,
        }
    )
    tax_info: List[TaxInfo] = field(
        default_factory=list,
        metadata={
            "name": "TaxInfo",
            "type": "Element",
            "max_occurs": 999,
        }
    )
    host_token: List[HostToken] = field(
        default_factory=list,
        metadata={
            "name": "HostToken",
            "type": "Element",
            "namespace": "http://www.travelport.com/schema/common_v52_0",
            "max_occurs": 999,
        }
    )
    tcrnumber: Optional[str] = field(
        default=None,
        metadata={
            "name": "TCRNumber",
            "type": "Attribute",
            "required": True,
        }
    )
    refund_type: Optional[TcrrefundBundleRefundType] = field(
        default=None,
        metadata={
            "name": "RefundType",
            "type": "Attribute",
            "required": True,
        }
    )
    refund_access_code: Optional[str] = field(
        default=None,
        metadata={
            "name": "RefundAccessCode",
            "type": "Attribute",
            "namespace": "http://www.travelport.com/schema/air_v52_0",
            "min_length": 1,
            "max_length": 32,
        }
    )


@dataclass
class AirExchangeMultiQuoteOption:
    """
    The shared object list of AirExchangeMultiQuoteOptions.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    air_segment_data: List[AirSegmentData] = field(
        default_factory=list,
        metadata={
            "name": "AirSegmentData",
            "type": "Element",
            "max_occurs": 999,
        }
    )
    air_exchange_bundle_total: Optional[AirExchangeBundleTotal] = field(
        default=None,
        metadata={
            "name": "AirExchangeBundleTotal",
            "type": "Element",
        }
    )
    air_exchange_bundle_list: List[AirExchangeBundleList] = field(
        default_factory=list,
        metadata={
            "name": "AirExchangeBundleList",
            "type": "Element",
            "max_occurs": 999,
        }
    )


@dataclass
class AirPricingInfo:
    """Per traveler type pricing breakdown.

    This will reflect the pricing for all travelers of the specified
    type.

    :ivar fare_info:
    :ivar fare_status:
    :ivar fare_info_ref:
    :ivar booking_info:
    :ivar tax_info:
    :ivar fare_calc:
    :ivar passenger_type:
    :ivar booking_traveler_ref:
    :ivar waiver_code:
    :ivar payment_ref: The reference to the Payment if Air Pricing is
        charged
    :ivar change_penalty: The penalty (if any) to change the itinerary
    :ivar cancel_penalty: The penalty (if any) to cancel the fare
    :ivar no_show_penalty: The NoShow penalty (if any)
    :ivar most_restrictive_penalties: Contain CAT16 Most Restrictive
        Penalties.
    :ivar fee_info:
    :ivar adjustment:
    :ivar yield_value:
    :ivar air_pricing_modifiers:
    :ivar ticketing_modifiers_ref:
    :ivar air_segment_pricing_modifiers:
    :ivar flight_options_list:
    :ivar baggage_allowances:
    :ivar fare_rules_filter:
    :ivar policy_codes_list: A list of codes that indicate why an item
        was determined to be ‘out of policy’
    :ivar price_change: Indicates a price change is found in Fare
        Control Manager
    :ivar action_details:
    :ivar commission: Allows an agency to update the commission to a new
        or different commission rate which will be applied at time of
        ticketing. The commission Modifier allows the user specify how
        the commission change is to applied
    :ivar origin: The IATA location code for this origination of this
        entity.
    :ivar destination: The IATA location code for this destination of
        this entity.
    :ivar key:
    :ivar command_key: The command identifier used when this is in
        response to an AirPricingCommand. Not used in any request
        processing.
    :ivar total_price: The total price for this entity including base
        price and all taxes.
    :ivar base_price: Represents the base price for this entity. This
        does not include any taxes or surcharges.
    :ivar approximate_total_price: The Converted total price in Default
        Currency for this entity including base price and all taxes.
    :ivar approximate_base_price: The Converted base price in Default
        Currency for this entity. This does not include any taxes or
        surcharges.
    :ivar equivalent_base_price: Represents the base price in the
        related currency for this entity. This does not include any
        taxes or surcharges.
    :ivar taxes: The aggregated amount of all the taxes that are
        associated with this entity. See the associated TaxInfo array
        for a breakdown of the individual taxes.
    :ivar fees: The aggregated amount of all the fees that are
        associated with this entity. See the associated FeeInfo array
        for a breakdown of the individual fees.
    :ivar services: The total cost for all optional services.
    :ivar approximate_taxes: The Converted tax amount in Default
        Currency.
    :ivar approximate_fees: The Converted fee amount in Default
        Currency.
    :ivar provider_code:
    :ivar supplier_code:
    :ivar amount_type: This field displays type of payment amount when
        it is non-monetary. Presently available/supported value is
        "Flight Pass Credits".
    :ivar includes_vat: Indicates whether the Base Price includes VAT.
    :ivar exchange_amount: The amount to pay to cover the exchange of
        the fare (includes penalties).
    :ivar forfeit_amount: The amount forfeited when the fare is
        exchanged.
    :ivar refundable: Indicates whether the fare is refundable
    :ivar exchangeable: Indicates whether the fare is exchangeable
    :ivar latest_ticketing_time: The latest date/time at which this
        pricing information is valid
    :ivar pricing_method:
    :ivar checksum: A security value used to guarantee that the pricing
        data sent in matches the pricing data previously returned
    :ivar eticketability: The E-Ticketability of this AirPricing
    :ivar plating_carrier: The Plating Carrier for this journey
    :ivar provider_reservation_info_ref: Provider reservation reference
        key.
    :ivar air_pricing_info_group: This attribute is added to support
        multiple store fare in Host. All AirPricingInfo with same group
        number will be stored together.
    :ivar total_net_price: The total price of a negotiated fare.
    :ivar ticketed: Indicates if the associated stored fare is ticketed
        or not.
    :ivar pricing_type: Indicates the Pricing Type used. The possible
        values are TicketRecord, StoredFare, PricingInstruction.
    :ivar true_last_date_to_ticket: This date indicates the true last
        date/time to ticket for the fare. This date comes from the filed
        fare . There is no guarantee the fare will still be available on
        that date or that the fare amount may change. It is merely the
        last date to purchase a ticket based on the carriers fare rules
        at the time the itinerary was quoted and stored
    :ivar el_stat: This attribute is used to show the action results of
        an element. Possible values are "A" (when elements have been
        added to the UR) and "M" (when existing elements have been
        modified). Response only.
    :ivar key_override: If a duplicate key is found where we are adding
        elements in some cases like URAdd, then instead of erroring out
        set this attribute to true.
    :ivar in_policy: This attribute will be used to indicate if a fare
        or rate has been determined to be ‘in policy’ based on the
        associated policy settings.
    :ivar preferred_option: This attribute is used to indicate if the
        vendors responsible for the fare or rate being returned have
        been determined to be ‘preferred’ based on the associated policy
        settings.
    :ivar fare_calculation_ind: Fare calculation that was used to price
        the itinerary.
    :ivar cat35_indicator: A true value indicates that the fare has a
        Cat35 rule. A false valud indicates that the fare does not have
        a Cat35 rule
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    fare_info: List[FareInfo] = field(
        default_factory=list,
        metadata={
            "name": "FareInfo",
            "type": "Element",
            "max_occurs": 999,
        }
    )
    fare_status: Optional[FareStatus] = field(
        default=None,
        metadata={
            "name": "FareStatus",
            "type": "Element",
        }
    )
    fare_info_ref: List[FareInfoRef] = field(
        default_factory=list,
        metadata={
            "name": "FareInfoRef",
            "type": "Element",
            "max_occurs": 999,
        }
    )
    booking_info: List[BookingInfo] = field(
        default_factory=list,
        metadata={
            "name": "BookingInfo",
            "type": "Element",
            "max_occurs": 999,
        }
    )
    tax_info: List[TaxInfo] = field(
        default_factory=list,
        metadata={
            "name": "TaxInfo",
            "type": "Element",
            "max_occurs": 999,
        }
    )
    fare_calc: Optional[str] = field(
        default=None,
        metadata={
            "name": "FareCalc",
            "type": "Element",
        }
    )
    passenger_type: List[PassengerType] = field(
        default_factory=list,
        metadata={
            "name": "PassengerType",
            "type": "Element",
            "max_occurs": 999,
        }
    )
    booking_traveler_ref: List[BookingTravelerRef] = field(
        default_factory=list,
        metadata={
            "name": "BookingTravelerRef",
            "type": "Element",
            "namespace": "http://www.travelport.com/schema/common_v52_0",
            "max_occurs": 999,
        }
    )
    waiver_code: Optional[WaiverCode] = field(
        default=None,
        metadata={
            "name": "WaiverCode",
            "type": "Element",
        }
    )
    payment_ref: List[PaymentRef] = field(
        default_factory=list,
        metadata={
            "name": "PaymentRef",
            "type": "Element",
            "max_occurs": 999,
        }
    )
    change_penalty: List[TypeFarePenalty] = field(
        default_factory=list,
        metadata={
            "name": "ChangePenalty",
            "type": "Element",
            "max_occurs": 999,
        }
    )
    cancel_penalty: List[TypeFarePenalty] = field(
        default_factory=list,
        metadata={
            "name": "CancelPenalty",
            "type": "Element",
            "max_occurs": 999,
        }
    )
    no_show_penalty: List[TypeFarePenalty] = field(
        default_factory=list,
        metadata={
            "name": "NoShowPenalty",
            "type": "Element",
            "max_occurs": 999,
        }
    )
    most_restrictive_penalties: Optional[TypeMostRestrictivePenalties] = field(
        default=None,
        metadata={
            "name": "MostRestrictivePenalties",
            "type": "Element",
        }
    )
    fee_info: List[FeeInfo] = field(
        default_factory=list,
        metadata={
            "name": "FeeInfo",
            "type": "Element",
            "max_occurs": 999,
        }
    )
    adjustment: List[Adjustment] = field(
        default_factory=list,
        metadata={
            "name": "Adjustment",
            "type": "Element",
            "max_occurs": 999,
        }
    )
    yield_value: List[Yield] = field(
        default_factory=list,
        metadata={
            "name": "Yield",
            "type": "Element",
            "max_occurs": 999,
        }
    )
    air_pricing_modifiers: Optional[AirPricingModifiers] = field(
        default=None,
        metadata={
            "name": "AirPricingModifiers",
            "type": "Element",
        }
    )
    ticketing_modifiers_ref: List[TicketingModifiersRef] = field(
        default_factory=list,
        metadata={
            "name": "TicketingModifiersRef",
            "type": "Element",
            "max_occurs": 999,
        }
    )
    air_segment_pricing_modifiers: List[AirSegmentPricingModifiers] = field(
        default_factory=list,
        metadata={
            "name": "AirSegmentPricingModifiers",
            "type": "Element",
            "max_occurs": 999,
        }
    )
    flight_options_list: Optional[FlightOptionsList] = field(
        default=None,
        metadata={
            "name": "FlightOptionsList",
            "type": "Element",
        }
    )
    baggage_allowances: Optional[BaggageAllowances] = field(
        default=None,
        metadata={
            "name": "BaggageAllowances",
            "type": "Element",
        }
    )
    fare_rules_filter: Optional[FareRulesFilter] = field(
        default=None,
        metadata={
            "name": "FareRulesFilter",
            "type": "Element",
        }
    )
    policy_codes_list: Optional[PolicyCodesList] = field(
        default=None,
        metadata={
            "name": "PolicyCodesList",
            "type": "Element",
        }
    )
    price_change: List[PriceChangeType] = field(
        default_factory=list,
        metadata={
            "name": "PriceChange",
            "type": "Element",
            "max_occurs": 99,
        }
    )
    action_details: Optional[ActionDetails] = field(
        default=None,
        metadata={
            "name": "ActionDetails",
            "type": "Element",
        }
    )
    commission: List[Commission] = field(
        default_factory=list,
        metadata={
            "name": "Commission",
            "type": "Element",
            "namespace": "http://www.travelport.com/schema/common_v52_0",
            "max_occurs": 999,
        }
    )
    origin: Optional[str] = field(
        default=None,
        metadata={
            "name": "Origin",
            "type": "Attribute",
            "length": 3,
            "white_space": "collapse",
        }
    )
    destination: Optional[str] = field(
        default=None,
        metadata={
            "name": "Destination",
            "type": "Attribute",
            "length": 3,
            "white_space": "collapse",
        }
    )
    key: Optional[str] = field(
        default=None,
        metadata={
            "name": "Key",
            "type": "Attribute",
            "required": True,
        }
    )
    command_key: Optional[str] = field(
        default=None,
        metadata={
            "name": "CommandKey",
            "type": "Attribute",
            "max_length": 10,
        }
    )
    total_price: Optional[str] = field(
        default=None,
        metadata={
            "name": "TotalPrice",
            "type": "Attribute",
        }
    )
    base_price: Optional[str] = field(
        default=None,
        metadata={
            "name": "BasePrice",
            "type": "Attribute",
        }
    )
    approximate_total_price: Optional[str] = field(
        default=None,
        metadata={
            "name": "ApproximateTotalPrice",
            "type": "Attribute",
        }
    )
    approximate_base_price: Optional[str] = field(
        default=None,
        metadata={
            "name": "ApproximateBasePrice",
            "type": "Attribute",
        }
    )
    equivalent_base_price: Optional[str] = field(
        default=None,
        metadata={
            "name": "EquivalentBasePrice",
            "type": "Attribute",
        }
    )
    taxes: Optional[str] = field(
        default=None,
        metadata={
            "name": "Taxes",
            "type": "Attribute",
        }
    )
    fees: Optional[str] = field(
        default=None,
        metadata={
            "name": "Fees",
            "type": "Attribute",
        }
    )
    services: Optional[str] = field(
        default=None,
        metadata={
            "name": "Services",
            "type": "Attribute",
        }
    )
    approximate_taxes: Optional[str] = field(
        default=None,
        metadata={
            "name": "ApproximateTaxes",
            "type": "Attribute",
        }
    )
    approximate_fees: Optional[str] = field(
        default=None,
        metadata={
            "name": "ApproximateFees",
            "type": "Attribute",
        }
    )
    provider_code: Optional[str] = field(
        default=None,
        metadata={
            "name": "ProviderCode",
            "type": "Attribute",
            "min_length": 2,
            "max_length": 5,
        }
    )
    supplier_code: Optional[str] = field(
        default=None,
        metadata={
            "name": "SupplierCode",
            "type": "Attribute",
            "min_length": 1,
            "max_length": 5,
        }
    )
    amount_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "AmountType",
            "type": "Attribute",
            "min_length": 1,
            "max_length": 32,
        }
    )
    includes_vat: Optional[bool] = field(
        default=None,
        metadata={
            "name": "IncludesVAT",
            "type": "Attribute",
        }
    )
    exchange_amount: Optional[str] = field(
        default=None,
        metadata={
            "name": "ExchangeAmount",
            "type": "Attribute",
        }
    )
    forfeit_amount: Optional[str] = field(
        default=None,
        metadata={
            "name": "ForfeitAmount",
            "type": "Attribute",
        }
    )
    refundable: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Refundable",
            "type": "Attribute",
        }
    )
    exchangeable: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Exchangeable",
            "type": "Attribute",
        }
    )
    latest_ticketing_time: Optional[str] = field(
        default=None,
        metadata={
            "name": "LatestTicketingTime",
            "type": "Attribute",
        }
    )
    pricing_method: Optional[TypePricingMethod] = field(
        default=None,
        metadata={
            "name": "PricingMethod",
            "type": "Attribute",
            "required": True,
        }
    )
    checksum: Optional[str] = field(
        default=None,
        metadata={
            "name": "Checksum",
            "type": "Attribute",
        }
    )
    eticketability: Optional[TypeEticketability] = field(
        default=None,
        metadata={
            "name": "ETicketability",
            "type": "Attribute",
        }
    )
    plating_carrier: Optional[str] = field(
        default=None,
        metadata={
            "name": "PlatingCarrier",
            "type": "Attribute",
            "length": 2,
        }
    )
    provider_reservation_info_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "ProviderReservationInfoRef",
            "type": "Attribute",
        }
    )
    air_pricing_info_group: Optional[int] = field(
        default=None,
        metadata={
            "name": "AirPricingInfoGroup",
            "type": "Attribute",
        }
    )
    total_net_price: Optional[str] = field(
        default=None,
        metadata={
            "name": "TotalNetPrice",
            "type": "Attribute",
        }
    )
    ticketed: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Ticketed",
            "type": "Attribute",
        }
    )
    pricing_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "PricingType",
            "type": "Attribute",
            "max_length": 25,
        }
    )
    true_last_date_to_ticket: Optional[str] = field(
        default=None,
        metadata={
            "name": "TrueLastDateToTicket",
            "type": "Attribute",
        }
    )
    el_stat: Optional[TypeElementStatus] = field(
        default=None,
        metadata={
            "name": "ElStat",
            "type": "Attribute",
        }
    )
    key_override: Optional[bool] = field(
        default=None,
        metadata={
            "name": "KeyOverride",
            "type": "Attribute",
        }
    )
    in_policy: Optional[bool] = field(
        default=None,
        metadata={
            "name": "InPolicy",
            "type": "Attribute",
        }
    )
    preferred_option: Optional[bool] = field(
        default=None,
        metadata={
            "name": "PreferredOption",
            "type": "Attribute",
        }
    )
    fare_calculation_ind: Optional[str] = field(
        default=None,
        metadata={
            "name": "FareCalculationInd",
            "type": "Attribute",
            "length": 1,
        }
    )
    cat35_indicator: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Cat35Indicator",
            "type": "Attribute",
        }
    )


@dataclass
class AirSegmentSellFailureInfo:
    """
    Container to return air segment sell failures.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    air_segment_error: List[AirSegmentError] = field(
        default_factory=list,
        metadata={
            "name": "AirSegmentError",
            "type": "Element",
            "min_occurs": 1,
            "max_occurs": 999,
        }
    )


@dataclass
class AvailabilityErrorInfo(TypeErrorInfo):
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    air_segment_error: List[AirSegmentError] = field(
        default_factory=list,
        metadata={
            "name": "AirSegmentError",
            "type": "Element",
            "min_occurs": 1,
            "max_occurs": 999,
        }
    )


@dataclass
class FareInfoList:
    """
    The shared object list of FareInfos.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    fare_info: List[FareInfo] = field(
        default_factory=list,
        metadata={
            "name": "FareInfo",
            "type": "Element",
            "min_occurs": 1,
            "max_occurs": 999,
        }
    )


@dataclass
class AirExchangeMulitQuoteList:
    """
    The shared object list of AirExchangeMultiQuotes.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    air_exchange_multi_quote_option: List[AirExchangeMultiQuoteOption] = field(
        default_factory=list,
        metadata={
            "name": "AirExchangeMultiQuoteOption",
            "type": "Element",
            "min_occurs": 1,
            "max_occurs": 999,
        }
    )


@dataclass
class AirPricePoint:
    """
    The container which holds the Non Solutioned result.

    :ivar air_pricing_info:
    :ivar air_pricing_result_message:
    :ivar fee_info: Supported by ACH only
    :ivar fare_note:
    :ivar tax_info: Itinerary level taxes
    :ivar key:
    :ivar total_price: The total price for this entity including base
        price and all taxes.
    :ivar base_price: Represents the base price for this entity. This
        does not include any taxes or surcharges.
    :ivar approximate_total_price: The Converted total price in Default
        Currency for this entity including base price and all taxes.
    :ivar approximate_base_price: The Converted base price in Default
        Currency for this entity. This does not include any taxes or
        surcharges.
    :ivar equivalent_base_price: Represents the base price in the
        related currency for this entity. This does not include any
        taxes or surcharges.
    :ivar taxes: The aggregated amount of all the taxes that are
        associated with this entity. See the associated TaxInfo array
        for a breakdown of the individual taxes.
    :ivar fees: The aggregated amount of all the fees that are
        associated with this entity. See the associated FeeInfo array
        for a breakdown of the individual fees.
    :ivar services: The total cost for all optional services.
    :ivar approximate_taxes: The Converted tax amount in Default
        Currency.
    :ivar approximate_fees: The Converted fee amount in Default
        Currency.
    :ivar complete_itinerary: This attribute is used to return whether
        complete Itinerary is present in the AirPricePoint structure or
        not. If set to true means AirPricePoint contains the result for
        full requested itinerary.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    air_pricing_info: List[AirPricingInfo] = field(
        default_factory=list,
        metadata={
            "name": "AirPricingInfo",
            "type": "Element",
            "max_occurs": 999,
        }
    )
    air_pricing_result_message: List[TypeResultMessage] = field(
        default_factory=list,
        metadata={
            "name": "AirPricingResultMessage",
            "type": "Element",
            "max_occurs": 999,
        }
    )
    fee_info: List[FeeInfo] = field(
        default_factory=list,
        metadata={
            "name": "FeeInfo",
            "type": "Element",
            "max_occurs": 999,
        }
    )
    fare_note: List[FareNote] = field(
        default_factory=list,
        metadata={
            "name": "FareNote",
            "type": "Element",
            "max_occurs": 99,
        }
    )
    tax_info: List[TaxInfo] = field(
        default_factory=list,
        metadata={
            "name": "TaxInfo",
            "type": "Element",
            "max_occurs": 999,
        }
    )
    key: Optional[str] = field(
        default=None,
        metadata={
            "name": "Key",
            "type": "Attribute",
            "required": True,
        }
    )
    total_price: Optional[str] = field(
        default=None,
        metadata={
            "name": "TotalPrice",
            "type": "Attribute",
        }
    )
    base_price: Optional[str] = field(
        default=None,
        metadata={
            "name": "BasePrice",
            "type": "Attribute",
        }
    )
    approximate_total_price: Optional[str] = field(
        default=None,
        metadata={
            "name": "ApproximateTotalPrice",
            "type": "Attribute",
        }
    )
    approximate_base_price: Optional[str] = field(
        default=None,
        metadata={
            "name": "ApproximateBasePrice",
            "type": "Attribute",
        }
    )
    equivalent_base_price: Optional[str] = field(
        default=None,
        metadata={
            "name": "EquivalentBasePrice",
            "type": "Attribute",
        }
    )
    taxes: Optional[str] = field(
        default=None,
        metadata={
            "name": "Taxes",
            "type": "Attribute",
        }
    )
    fees: Optional[str] = field(
        default=None,
        metadata={
            "name": "Fees",
            "type": "Attribute",
        }
    )
    services: Optional[str] = field(
        default=None,
        metadata={
            "name": "Services",
            "type": "Attribute",
        }
    )
    approximate_taxes: Optional[str] = field(
        default=None,
        metadata={
            "name": "ApproximateTaxes",
            "type": "Attribute",
        }
    )
    approximate_fees: Optional[str] = field(
        default=None,
        metadata={
            "name": "ApproximateFees",
            "type": "Attribute",
        }
    )
    complete_itinerary: bool = field(
        default=True,
        metadata={
            "name": "CompleteItinerary",
            "type": "Attribute",
        }
    )


@dataclass
class AirPricingInfoList:
    """
    The shared object list of AirSegments.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    air_pricing_info: List[AirPricingInfo] = field(
        default_factory=list,
        metadata={
            "name": "AirPricingInfo",
            "type": "Element",
            "max_occurs": 999,
        }
    )


@dataclass
class AirPricingSolution:
    """
    The pricing container for an air travel itinerary.

    :ivar air_segment:
    :ivar air_segment_ref:
    :ivar journey:
    :ivar leg_ref:
    :ivar air_pricing_info:
    :ivar fare_note:
    :ivar fare_note_ref:
    :ivar connection:
    :ivar meta_data:
    :ivar air_pricing_result_message:
    :ivar fee_info:
    :ivar tax_info: Itinerary level taxes
    :ivar air_itinerary_solution_ref:
    :ivar host_token:
    :ivar optional_services:
    :ivar available_ssr:
    :ivar pricing_details:
    :ivar key:
    :ivar complete_itinerary: This attribute is used to return whether
        complete Itinerary is present in the AirPricingSolution
        structure or not. If set to true means AirPricingSolution
        contains the result for full requested itinerary.
    :ivar quote_date: This date will be equal to the date of the
        transaction unless the request included a modified ticket date.
    :ivar total_price: The total price for this entity including base
        price and all taxes.
    :ivar base_price: Represents the base price for this entity. This
        does not include any taxes or surcharges.
    :ivar approximate_total_price: The Converted total price in Default
        Currency for this entity including base price and all taxes.
    :ivar approximate_base_price: The Converted base price in Default
        Currency for this entity. This does not include any taxes or
        surcharges.
    :ivar equivalent_base_price: Represents the base price in the
        related currency for this entity. This does not include any
        taxes or surcharges.
    :ivar taxes: The aggregated amount of all the taxes that are
        associated with this entity. See the associated TaxInfo array
        for a breakdown of the individual taxes.
    :ivar fees: The aggregated amount of all the fees that are
        associated with this entity. See the associated FeeInfo array
        for a breakdown of the individual fees.
    :ivar services: The total cost for all optional services.
    :ivar approximate_taxes: The Converted tax amount in Default
        Currency.
    :ivar approximate_fees: The Converted fee amount in Default
        Currency.
    :ivar itinerary: For an exchange request this tells if the itinerary
        is the original one or new one. A value of Original will only
        apply to 1G/1V/1P/1S/1A. A value of New will apply to
        1G/1V/1P/1S/1A/ACH.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    air_segment: List[AirSegment] = field(
        default_factory=list,
        metadata={
            "name": "AirSegment",
            "type": "Element",
            "max_occurs": 999,
        }
    )
    air_segment_ref: List[AirSegmentRef] = field(
        default_factory=list,
        metadata={
            "name": "AirSegmentRef",
            "type": "Element",
            "max_occurs": 999,
        }
    )
    journey: List[Journey] = field(
        default_factory=list,
        metadata={
            "name": "Journey",
            "type": "Element",
            "max_occurs": 999,
        }
    )
    leg_ref: List[LegRef] = field(
        default_factory=list,
        metadata={
            "name": "LegRef",
            "type": "Element",
            "max_occurs": 999,
        }
    )
    air_pricing_info: List[AirPricingInfo] = field(
        default_factory=list,
        metadata={
            "name": "AirPricingInfo",
            "type": "Element",
            "max_occurs": 999,
        }
    )
    fare_note: List[FareNote] = field(
        default_factory=list,
        metadata={
            "name": "FareNote",
            "type": "Element",
            "max_occurs": 999,
        }
    )
    fare_note_ref: List[FareNoteRef] = field(
        default_factory=list,
        metadata={
            "name": "FareNoteRef",
            "type": "Element",
            "max_occurs": 999,
        }
    )
    connection: List[Connection] = field(
        default_factory=list,
        metadata={
            "name": "Connection",
            "type": "Element",
            "max_occurs": 999,
        }
    )
    meta_data: List[MetaData] = field(
        default_factory=list,
        metadata={
            "name": "MetaData",
            "type": "Element",
            "namespace": "http://www.travelport.com/schema/common_v52_0",
            "max_occurs": 999,
        }
    )
    air_pricing_result_message: List[TypeResultMessage] = field(
        default_factory=list,
        metadata={
            "name": "AirPricingResultMessage",
            "type": "Element",
            "max_occurs": 999,
        }
    )
    fee_info: List[FeeInfo] = field(
        default_factory=list,
        metadata={
            "name": "FeeInfo",
            "type": "Element",
            "max_occurs": 999,
        }
    )
    tax_info: List[TaxInfo] = field(
        default_factory=list,
        metadata={
            "name": "TaxInfo",
            "type": "Element",
            "max_occurs": 999,
        }
    )
    air_itinerary_solution_ref: List[AirItinerarySolutionRef] = field(
        default_factory=list,
        metadata={
            "name": "AirItinerarySolutionRef",
            "type": "Element",
            "max_occurs": 999,
        }
    )
    host_token: List[HostToken] = field(
        default_factory=list,
        metadata={
            "name": "HostToken",
            "type": "Element",
            "namespace": "http://www.travelport.com/schema/common_v52_0",
            "max_occurs": 999,
        }
    )
    optional_services: Optional[OptionalServices] = field(
        default=None,
        metadata={
            "name": "OptionalServices",
            "type": "Element",
        }
    )
    available_ssr: Optional[AvailableSsr] = field(
        default=None,
        metadata={
            "name": "AvailableSSR",
            "type": "Element",
        }
    )
    pricing_details: Optional[PricingDetails] = field(
        default=None,
        metadata={
            "name": "PricingDetails",
            "type": "Element",
        }
    )
    key: Optional[str] = field(
        default=None,
        metadata={
            "name": "Key",
            "type": "Attribute",
            "required": True,
        }
    )
    complete_itinerary: bool = field(
        default=True,
        metadata={
            "name": "CompleteItinerary",
            "type": "Attribute",
        }
    )
    quote_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "QuoteDate",
            "type": "Attribute",
        }
    )
    total_price: Optional[str] = field(
        default=None,
        metadata={
            "name": "TotalPrice",
            "type": "Attribute",
        }
    )
    base_price: Optional[str] = field(
        default=None,
        metadata={
            "name": "BasePrice",
            "type": "Attribute",
        }
    )
    approximate_total_price: Optional[str] = field(
        default=None,
        metadata={
            "name": "ApproximateTotalPrice",
            "type": "Attribute",
        }
    )
    approximate_base_price: Optional[str] = field(
        default=None,
        metadata={
            "name": "ApproximateBasePrice",
            "type": "Attribute",
        }
    )
    equivalent_base_price: Optional[str] = field(
        default=None,
        metadata={
            "name": "EquivalentBasePrice",
            "type": "Attribute",
        }
    )
    taxes: Optional[str] = field(
        default=None,
        metadata={
            "name": "Taxes",
            "type": "Attribute",
        }
    )
    fees: Optional[str] = field(
        default=None,
        metadata={
            "name": "Fees",
            "type": "Attribute",
        }
    )
    services: Optional[str] = field(
        default=None,
        metadata={
            "name": "Services",
            "type": "Attribute",
        }
    )
    approximate_taxes: Optional[str] = field(
        default=None,
        metadata={
            "name": "ApproximateTaxes",
            "type": "Attribute",
        }
    )
    approximate_fees: Optional[str] = field(
        default=None,
        metadata={
            "name": "ApproximateFees",
            "type": "Attribute",
        }
    )
    itinerary: Optional[AirPricingSolutionItinerary] = field(
        default=None,
        metadata={
            "name": "Itinerary",
            "type": "Attribute",
        }
    )


@dataclass
class Etr:
    """
    Result of ticketing request.

    :ivar air_reservation_locator_code:
    :ivar agency_info:
    :ivar booking_traveler:
    :ivar form_of_payment:
    :ivar payment:
    :ivar credit_card_auth: This is a container to display detail
        information of credit card auth. Providers supported: Worldspan.
    :ivar supplier_locator:
    :ivar fare_calc:
    :ivar ticket:
    :ivar commission:
    :ivar air_pricing_info:
    :ivar audit_data:
    :ivar restriction:
    :ivar waiver_code:
    :ivar baggage_allowances: Baggage Allowance Info after Ticketing
    :ivar key:
    :ivar total_price: The total price for this entity including base
        price and all taxes.
    :ivar base_price: Represents the base price for this entity. This
        does not include any taxes or surcharges.
    :ivar approximate_total_price: The Converted total price in Default
        Currency for this entity including base price and all taxes.
    :ivar approximate_base_price: The Converted base price in Default
        Currency for this entity. This does not include any taxes or
        surcharges.
    :ivar equivalent_base_price: Represents the base price in the
        related currency for this entity. This does not include any
        taxes or surcharges.
    :ivar taxes: The aggregated amount of all the taxes that are
        associated with this entity. See the associated TaxInfo array
        for a breakdown of the individual taxes.
    :ivar fees: The aggregated amount of all the fees that are
        associated with this entity. See the associated FeeInfo array
        for a breakdown of the individual fees.
    :ivar services: The total cost for all optional services.
    :ivar approximate_taxes: The Converted tax amount in Default
        Currency.
    :ivar approximate_fees: The Converted fee amount in Default
        Currency.
    :ivar refundable:
    :ivar exchangeable:
    :ivar tour_code:
    :ivar issued_date: Ticket issue date.
    :ivar bulk_ticket: Whether the ticket was issued as bulk.
    :ivar provider_code: Contains the Provider Code of the provider that
        houses this ETR.
    :ivar provider_locator_code: Contains the Locator Code of the
        Provider Reservation that houses this ETR.
    :ivar iatanumber: Contains the IATA Number of the agent initiating
        the request.
    :ivar pseudo_city_code: Contain Pseudo City, city/office number,
        branch ID, etc.
    :ivar country_code: Contains Ticketed PCC’s Country code.
    :ivar plating_carrier: Contains the Plating Carrier of this ETR.
    :ivar el_stat: This attribute is used to show the action results of
        an element. Possible values are "A" (when elements have been
        added to the UR) and "M" (when existing elements have been
        modified). Response only.
    :ivar key_override: If a duplicate key is found where we are adding
        elements in some cases like URAdd, then instead of erroring out
        set this attribute to true.
    """
    class Meta:
        name = "ETR"
        namespace = "http://www.travelport.com/schema/air_v52_0"

    air_reservation_locator_code: Optional[str] = field(
        default=None,
        metadata={
            "name": "AirReservationLocatorCode",
            "type": "Element",
            "min_length": 5,
            "max_length": 8,
        }
    )
    agency_info: Optional[AgencyInfo] = field(
        default=None,
        metadata={
            "name": "AgencyInfo",
            "type": "Element",
            "namespace": "http://www.travelport.com/schema/common_v52_0",
        }
    )
    booking_traveler: Optional[BookingTraveler] = field(
        default=None,
        metadata={
            "name": "BookingTraveler",
            "type": "Element",
            "namespace": "http://www.travelport.com/schema/common_v52_0",
            "required": True,
        }
    )
    form_of_payment: List[FormOfPayment] = field(
        default_factory=list,
        metadata={
            "name": "FormOfPayment",
            "type": "Element",
            "namespace": "http://www.travelport.com/schema/common_v52_0",
            "max_occurs": 999,
        }
    )
    payment: List[Payment] = field(
        default_factory=list,
        metadata={
            "name": "Payment",
            "type": "Element",
            "namespace": "http://www.travelport.com/schema/common_v52_0",
            "max_occurs": 999,
        }
    )
    credit_card_auth: List[CreditCardAuth] = field(
        default_factory=list,
        metadata={
            "name": "CreditCardAuth",
            "type": "Element",
            "namespace": "http://www.travelport.com/schema/common_v52_0",
            "max_occurs": 999,
        }
    )
    supplier_locator: List[SupplierLocator] = field(
        default_factory=list,
        metadata={
            "name": "SupplierLocator",
            "type": "Element",
            "namespace": "http://www.travelport.com/schema/common_v52_0",
            "max_occurs": 999,
        }
    )
    fare_calc: Optional[str] = field(
        default=None,
        metadata={
            "name": "FareCalc",
            "type": "Element",
            "required": True,
        }
    )
    ticket: List[Ticket] = field(
        default_factory=list,
        metadata={
            "name": "Ticket",
            "type": "Element",
            "min_occurs": 1,
            "max_occurs": 999,
        }
    )
    commission: List[Commission] = field(
        default_factory=list,
        metadata={
            "name": "Commission",
            "type": "Element",
            "namespace": "http://www.travelport.com/schema/common_v52_0",
            "max_occurs": 999,
        }
    )
    air_pricing_info: Optional[AirPricingInfo] = field(
        default=None,
        metadata={
            "name": "AirPricingInfo",
            "type": "Element",
        }
    )
    audit_data: Optional[AuditData] = field(
        default=None,
        metadata={
            "name": "AuditData",
            "type": "Element",
        }
    )
    restriction: List[CommonRestriction] = field(
        default_factory=list,
        metadata={
            "name": "Restriction",
            "type": "Element",
            "namespace": "http://www.travelport.com/schema/common_v52_0",
            "max_occurs": 999,
        }
    )
    waiver_code: Optional[WaiverCode] = field(
        default=None,
        metadata={
            "name": "WaiverCode",
            "type": "Element",
        }
    )
    baggage_allowances: Optional[BaggageAllowances] = field(
        default=None,
        metadata={
            "name": "BaggageAllowances",
            "type": "Element",
        }
    )
    key: Optional[str] = field(
        default=None,
        metadata={
            "name": "Key",
            "type": "Attribute",
        }
    )
    total_price: Optional[str] = field(
        default=None,
        metadata={
            "name": "TotalPrice",
            "type": "Attribute",
        }
    )
    base_price: Optional[str] = field(
        default=None,
        metadata={
            "name": "BasePrice",
            "type": "Attribute",
        }
    )
    approximate_total_price: Optional[str] = field(
        default=None,
        metadata={
            "name": "ApproximateTotalPrice",
            "type": "Attribute",
        }
    )
    approximate_base_price: Optional[str] = field(
        default=None,
        metadata={
            "name": "ApproximateBasePrice",
            "type": "Attribute",
        }
    )
    equivalent_base_price: Optional[str] = field(
        default=None,
        metadata={
            "name": "EquivalentBasePrice",
            "type": "Attribute",
        }
    )
    taxes: Optional[str] = field(
        default=None,
        metadata={
            "name": "Taxes",
            "type": "Attribute",
        }
    )
    fees: Optional[str] = field(
        default=None,
        metadata={
            "name": "Fees",
            "type": "Attribute",
        }
    )
    services: Optional[str] = field(
        default=None,
        metadata={
            "name": "Services",
            "type": "Attribute",
        }
    )
    approximate_taxes: Optional[str] = field(
        default=None,
        metadata={
            "name": "ApproximateTaxes",
            "type": "Attribute",
        }
    )
    approximate_fees: Optional[str] = field(
        default=None,
        metadata={
            "name": "ApproximateFees",
            "type": "Attribute",
        }
    )
    refundable: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Refundable",
            "type": "Attribute",
        }
    )
    exchangeable: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Exchangeable",
            "type": "Attribute",
        }
    )
    tour_code: Optional[str] = field(
        default=None,
        metadata={
            "name": "TourCode",
            "type": "Attribute",
            "max_length": 15,
        }
    )
    issued_date: Optional[str] = field(
        default=None,
        metadata={
            "name": "IssuedDate",
            "type": "Attribute",
            "required": True,
        }
    )
    bulk_ticket: Optional[bool] = field(
        default=None,
        metadata={
            "name": "BulkTicket",
            "type": "Attribute",
        }
    )
    provider_code: Optional[str] = field(
        default=None,
        metadata={
            "name": "ProviderCode",
            "type": "Attribute",
            "min_length": 2,
            "max_length": 5,
        }
    )
    provider_locator_code: Optional[str] = field(
        default=None,
        metadata={
            "name": "ProviderLocatorCode",
            "type": "Attribute",
            "max_length": 15,
        }
    )
    iatanumber: Optional[str] = field(
        default=None,
        metadata={
            "name": "IATANumber",
            "type": "Attribute",
            "max_length": 8,
        }
    )
    pseudo_city_code: Optional[str] = field(
        default=None,
        metadata={
            "name": "PseudoCityCode",
            "type": "Attribute",
            "min_length": 2,
            "max_length": 10,
        }
    )
    country_code: Optional[str] = field(
        default=None,
        metadata={
            "name": "CountryCode",
            "type": "Attribute",
            "length": 2,
        }
    )
    plating_carrier: Optional[str] = field(
        default=None,
        metadata={
            "name": "PlatingCarrier",
            "type": "Attribute",
            "length": 2,
        }
    )
    el_stat: Optional[TypeElementStatus] = field(
        default=None,
        metadata={
            "name": "ElStat",
            "type": "Attribute",
        }
    )
    key_override: Optional[bool] = field(
        default=None,
        metadata={
            "name": "KeyOverride",
            "type": "Attribute",
        }
    )


@dataclass
class Tcr:
    """
    Information related to Ticketless carriers.

    :ivar form_of_payment:
    :ivar payment:
    :ivar booking_traveler:
    :ivar passenger_ticket_number:
    :ivar air_pricing_info:
    :ivar agency_info:
    :ivar air_reservation_locator_code:
    :ivar supplier_locator:
    :ivar refund_remark:
    :ivar tcrnumber: The identifying number for a Ticketless Air
        Reservation.
    :ivar status: The current status of this TCR. Some status values are
        not applicable by some Airlines.
    :ivar modified_date: The date at which the status was changed on
        this TCR due to an action event (itemized from the booleans
        below).
    :ivar confirmed_date: The date at which this TCR was confirmed (not
        created). This mean the payment was approved and processed and
        travel for this TCR is confirmed.
    :ivar base_price: The base price of this TCR as a whole as it was
        when it was first booked.
    :ivar taxes: The taxes of this TCR as a whole as it was when it was
        first booked.
    :ivar fees: The fees of this TCR as a whole as it was when it was
        first booked.
    :ivar refundable: Is it possible to perform a Refund for this TCR.
    :ivar exchangeable: Is it possible to perform an Exchange for this
        TCR.
    :ivar voidable: Is it possible to perform a Void on this TCR.
    :ivar modifiable: Is it possible to modify this TCR (opposed to
        Refund/Exchange/Void).
    :ivar provider_code:
    :ivar provider_locator_code:
    :ivar supplier_code: Represents Carrier Code for ACH PNR Retrieve.
    :ivar refund_access_code:
    :ivar refund_amount: Total Amount refunded to the customer.
    :ivar refund_fee: Charges incurred for processing refund.
    :ivar forfeit_amount: Amount forfeited as a result of refund.
    """
    class Meta:
        name = "TCR"
        namespace = "http://www.travelport.com/schema/air_v52_0"

    form_of_payment: List[FormOfPayment] = field(
        default_factory=list,
        metadata={
            "name": "FormOfPayment",
            "type": "Element",
            "namespace": "http://www.travelport.com/schema/common_v52_0",
            "max_occurs": 999,
        }
    )
    payment: List[Payment] = field(
        default_factory=list,
        metadata={
            "name": "Payment",
            "type": "Element",
            "namespace": "http://www.travelport.com/schema/common_v52_0",
            "max_occurs": 999,
        }
    )
    booking_traveler: List[BookingTraveler] = field(
        default_factory=list,
        metadata={
            "name": "BookingTraveler",
            "type": "Element",
            "namespace": "http://www.travelport.com/schema/common_v52_0",
            "min_occurs": 1,
            "max_occurs": 999,
        }
    )
    passenger_ticket_number: List[PassengerTicketNumber] = field(
        default_factory=list,
        metadata={
            "name": "PassengerTicketNumber",
            "type": "Element",
            "max_occurs": 999,
        }
    )
    air_pricing_info: List[AirPricingInfo] = field(
        default_factory=list,
        metadata={
            "name": "AirPricingInfo",
            "type": "Element",
            "max_occurs": 999,
        }
    )
    agency_info: Optional[AgencyInfo] = field(
        default=None,
        metadata={
            "name": "AgencyInfo",
            "type": "Element",
            "namespace": "http://www.travelport.com/schema/common_v52_0",
        }
    )
    air_reservation_locator_code: Optional[str] = field(
        default=None,
        metadata={
            "name": "AirReservationLocatorCode",
            "type": "Element",
            "min_length": 5,
            "max_length": 8,
        }
    )
    supplier_locator: List[SupplierLocator] = field(
        default_factory=list,
        metadata={
            "name": "SupplierLocator",
            "type": "Element",
            "namespace": "http://www.travelport.com/schema/common_v52_0",
            "max_occurs": 999,
        }
    )
    refund_remark: List[RefundRemark] = field(
        default_factory=list,
        metadata={
            "name": "RefundRemark",
            "type": "Element",
            "namespace": "http://www.travelport.com/schema/common_v52_0",
            "max_occurs": 999,
        }
    )
    tcrnumber: Optional[str] = field(
        default=None,
        metadata={
            "name": "TCRNumber",
            "type": "Attribute",
            "required": True,
        }
    )
    status: Optional[TypeTcrstatus] = field(
        default=None,
        metadata={
            "name": "Status",
            "type": "Attribute",
            "required": True,
        }
    )
    modified_date: Optional[str] = field(
        default=None,
        metadata={
            "name": "ModifiedDate",
            "type": "Attribute",
            "required": True,
        }
    )
    confirmed_date: Optional[str] = field(
        default=None,
        metadata={
            "name": "ConfirmedDate",
            "type": "Attribute",
        }
    )
    base_price: Optional[str] = field(
        default=None,
        metadata={
            "name": "BasePrice",
            "type": "Attribute",
            "required": True,
        }
    )
    taxes: Optional[str] = field(
        default=None,
        metadata={
            "name": "Taxes",
            "type": "Attribute",
            "required": True,
        }
    )
    fees: Optional[str] = field(
        default=None,
        metadata={
            "name": "Fees",
            "type": "Attribute",
            "required": True,
        }
    )
    refundable: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Refundable",
            "type": "Attribute",
            "required": True,
        }
    )
    exchangeable: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Exchangeable",
            "type": "Attribute",
            "required": True,
        }
    )
    voidable: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Voidable",
            "type": "Attribute",
            "required": True,
        }
    )
    modifiable: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Modifiable",
            "type": "Attribute",
            "required": True,
        }
    )
    provider_code: Optional[str] = field(
        default=None,
        metadata={
            "name": "ProviderCode",
            "type": "Attribute",
            "required": True,
            "min_length": 2,
            "max_length": 5,
        }
    )
    provider_locator_code: Optional[str] = field(
        default=None,
        metadata={
            "name": "ProviderLocatorCode",
            "type": "Attribute",
            "required": True,
            "max_length": 15,
        }
    )
    supplier_code: Optional[str] = field(
        default=None,
        metadata={
            "name": "SupplierCode",
            "type": "Attribute",
            "min_length": 1,
            "max_length": 5,
        }
    )
    refund_access_code: Optional[str] = field(
        default=None,
        metadata={
            "name": "RefundAccessCode",
            "type": "Attribute",
            "namespace": "http://www.travelport.com/schema/air_v52_0",
            "min_length": 1,
            "max_length": 32,
        }
    )
    refund_amount: Optional[str] = field(
        default=None,
        metadata={
            "name": "RefundAmount",
            "type": "Attribute",
        }
    )
    refund_fee: Optional[str] = field(
        default=None,
        metadata={
            "name": "RefundFee",
            "type": "Attribute",
        }
    )
    forfeit_amount: Optional[str] = field(
        default=None,
        metadata={
            "name": "ForfeitAmount",
            "type": "Attribute",
        }
    )


@dataclass
class TypeBaseAirReservation(BaseReservation):
    """
    Parent Container for Air Reservation.

    :ivar optional_services:
    :ivar supplier_locator:
    :ivar third_party_information:
    :ivar document_info:
    :ivar booking_traveler_ref:
    :ivar provider_reservation_info_ref:
    :ivar air_segment:
    :ivar svc_segment: Service segment added to collect additional fee.
        1P only
    :ivar air_pricing_info:
    :ivar payment:
    :ivar credit_card_auth:
    :ivar fare_note:
    :ivar fee_info:
    :ivar tax_info: Itinerary level taxes
    :ivar ticketing_modifiers:
    :ivar associated_remark:
    :ivar pocket_itinerary_remark:
    :ivar air_exchange_bundle_total:
    :ivar air_exchange_bundle: Bundle exchange, pricing, and penalty
        information. Providers ACH/1G/1V/1P
    """
    class Meta:
        name = "typeBaseAirReservation"
        target_namespace = "http://www.travelport.com/schema/air_v52_0"

    optional_services: Optional[OptionalServices] = field(
        default=None,
        metadata={
            "name": "OptionalServices",
            "type": "Element",
            "namespace": "http://www.travelport.com/schema/air_v52_0",
        }
    )
    supplier_locator: List[SupplierLocator] = field(
        default_factory=list,
        metadata={
            "name": "SupplierLocator",
            "type": "Element",
            "namespace": "http://www.travelport.com/schema/common_v52_0",
            "max_occurs": 999,
        }
    )
    third_party_information: List[ThirdPartyInformation] = field(
        default_factory=list,
        metadata={
            "name": "ThirdPartyInformation",
            "type": "Element",
            "namespace": "http://www.travelport.com/schema/common_v52_0",
            "max_occurs": 999,
        }
    )
    document_info: Optional[DocumentInfo] = field(
        default=None,
        metadata={
            "name": "DocumentInfo",
            "type": "Element",
            "namespace": "http://www.travelport.com/schema/air_v52_0",
        }
    )
    booking_traveler_ref: List[BookingTravelerRef] = field(
        default_factory=list,
        metadata={
            "name": "BookingTravelerRef",
            "type": "Element",
            "namespace": "http://www.travelport.com/schema/common_v52_0",
            "max_occurs": 999,
        }
    )
    provider_reservation_info_ref: List[ProviderReservationInfoRef] = field(
        default_factory=list,
        metadata={
            "name": "ProviderReservationInfoRef",
            "type": "Element",
            "namespace": "http://www.travelport.com/schema/common_v52_0",
            "max_occurs": 999,
        }
    )
    air_segment: List[AirSegment] = field(
        default_factory=list,
        metadata={
            "name": "AirSegment",
            "type": "Element",
            "namespace": "http://www.travelport.com/schema/air_v52_0",
            "max_occurs": 999,
        }
    )
    svc_segment: List[SvcSegment] = field(
        default_factory=list,
        metadata={
            "name": "SvcSegment",
            "type": "Element",
            "namespace": "http://www.travelport.com/schema/air_v52_0",
            "max_occurs": 999,
        }
    )
    air_pricing_info: List[AirPricingInfo] = field(
        default_factory=list,
        metadata={
            "name": "AirPricingInfo",
            "type": "Element",
            "namespace": "http://www.travelport.com/schema/air_v52_0",
            "max_occurs": 999,
        }
    )
    payment: List[Payment] = field(
        default_factory=list,
        metadata={
            "name": "Payment",
            "type": "Element",
            "namespace": "http://www.travelport.com/schema/common_v52_0",
            "max_occurs": 999,
        }
    )
    credit_card_auth: List[CreditCardAuth] = field(
        default_factory=list,
        metadata={
            "name": "CreditCardAuth",
            "type": "Element",
            "namespace": "http://www.travelport.com/schema/common_v52_0",
            "max_occurs": 999,
        }
    )
    fare_note: List[FareNote] = field(
        default_factory=list,
        metadata={
            "name": "FareNote",
            "type": "Element",
            "namespace": "http://www.travelport.com/schema/air_v52_0",
            "max_occurs": 999,
        }
    )
    fee_info: List[FeeInfo] = field(
        default_factory=list,
        metadata={
            "name": "FeeInfo",
            "type": "Element",
            "namespace": "http://www.travelport.com/schema/air_v52_0",
            "max_occurs": 999,
        }
    )
    tax_info: List[TypeTaxInfoWithPaymentRef] = field(
        default_factory=list,
        metadata={
            "name": "TaxInfo",
            "type": "Element",
            "namespace": "http://www.travelport.com/schema/air_v52_0",
            "max_occurs": 999,
        }
    )
    ticketing_modifiers: List[TicketingModifiers] = field(
        default_factory=list,
        metadata={
            "name": "TicketingModifiers",
            "type": "Element",
            "namespace": "http://www.travelport.com/schema/air_v52_0",
            "max_occurs": 999,
        }
    )
    associated_remark: List[AssociatedRemark] = field(
        default_factory=list,
        metadata={
            "name": "AssociatedRemark",
            "type": "Element",
            "namespace": "http://www.travelport.com/schema/air_v52_0",
            "max_occurs": 999,
        }
    )
    pocket_itinerary_remark: List[PocketItineraryRemark] = field(
        default_factory=list,
        metadata={
            "name": "PocketItineraryRemark",
            "type": "Element",
            "namespace": "http://www.travelport.com/schema/air_v52_0",
            "max_occurs": 999,
        }
    )
    air_exchange_bundle_total: Optional[AirExchangeBundleTotal] = field(
        default=None,
        metadata={
            "name": "AirExchangeBundleTotal",
            "type": "Element",
            "namespace": "http://www.travelport.com/schema/air_v52_0",
        }
    )
    air_exchange_bundle: List[AirExchangeBundle] = field(
        default_factory=list,
        metadata={
            "name": "AirExchangeBundle",
            "type": "Element",
            "namespace": "http://www.travelport.com/schema/air_v52_0",
            "max_occurs": 999,
        }
    )


@dataclass
class AirCreateReservationPortTypeServiceOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["AirCreateReservationPortTypeServiceOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        air_create_reservation_rsp: Optional[AirCreateReservationRsp] = field(
            default=None,
            metadata={
                "name": "AirCreateReservationRsp",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/universal_v52_0",
            }
        )
        fault: Optional["AirCreateReservationPortTypeServiceOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            }
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            detail: Optional["AirCreateReservationPortTypeServiceOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )

            @dataclass
            class Detail:
                error_info: Optional[V52ErrorInfo] = field(
                    default=None,
                    metadata={
                        "name": "ErrorInfo",
                        "type": "Element",
                        "namespace": "http://www.travelport.com/schema/common_v52_0",
                    }
                )
                availability_error_info: Optional[AvailabilityErrorInfo] = field(
                    default=None,
                    metadata={
                        "name": "AvailabilityErrorInfo",
                        "type": "Element",
                        "namespace": "http://www.travelport.com/schema/air_v52_0",
                    }
                )


@dataclass
class UniversalRecordModifyServicePortTypeServiceOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "http://www.travelport.com/service/air_v52_0"

    body: Optional["UniversalRecordModifyServicePortTypeServiceOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        }
    )

    @dataclass
    class Body:
        universal_record_modify_rsp: Optional[UniversalRecordModifyRsp] = field(
            default=None,
            metadata={
                "name": "UniversalRecordModifyRsp",
                "type": "Element",
                "namespace": "http://www.travelport.com/schema/universal_v52_0",
            }
        )
        fault: Optional["UniversalRecordModifyServicePortTypeServiceOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            }
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )
            detail: Optional["UniversalRecordModifyServicePortTypeServiceOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                }
            )

            @dataclass
            class Detail:
                error_info: Optional[V52ErrorInfo] = field(
                    default=None,
                    metadata={
                        "name": "ErrorInfo",
                        "type": "Element",
                        "namespace": "http://www.travelport.com/schema/common_v52_0",
                    }
                )
                availability_error_info: Optional[AvailabilityErrorInfo] = field(
                    default=None,
                    metadata={
                        "name": "AvailabilityErrorInfo",
                        "type": "Element",
                        "namespace": "http://www.travelport.com/schema/air_v52_0",
                    }
                )
                universal_modify_error_info: Optional[UniversalModifyErrorInfo] = field(
                    default=None,
                    metadata={
                        "name": "UniversalModifyErrorInfo",
                        "type": "Element",
                        "namespace": "http://www.travelport.com/schema/universal_v52_0",
                    }
                )


@dataclass
class AirPricePointList:
    """
    Provides the list of AirPricePoint (Non Solutioned Result)

    :ivar air_price_point: The container which holds the Non Solutioned
        result. Different options for each search leg requested will be
        returned and one option for each search leg can be selected.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    air_price_point: List[AirPricePoint] = field(
        default_factory=list,
        metadata={
            "name": "AirPricePoint",
            "type": "Element",
            "max_occurs": 999,
        }
    )


@dataclass
class AirPriceResult:
    """A solution will be returned if one exists.

    Otherwise an error will be present

    :ivar air_pricing_solution:
    :ivar fare_rule:
    :ivar air_price_error:
    :ivar command_key: The command identifier used when this is in
        response to an AirPricingCommand. Not used in any request
        processing.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    air_pricing_solution: List[AirPricingSolution] = field(
        default_factory=list,
        metadata={
            "name": "AirPricingSolution",
            "type": "Element",
            "max_occurs": 99,
        }
    )
    fare_rule: List[FareRule] = field(
        default_factory=list,
        metadata={
            "name": "FareRule",
            "type": "Element",
            "max_occurs": 999,
        }
    )
    air_price_error: Optional[TypeResultMessage] = field(
        default=None,
        metadata={
            "name": "AirPriceError",
            "type": "Element",
        }
    )
    command_key: Optional[str] = field(
        default=None,
        metadata={
            "name": "CommandKey",
            "type": "Attribute",
            "max_length": 10,
        }
    )


@dataclass
class AirReservation(TypeBaseAirReservation):
    """
    The parent container for all booking data.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"


@dataclass
class AirScheduleChangedInfo:
    """
    Returned when the requested schedule does not match the host system schedule
    Contents will be a new AirPricingSolution that contains all the new schedule
    information as well as the pricing information.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    air_pricing_solution: Optional[AirPricingSolution] = field(
        default=None,
        metadata={
            "name": "AirPricingSolution",
            "type": "Element",
            "required": True,
        }
    )


@dataclass
class AirSolutionChangedInfo:
    """If RetainReservation is None, this will contain the new values returned from
    the provider.

    If RetainReservation is Price, Schedule, or Both and there is a
    price/schedule change, this will contain the new values that were
    returned from the provider. If RetainReservation is Price, Schedule,
    or Both and there isn’t a price/schedule change, this element will
    not be returned.
    """
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    air_pricing_solution: Optional[AirPricingSolution] = field(
        default=None,
        metadata={
            "name": "AirPricingSolution",
            "type": "Element",
            "required": True,
        }
    )
    reason_code: Optional[AirSolutionChangedInfoReasonCode] = field(
        default=None,
        metadata={
            "name": "ReasonCode",
            "type": "Attribute",
            "required": True,
        }
    )


@dataclass
class OptionalServicesInfo:
    class Meta:
        namespace = "http://www.travelport.com/schema/air_v52_0"

    air_pricing_solution: Optional[AirPricingSolution] = field(
        default=None,
        metadata={
            "name": "AirPricingSolution",
            "type": "Element",
            "required": True,
        }
    )
    form_of_payment: List[FormOfPayment] = field(
        default_factory=list,
        metadata={
            "name": "FormOfPayment",
            "type": "Element",
            "namespace": "http://www.travelport.com/schema/common_v52_0",
            "max_occurs": 999,
        }
    )
    form_of_payment_ref: List[FormOfPaymentRef] = field(
        default_factory=list,
        metadata={
            "name": "FormOfPaymentRef",
            "type": "Element",
            "namespace": "http://www.travelport.com/schema/common_v52_0",
            "max_occurs": 999,
        }
    )


@dataclass
class TypeAirReservationWithFop(TypeBaseAirReservation):
    """
    Air Reservation With Form Of Payment.
    """
    class Meta:
        name = "typeAirReservationWithFOP"
        target_namespace = "http://www.travelport.com/schema/air_v52_0"

    form_of_payment: List[FormOfPayment] = field(
        default_factory=list,
        metadata={
            "name": "FormOfPayment",
            "type": "Element",
            "namespace": "http://www.travelport.com/schema/common_v52_0",
            "max_occurs": 999,
        }
    )


class AirCreateReservationPortTypeService:
    style = "document"
    location = "http://localhost:8080/kestrel/AirService"
    transport = "http://schemas.xmlsoap.org/soap/http"
    soap_action = "http://localhost:8080/kestrel/AirService"
    input = AirCreateReservationPortTypeServiceInput
    output = AirCreateReservationPortTypeServiceOutput


class UniversalRecordModifyServicePortTypeService:
    style = "document"
    location = "http://localhost:8080/kestrel/UniversalRecordService"
    transport = "http://schemas.xmlsoap.org/soap/http"
    soap_action = "http://localhost:8080/kestrel/UniversalRecordService"
    input = UniversalRecordModifyServicePortTypeServiceInput
    output = UniversalRecordModifyServicePortTypeServiceOutput
